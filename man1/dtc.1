.\"-
.\" Авторское право (c) 2013 Дэвид Чиснолл
.\" Все права защищены.
.\"
.\" Это программное обеспечение было разработано SRI International и Кембриджской
.\" лабораторией компьютерных технологий Университета в рамках контракта DARPA/AFRL
.\" (FA8750-10-C-0237) ("CTSRD") как часть исследовательской программы DARPA CRASH.
.\"
.\" Это программное обеспечение было разработано SRI International и Кембриджской
.\" лабораторией компьютерных технологий Университета для распространения и
.\" использования в исходной и бинарной форме с изменениями или без них при
.\" соблюдении следующих условий:
.\" 1. Распространение исходного кода должно сохранять приведенное выше уведомление о копирайте,
.\"    этот список условий и следующий отказ от ответственности.
.\" 2. Распространение в бинарной форме должно воспроизводить приведенное выше уведомление о копирайте,
.\"    этот список условий и следующий отказ от ответственности в
.\"    документации и/или других материалах, предоставляемых вместе с распространением.
.\" 3. Ни название университета, ни имена его участников
.\"    не могут использоваться для продвижения производных продуктов
.\"    без явного предварительного письменного разрешения.
.\"
.\" ДАННОЕ ПРОГРАММНОЕ ОБЕСПЕЧЕНИЕ ПРЕДОСТАВЛЕНО РЕГЕНТАМИ И УЧАСТНИКАМИ «КАК ЕСТЬ», И
.\" ЛЮБЫЕ ПРЯМЫЕ ИЛИ КОСВЕННЫЕ ГАРАНТИИ, ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ,
.\" ГАРАНТИЯМИ ТОВАРНОЙ ПРИГОДНОСТИ И СООТВЕТСТВИЯ КОНКРЕТНОЙ ЦЕЛИ,
.\" ОТКАЗЫВАЮТСЯ. В НИКАКОМ СЛУЧАЕ РЕГЕНТЫ ИЛИ УЧАСТНИКИ НЕ НЕСУТ ОТВЕТСТВЕННОСТИ
.\" ЗА ЛЮБЫЕ ПРЯМЫЕ, КОСВЕННЫЕ, СЛУЧАЙНЫЕ, СПЕЦИАЛЬНЫЕ, ПОКАЗАТЕЛЬНЫЕ ИЛИ ПОСЛЕДУЮЩИЕ
.\" УЩЕРБЫ (ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ, ПРИОБРЕТЕНИЕМ ЗАМЕЩАЮЩИХ ТОВАРОВ
.\" ИЛИ УСЛУГ; УТРАТОЙ ПРАВА ПОЛЬЗОВАНИЯ, ДАННЫХ ИЛИ ПРИБЫЛИ; ЛИБО ПРЕРЫВАНИЕМ ДЕЯТЕЛЬНОСТИ)
.\" НЕЗАВИСИМО ОТ ТОГО, НА КАКОЙ ТЕОРИИ ОТВЕТСТВЕННОСТИ, ДОГОВОРНОЙ, СТРОГОЙ
.\" ОТВЕТСТВЕННОСТИ ИЛИ ДЕЛИКТНОЙ (ВКЛЮЧАЯ НЕБРЕЖНОСТЬ ИЛИ ИНОЕ)
.\" ОСНОВЫВАЕТСЯ ЛИСПОЛЬЗОВАНИЕ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ, ДАЖЕ ЕСЛИ БЫЛО СООБЩЕНО О
.\" ВОЗМОЖНОСТИ ТАКОГО УЩЕРБА.
.\"/
.Dd 26 Февраля 2022
.Dt DTC 1
.Os
.Sh НАЗВАНИЕ
.Nm dtc
.Nd компилятор дерева устройств
.Sh СИНТАКСИС
.Nm
.Op Fl @fhsv
.Op Fl b Ar boot_cpu_id
.Op Fl d Ar dependency_file
.Op Fl i Ar include_path
.Op Fl E Ar [no-]checker_name
.Op Fl H Ar phandle_format
.Op Fl I Ar input_format
.Op Fl O Ar output_format
.Op Fl o Ar output_file
.Op Fl R Ar entries
.Op Fl S Ar bytes
.Op Fl p Ar bytes
.Op Fl V Ar blob_version
.Op Fl W Ar [no-]checker_name
.Op Fl P Ar predefined_properties
.Ar input_file
.Sh ОПИСАНИЕ
Утилита
.Nm
конвертирует представления плоского дерева устройств (FDT).
Чаще всего используется для создания бинарных файлов дерева устройств (DTB),
представляющих FDT, из исходников дерева устройств (DTS), ASCII-текстового представления.
.Pp
Бинарный файл можно записать в двух форматах: бинарном и ассемблерном.
Бинарный файл идентичен представлению в памяти и может использоваться
напрямую прошивкой, загрузчиками и т.д.
Ассемблерный формат, описанный в
.Sx "ФОРМАТ ASM" ,
даст тот же бинарный формат при компиляции, но также включает несколько глобальных
переменных, относящихся к частям таблицы.
Этот формат чаще всего используется для создания ядра,
специфичного для устройства, с заранее скомпилированным деревом устройств.
.Pp
параметры:
.Bl -tag -width indent
.It Fl d Ar dependency_file
Записывает файл зависимостей, понятный make, в указанный файл.
Этот файл может быть включен в Makefile и обеспечит зависимость выходного файла
от входного файла и всех включенных в него файлов.
Этот аргумент полезен только при использовании DTS, так как только исходный формат
имеет понятие включений.
.It Fl i Ar include_path
Добавляет путь для поиска включаемых файлов.
.It Fl E Ar [no-]checker_name
Включает или отключает указанный проверщик.
Аргумент - это имя проверщика.
Полный список проверяющих приведен в разделе
.Sx ПРОВЕРКА .
.It Fl @
Добавляет узел __symbols__, чтобы позволить загрузку плагинов.
.It Fl f
Принуждает инструмент попытаться создать выходной файл, даже если в входном файле были ошибки.
.It Fl h
Выводит справочный текст и завершает выполнение.
.It Fl H Ar phandle_format
Указывает тип узлов phandle, которые необходимо создать в выходном файле.
Допустимые значения:
.Pp
.Bl -tag -width indent -compact
.It Ar linux
Создает узлы linux,phandle, которые ожидались в старых системах.
.It Ar epapr
Создает узлы phandle, как описано в спецификации ePAPR.
Это наиболее разумный вариант для деревьев устройств, используемых с
.Fx .
.It Ar both
Создает оба вида узлов для максимальной совместимости.
.El
.It Fl I Ar input_format
Указывает входной формат.
Допустимые значения:
.Pp
.Bl -tag -width indent -compact
.It Ar dtb
Бинарное дерево устройств.
Бинарное представление FDT.
.It Ar dts
Исходный код дерева устройств.
ASCII-представление FDT.
Это значение по умолчанию, если входной формат не указан явно.
.El
.It Fl O Ar output_format
Указывает выходной формат.
Допустимые значения:
.Pp
.Bl -tag -width indent -compact
.It Ar asm
Исходный код ассемблера для создания бинарного дерева устройств, как описано в
.Sx "ФОРМАТ ASM" .
.It Ar dtb
Бинарное дерево устройств.
Бинарное представление FDT.
Это значение по умолчанию, если выходной формат не указан явно.
.It Ar dts
Исходный код дерева устройств.
ASCII-представление FDT.
.El
.It Fl o Ar output_file
Файл, в который будет записан выходной файл.
.It Fl P Ar predefined_macro
Задает макрос в форме
.Ar name=value
или
.Ar name ,
который будет использоваться в исходных файлах дерева устройств, содержащих условные компоненты.
Этот инструмент поддерживает два расширения для условной компиляции деревьев устройств.
Первое - это директива
.Ar /include/if [property]/ "file.dts" ,
которая разрешена в начале файла и включит указанный файл только при условии, что свойство передано с этим флагом.
Второе - формат
.Ar $NAME
для значений свойств.
Они позволяют задавать значения свойств через командную строку.
.It Fl R Ar entries
Количество пустых записей в таблице резервирования для добавления в таблицу.
Это полезно, если вы создаете бинарный файл дерева устройств для загрузчика или другого приложения, которому нужно зарезервировать память перед передачей управления операционной системе.
.It Fl S Ar bytes
Минимальный размер бинарного файла в байтах.
Бинарный файл будет дополнен после таблицы строк, чтобы обеспечить правильный размер.
Это полезно в средах, где бинарный файл дерева устройств должен модифицироваться на месте.
.It Fl p Ar bytes
Количество байтов заполнения для добавления в бинарный файл.
Бинарный файл будет дополнен после таблицы строк, чтобы обеспечить правильный размер.
Это полезно в средах, где бинарный файл дерева устройств должен модифицироваться на месте.
.It Fl W Ar [no-]checker_name
Включает или отключает указанный проверяющий.
Аналогично параметры
.Fl E .
.It Fl s
Сортирует свойства и узлы в дереве.
Это полезно при сравнении двух исходных кодов дерева устройств с помощью таких инструментов, как
.Xr diff 1.
.It Fl V Ar blob_version
Версия формата выходного файла.
Это относится только к бинарным выходным данным, и в настоящее время поддерживается только версия 17.
.It Fl v
Выводит версию инструмента и завершает выполнение.
.It Ar input_file
Исходный файл.
.El
.Sh "ФОРМАТ ASM"
Формат ассемблера определяет несколько глобальных переменных, на которые могут ссылаться другие компиляционные блоки, в дополнение к любым меткам, указанным в исходном коде.
Они включают:
.Pp
.Bl -tag -width "dt_strings_start" -compact -offset indent
.It dt_blob_start
Начало бинарного дерева устройств.
.It dt_header
Начало заголовка, обычно идентичное началу бинарного файла.
.It dt_reserve_map
Начало карты резервирования.
.It dt_struct_start
Начало таблицы структуры.
.It dt_struct_end
Конец таблицы структуры.
.It dt_strings_start
Начало таблицы строк.
.It dt_strings_end
Конец таблицы строк.
.It dt_blob_end
Конец бинарного дерева устройств.
.El
.Sh ПРОВЕРКА
Инструмент предоставляет ряд семантических проверок правильности дерева.
Их можно отключить с помощью флага
.Fl W .
Например,
.Fl W Ar no-type-phandle
отключит проверку типа phandle.
Поддерживаемые проверки включают:
.Pp
.Bl -tag -width "no-type-phandle" -compact -offset indent
.It type-compatible
Проверяет тип свойства
.Va compatible .
.It type-model
Проверяет тип свойства
.Va model .
.It type-compatible
Проверяет тип свойства
.Va compatible .
.It cells-attributes
Проверяет, что все узлы с дочерними узлами имеют оба свойства
.Va #address-cells
и
.Va #size-cells .
.It deleted-nodes
Проверяет, что все операторы
.Va /delete-node/
ссылаются на узлы, которые объединены.
.El
.Sh НАЛОЖЕНИЯ
Инструмент поддерживает создание наложений, также известных как плагины.
Наложения - это метод патчинга базового дерева устройств, скомпилированного с флагом
.Fl @ ,
с некоторой ограниченной поддержкой патчинга деревьев устройств, которые не были скомпилированы с флагом
.Fl @ .
.Pp
Чтобы указать, что DTS предназначен для использования в качестве наложения,
.Va /plugin/\&;
должно быть включено в заголовок после любых применимых тегов
.Va /dts-v1/\&; .
.Pp
Традиционные наложения создаются путем создания
.Va fragment
узлов в корне.
Каждый фрагментный узел должен иметь либо свойство
.Va target ,
установленное в ссылку на метку, либо строковое свойство
.Va target-path ,
установленное на путь.
Далее он должен иметь дочерний узел
.Va __overlay__ ,
свойства и дочерние узлы которого объединяются с базовым деревом устройств при применении наложения.
.Pp
Позже было придумано более простое синтаксическое сокращение для упрощения создания наложений.
Вместо того чтобы вручную создавать целевые фрагменты, можно создать корневой узел, нацеленный на метку в базовом FDT, используя синтаксис
.Va &label,
поддерживаемый в обычном DTS.
Это укажет, что для узла должен быть создан фрагмент с данной
.Va label
в качестве цели, и свойства и дочерние узлы будут использоваться как __overlay__.
.Pp
Кроме того, поддерживается версия этого синтаксического сокращения на основе пути.
Корневой узел может быть нацелен на путь в базовом FDT, используя имя вида
.Va &{/path} .
Для узла будет создан фрагмент так же, как в случае
.Va &label ,
кроме того, что свойство
.Va target-path
будет установлено на
.Va /path ,
и свойство
.Va target
не будет установлено.
.Pp
Поддерживаются как традиционные наложения, так и позже добавленное синтаксическое сокращение.
.Pp
Бинарные файлы наложений могут быть применены при загрузке, установив
.Va fdt_overlays
в
.Xr loader.conf 5 .
Можно указать несколько наложений, и они будут применены в заданном порядке.
.Sh ИСКЛЮЧЕНИЕ УЗЛОВ
Этот инструмент поддерживает оператор
.Va /omit-if-no-ref/
для пометки узлов, которые следует опустить, если они в конечном итоге не будут ссылаться из других частей дерева устройств.
Это можно использовать в средах с ограниченным пространством для удаления узлов, которые могут не подходить конкретному устройству, для которого компилируется дерево.
.Pp
Когда флаг
.Fl @
используется для записи символов, узлы с метками будут считаться ссылочными и не будут удалены из дерева.
.Sh ПРИМЕРЫ
Команда:
.Pp
.Dl "dtc -o blob.S -O asm device.dts"
.Pp
сгенерирует файл
.Pa blob.S
из исходного кода дерева устройств
.Pa device.dts
и выведет ошибки, если они возникнут при разборе или проверке свойств.
Результирующий файл может быть скомпилирован и связан в бинарный.
.Pp
Команда:
.Pp
.Dl "dtc -o - -O dts -I dtb device.dtb"
.Pp
выведет исходный код дерева устройств для бинарного файла
.Pa device.dtb
в стандартный вывод.
Это полезно при отладке деревьев устройств.
.Pp
Команда:
.Pp
.Dl "dtc -@ -O dtb -I dts -o device.dtb device.dts"
.Pp
сгенерирует файл
.Pa device.dtb
из исходного кода дерева устройств
.Pa device.dts
с включенным узлом __symbols__, чтобы можно было применить наложения.
.Pp
Команда:
.Pp
.Dl "dtc -@ -O dtb -I dts -o device_overlay.dtbo device_overlay.dts"
.Pp
сгенерирует файл
.Pa device_overlay.dtbo ,
используя стандартное расширение для наложения дерева устройств, из исходного кода дерева устройств
.Pa device_overlay.dts .
Включен узел __symbols__, чтобы можно было применить наложения.
Наличие директивы
.Va /plugin/\&;
в
.Pa device_overlay.dts
укажет инструменту также сгенерировать базовую метаинформацию, необходимую в наложениях.
.Sh СОВМЕСТИМОСТЬ
Этот инструмент предназначен для совместимости с компилятором деревьев устройств, предоставляемым elinux.org.
В настоящее время он реализует подмножество функций, необходимых для сборки
.Fx
и других функций, запрошенных разработчиками
.Fx .
.Pp
Формат ввода
.Ar fs
не поддерживается.
Он создает дерево из Linux
.Pa /proc/device-tree ,
иерархии файловой системы, отсутствующей в
.Fx ,
которая вместо этого предоставляет DTB напрямую через sysctl.
.Pp
Предупреждения и ошибки, поддерживаемые инструментом elinux.org, не задокументированы.
Этот инструмент поддерживает предупреждения, описанные в разделе
.Sx ПРОВЕРКА.
.Sh СМ. ТАКЖЕ
.Xr fdt 4
.Sh СТАНДАРТЫ
Форматы дерева устройств, поддерживаемые этим инструментом, соответствуют стандарту Power.org
.Pq Vt ePAPR ,
кроме случаев, указанных в разделе
.Sx ОШИБКИ ,
и следующих исключений для совместимости с инструментом elinux.org:
.Pp
.Bl -bullet -compact
.It
Цель перекрестных ссылок в спецификации определяется как имя узла, но фактически является меткой.
.El
.Pp
Директива /include/ не является частью стандарта, однако она реализована с семантикой, совместимой с инструментом elinux.org.
Она должна появляться в верхнем уровне файла и импортировать новое определение корня.
Если файл, включая все его включения, содержит несколько корней, они объединяются.
Все узлы, присутствующие во втором файле, но не в первом, импортируются.
Любые узлы, присутствующие в обоих файлах, рекурсивно объединяются, причем свойства из второго файла заменяют свойства из первого, а дочерние узлы рекурсивно объединяются.
.Sh ИСТОРИЯ
Инструмент dtc впервые появился в
.Fx 9.0 .
Эта версия инструмента впервые появилась в
.Fx 10.0 .
.Sh АВТОРЫ
.Nm
написан
.An Дэвидом Т. Чиснеллом .
Некоторые функции были добавлены позже
.An Кайлом Эвансом .
.Pp
Примечание: Тот факт, что инструмент и автор имеют одни и те же инициалы, является чистым совпадением.
.Sh ОШИБКИ
Компилятор дерева устройств пока не поддерживает следующие функции:
.Pp
.Bl -bullet -compact
.It
Метки в середине значений свойств.
Это полезно только в ассемблерном выводе и не имеет большого значения там, поэтому вряд ли будет добавлено в ближайшее время.
.It
Полные пути, а не метки, в качестве целей для phandles.
Это несложно добавить, но, вероятно, не будет добавлено, пока в этом не появится реальная потребность.
.El
.Pp
Текущая версия выполняет очень ограниченный набор семантических проверок дерева.
Это будет улучшено в будущих версиях.
