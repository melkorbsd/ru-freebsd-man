.\"
.\" Copyright (c) 2004-2009, Jilles Tjoelker
.\" All rights reserved.
.\"
.\" Распространение и использование в исходном коде и двоичной форме, с 
.\" использованием или без использования модификаций, если 
.\" следующие условия соблюдаются:
.\"
.\" 1. При распространении исходного кода должно сохраняться вышеуказанное уведомление
.\"    об авторских правах, этот список условий 
.\"    и следующий дисклеймер.
.\" 2. При распространиении в двоичной форме должно воспроизводиться 
.\"    уведомление об авторских правах, этот список условий и 
.\"    следующий ниже отказ от ответственности вдокументации 
.\"     и/или других материалах, поставляемых с дистрибутивом.
.\"
.\" ЭТО ПРОГРАММНОЕ ОБЕСПЕЧЕНИЕ ПРЕДОСТАВЛЯЕТСЯ ПРАВООБЛАДАТЕЛЯМИ И
.\" СОАВТОРАМИ "КАК ЕСТЬ" И ЛЮБЫЕ ЯВНЫЕ ИЛИ ПОДРАЗУМЕВАЕМЫЕ
.\" ГАРАНТИИ, ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ, ПОДРАЗУМЕВАЕМЫМИ
.\" ГАРАНТИЯМИ ТОВАРНОЙ ПРИГОДНОСТИ И ПРИГОДНОСТИ ДЛЯ
.\" КОНКРЕТНОЙ ЦЕЛИ ОТКЛОНЯЮТСЯ. НИ ПРИ КАКИХ ОБСТОЯТЕЛЬСТВАХ
.\" ПРАВООБЛАДАТЕЛЬ ИЛИ СОАВТОРЫ НЕ НЕСУТ ОТВЕТСТВЕННОСТИ ЗА
.\" ЛЮБЫЕ ПРЯМЫЕ, КОСВЕННЫЕ, СЛУЧАЙНЫЕ, ОСОБЫЕ, ПОКАЗАТЕЛЬНЫЕ ИЛИ
.\" ПОСЛЕДОВАТЕЛЬНЫЕ УБЫТКИ (ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ,
.\" ПРИОБРЕТЕНИЕМ ЗАМЕНЯЮЩИХ ТОВАРОВ ИЛИ УСЛУГ; ПОТЕРЕЙ
.\" ИСПОЛЬЗОВАНИЯ, ДАННЫХ ИЛИ ПРИБЫЛИ; ИЛИ ПРЕРЫВАНИЕМ
.\" БИЗНЕСА) ОДНАКО ПРИЧИНЕННЫЕ И НА ОСНОВАНИИ ЛЮБОЙ ТЕОРИИ
.\" ОТВЕТСТВЕННОСТИ, БУДЬ ТО В ДОГОВОРЕ, СТРОГОЙ
.\" ОТВЕТСТВЕННОСТИ ИЛИ ДЕЛИКТЕ (ВКЛЮЧАЯ НЕБРЕЖНОСТЬ ИЛИ
.\" ИНАЧЕ) ВОЗНИКШИЕ В ЛЮБОМ СЛУЧАЕ ИЗ-ЗА
.\" ИСПОЛЬЗОВАНИЯ ЭТОГО ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ, ДАЖЕ ЕСЛИ УВЕДОМЛЕНЫ О ВОЗМОЖНОСТИ
.\" ТАКОГО УЩЕРБА.
.\"
.Dd 21 января, 2021 год
.Dt PWAIT 1
.Os
.Sh НАЗВАНИЕ
.Nm pwait
.Nd wait for processes to terminate
.Sh СИНТАКСИС
.Nm
.Op Fl t Ar срок_действия
.Op Fl ov
.Ar идентификатор_процесса
\&...
.Sh ОПИСАНИЕ
Утилита
.Nm
будет ждать, пока не завершится каждый из заданных процессов.
.Pp
Доступны следующие опция:
.Bl -tag -width indent
.It Fl o
Завершает работу, когда завершится любой из заданных процессов.
.It Fl t Ar срок_действия
Если какой-либо процесс все еще выполняется после
.Ar срок_действия ,
.Nm
завершит работу.
Значением
.Ar срок_действия
могут быть целые или десятичные числа.
Значения без символов единиц измерения интерпретируются как секунды.
.Pp
Поддерживаемые символы единиц измерения:
.Bl -tag -width indent -compact
.It s
секунды
.It m
минуты
.It h
часы
.El
.It Fl v
Выводит статус завершения при завершении каждого процесса или
.Ql timeout
если таймер сработает раньше.
.El
.Sh СТАТУС ЗАВЕРШЕНИЯ
Утилита
.Nm
 завершает работу с 0 в случае успеха и >0 в случае возникновения ошибки.
.Pp
Если флаг
.Fl t
указан и истек тайм-аут, статус выхода будет равен 124.
.Pp
Недопустимые ID пользователя выдают предупреждающее сообщение, но в остальном игнорируются.
.Sh ПРИМЕРЫ
Запустить два
.Xr sleep 1
в фоновом режиме.
Первый будет в режиме сна на 30 секунд, а второй - на один час.
Подождите, пока кто-либо из них закончит, но не более 5 секунд.
Поскольку наступает таймаут, статус выхода равен 124:
.Bd -literal -offset indent
$ sleep 30 & sleep 3600 &
[1] 1646
[2] 1647
$ pwait -o -t5 1646 1647
$?
124
.Ed
.Pp
То же, что и выше, но пытается получить статус завершения процессов.
В этом случае
.Ql timeout
отображается, и статус выхода равен 124:
.Bd -literal -offset indent
$ sleep 30 & sleep 3600 &
[1] 1652
[2] 1653
$ pwait -v -t 5 1652 1653
таймаут
$?
124
.Ed
.Pp
Запустить дова процесса
.Xr sleep 1
в фоновом режиме, переходящих в спящий режим в спящий режим на 30 и 40 секунд соответственно.
Подождите 60 секунд, пока кто-либо из них завершится, и получите их коды выхода:
.Bd -literal -offset indent
$ sleep 30 & sleep 40 &
[1] 1674
[2] 1675
$ pwait -v -t 60 1674 1675
1674: exited with status 0.
1675: exited with status 0.
[1]-  Done                    sleep 30
[2]+  Done                    sleep 40
$ echo $?
0
.Ed
.Sh СМОТРИТЕ ТАКЖЕ
.Xr kill 1 ,
.Xr pkill 1 ,
.Xr ps 1 ,
.Xr wait 1 ,
.Xr kqueue 2
.Sh ПРИМЕЧАНИЯ
.Nm
не является заменой для
.Xr wait 1
встроенного,
поскольку он не очистит никаких зомби или состояний в родительском процессе.
.Pp
Чтобы избежать тупиков,
.Nm
будет игнорировать свой собственный ID процесса, если он указан в качестве ID процесса для ожидания.
.Sh ИСТОРИЯ
Команда
.Nm
впервые появилась в SunOS 5.8.
