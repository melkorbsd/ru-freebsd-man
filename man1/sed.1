.\" Copyright (c) 1992, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" the Institute of Electrical and Electronics Engineers, Inc.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)sed.1	8.2 (Berkeley) 12/30/93
.\"
.Dd 8 апреля 2021
.Dt SED 1
.Os
.Sh НАЗВАНИЕ
.Nm sed
.Nd редактор потоков
.Sh СИНТАКСИС
.Nm
.Op Fl Ealnru
.Ar команда
.Op Fl I Ar расширение
.Op Fl i Ar расширение
.Op Ar
.Nm
.Op Fl Ealnru
.Op Fl e Ar команда
.Op Fl f Ar файл_команд
.Op Fl I Ar расширение
.Op Fl i Ar расширение
.Op Ar
.Sh ОПИСАНИЕ
Утилита
.Nm
читает указанные файлы или стандартный ввод,
если файлы не указаны, модифицируя ввод в
соответствии с указанным списком команд.
Модифицированный ввод затем записывается в
стандартный вывод.
.Pp
Одна команда может быть указана в качестве
первого аргумента
.Nm .
Несколько команд могут быть указаны
с использованием параметров
.Fl e
или
.Fl f .
Все команды применяются к входным данным в порядке
их указания, независимо от их происхождения.
.Pp
Доступны следующие параметры:
.Bl -tag -width indent
.It Fl E
Интерпретировать регулярные выражения как расширенные
(современные) регулярные выражения вместо базовых
регулярных выражений (BRE).
Страница руководства
.Xr re_format 7
подробно описывает оба формата.
.It Fl a
По умолчанию, файлы, указанные как параметры для функций
.Dq w
создаются (или обрезаются) перед началом обработки. Параметр
.Fl a
заставляет
.Nm
отложить открытие каждого файла до тех пор, пока команда,
содержащая связанную
.Dq w
функцию, не будет применена к строке ввода.
.It Fl e Ar команда
Добавляет указанные команды редактирования
.Ar команда
к списку команд.
.It Fl f Ar файл_команд
Добавляет команды редактирования из файла
.Ar файл_команд
в список команд.
Команды редактирования должны быть указаны каждая
на отдельной строке. Команды считываются со
стандартного ввода, если
.Ar файл_команд
равен
.Dq Li - .
.It Fl I Ar расширение
Редактировать файлы на месте, сохраняя
резервные копии с указанным
.Ar расширение .
Если указано расширение нулевой длины,
резервная копия не сохраняется.
Не рекомендуется указывать расширение нулевой
длины при редактировании файлов на месте,
так как это увеличивает риск повреждения данных
или частичной потери содержимого в случаях,
когда заканчивается место на диске и т.д.
.Pp
Обратите внимание, что редактирование на месте с
.Fl I
по-прежнему происходит в рамках единого адресного
пространства, охватывающего все файлы, хотя каждый
файл сохраняет свою индивидуальность вместо формирования
одного выходного потока. Счётчик строк никогда не
сбрасывается между файлами, диапазоны адресов могут
охватывать границы файлов, и адрес
.Dq $
соответствует только последней строке последнего файла.
(См. раздел
.Sx "Адреса Sed" .)
Это может привести к неожиданным результатам
при многих случаях редактирования на месте,
где предпочтительно использование
.Fl i .
.It Fl i Ar расширение
Редактировать файлы на месте, аналогично
.Fl I ,
но каждая обработка файлов осуществляется
независимо от других файлов. В частности,
номера строк в каждом файле начинаются с 1,
адрес
.Dq $
соответствует последней строке текущего файла,
и диапазоны адресов ограничены текущим файлом.
(См. раздел
.Sx "Адреса Sed" .)
Результат аналогичен тому, как если бы каждый
файл редактировался отдельным экземпляром
.Nm .
.It Fl l
Буферизация строк вывода.
.It Fl n
По умолчанию, каждая строка ввода выводится на
стандартный вывод после того, как к ней были
применены все команды. Параметр
.Fl n
отключает это поведение.
.It Fl r
То же, что и
.Fl E
для совместимости с GNU sed.
.It Fl u
Вывод без буферизации.
.El
.Pp
Формат команды
.Nm
следующий:
.Pp
.Dl [адрес[,адрес]]функция[аргументы]
.Pp
Пробелы могут быть вставлены перед первым
адресом и перед функцией в команде.
.Pp
Обычно,
.Nm
циклически копирует строку ввода, не включая
завершающий символ новой строки, в
.Em "пространство шаблонов" ,
(если не осталось ничего после выполнения функции
.Dq D ),
применяет все команды с адресами, которые выбирают
это пространство шаблонов, копирует пространство
шаблонов в стандартный вывод, добавляя новую строку,
и удаляет пространство шаблонов.
.Pp
Некоторые функции используют
.Em "удерживающее пространство"
для сохранения всего или части пространства
шаблонов для последующего извлечения.
.Sh "Адреса Sed"
Адреса не обязательны, но если указаны,
они должны иметь один из следующих форматов:
.Bl -bullet -offset indent
.It
число, которое считает
строки ввода
накопительно по всем файлам ввода
(или по каждому файлу отдельно,
если используется параметр
.Fl i );
.It
символ доллара
.Pq Dq $ ,
который адресует последнюю строку ввода
(или последнюю строку текущего файла,
если была указан параметр
.Fl i );
.It
контекстный адрес,
состоящий из регулярного выражения,
окружённого разделителем.
Закрывающий разделитель может быть
необязательно дополнен символом
.Dq I ,
чтобы указать, что регулярное выражение
должно быть сопоставлено без учёта регистра.
.El
.Pp
Строка команды без адресов выбирает каждое
пространство шаблонов.
.Pp
Команда с одним адресом выбирает все пространства
шаблонов, которые соответствуют этому адресу.
.Pp
Команда с двумя адресами выбирает включающий диапазон.
Этот диапазон начинается с первого пространства
шаблонов, которое соответствует первому адресу.
Конец диапазона — это следующее идущее пространство
шаблонов, которое соответствует второму адресу.
Если второй адрес является числом, меньшим или равным
номеру первой выбранной строки, будет выбрана только
эта строка. 
Перед номером во втором адресе может стоять символ
.Pq Dq \&+
для указания количества строк, которые нужно
сопоставить после первого шаблона.
В случае, когда второй адрес является контекстным,
.Nm
не выполняет повторное сопоставление второго адреса
с пространством шаблона, которое соответствовало
первому адресу.
Начиная с первой строки после выбранного диапазона,
.Nm
снова начинает поиск первого адреса.
.Pp
Команды редактирования могут быть применены к
невыбранным пространствам шаблонов с помощью символа
.Pq Dq \&!
функции.
.Sh "Регулярные выражения Sed"
Регулярные выражения, используемые в
.Nm ,
по умолчанию являются базовыми регулярными
выражениями (BRE). Дополнительную информацию
можно найти на странице руководства
.Xr re_format 7 ,
однако могут использоваться расширенные (современные)
регулярные выражения, если указан параметр
.Fl E .
Кроме того,
.Nm
имеет два следующих дополнения к регулярным выражениям:
.Pp
.Bl -enum -compact
.It
В контекстном адресе любой символ, кроме обратного слэша
.Pq Dq \e
или символа новой строки, может использоваться для
разделения регулярного выражения. Открывающий разделитель
должен быть предшествован обратным слэшем, если он не
является слэшем. Например, контекстный адрес
.Li \exabcx
эквивалентен
.Li /abc/ .
Кроме того, если поставить символ обратного слэша перед
разделяющим символом внутри регулярного выражения, этот
символ будет трактоваться буквально.
Например, в контекстном адресе
.Li \exabc\exdefx ,
разделителем является символ
.Dq x ,
и второй символ
.Dq x
означает себя, так что регулярное выражение будет
.Dq abcxdef .
.Pp
.It
Последовательность \en соответствует символу новой строки,
встроенному в пространство шаблонов. Однако вы не можете
использовать символ новой строки буквально в адресе или
в команде замены.
.El
.Pp
Одной из особенностей регулярных выражений в
.Nm
является возможность по умолчанию использовать последнее
регулярное выражение. Если регулярное выражение пустое,
то есть указаны только символы-разделители, используется
последнее регулярное выражение, которое было встречено.
Последнее регулярное выражение определяется как последнее
регулярное выражение, использованное в качестве части адреса
или команды замены, и это происходит во время выполнения,
а не компиляции. Например, команда
.Dq /abc/s//XXX/
заменит
.Dq XXX
на шаблон
.Dq abc .
.Sh "Функции Sed"
В следующем списке команд указано максимальное количество
допустимых адресов для каждой команды: [0addr], [1addr] или
[2addr], что соответствует нулю, одному или двум адресам.
.Pp
Аргумент
.Em текст
состоит из одной или нескольких строк.
Чтобы вставить новую строку в текст, используйте символ
обратного слэша перед ней. Другие символы обратного слэша
в тексте удаляются, а следующий символ воспринимается буквально.
.Pp
Функции
.Dq r
и
.Dq w
принимают необязательный параметр файла, который должен
быть отделен от буквы функции пробелом.
Каждый файл, переданный в качестве аргумента для
.Nm ,
создаётся (или его содержимое обрезается) перед началом
обработки ввода.
.Pp
Функции
.Dq b ,
.Dq r ,
.Dq s ,
.Dq t ,
.Dq w ,
.Dq y ,
.Dq \&!
и
.Dq \&:
принимают дополнительные аргументы.
Следующие описания указывают, какие аргументы должны быть
отделены от букв функций пробелами.
.Pp
Две функции принимают список функций. Это список функций
.Nm ,
разделённых символами новой строки, следующим образом:
.Bd -literal -offset indent
{ функция
  функция
  ...
  функция
}
.Ed
.Pp
Символ
.Dq {
может предшествовать пробел, и он может быть дополнен
пробелами. Функция может начинаться с пробелов.
Завершающий символ
.Dq }
должен быть предшествован новой строкой, и ему также
могут предшествовать пробелы.
.Pp
.Bl -tag -width "XXXXXX" -compact
.It [2addr] список-функций
Выполнить список функций только тогда,
когда пространство шаблонов выбрано.
.Pp
.It [1addr]a\e
.It текст
Выводит
.Em текст
в стандартный вывод непосредственно перед каждой
попыткой прочитать строку ввода, будь то выполнение функции
.Dq N
или начало нового цикла.
.Pp
.It [2addr]b[label]
Переход к функции
.Dq \&:
с указанной меткой.
Если метка не указана, происходит переход к концу сценария.
.Pp
.It [2addr]c\e
.It текст
Удалить пространство шаблонов.
При наличии 0 или 1 адреса или в конце диапазона
из двух адресов,
.Em текст
выводится в стандартный вывод.
.Pp
.It [2addr]d
Удалить пространство шаблонов и начать следующий цикл.
.Pp
.It [2addr]D
Удалить начальный сегмент пространства шаблонов до первого
символа новой строки и начать следующий цикл.
.Pp
.It [2addr]g
Заменить содержимое пространства шаблонов содержимым
удерживающего пространства.
.Pp
.It [2addr]G
Добавить символ новой строки, за которым следует содержимое
удерживающего пространства, к пространству шаблонов.
.Pp
.It [2addr]h
Заменить содержимое удерживающего пространства содержимым
пространства шаблонов.
.Pp
.It [2addr]H
Добавить символ новой строки, за которым следует содержимое
пространства шаблонов, в удерживающее пространство.
.Pp
.It [1addr]i\e
.It текст
Выводит
.Em текст
в стандартный вывод.
.Pp
.It [2addr]l
(Буква L.)
Выводит пространство шаблонов в стандартный вывод в визуально
однозначной форме. Эта форма следующая:
.Pp
.Bl -tag -width "carriage-returnXX" -offset indent -compact
.It обратный слэш
\e\e
.It сигнал тревоги
\ea
.It подача формы
\ef
.It возврат каретки
\er
.It табуляция
\et
.It вертикальная табуляция
\ev
.El
.Pp
Непечатаемые символы выводятся в виде трёхзначных
восьмеричных чисел (с предшествующим обратным слэшем)
для каждого байта в символе (от старшего байта к младшему).
Длинные строки переносятся, и место переноса обозначается
символом обратного слэша, за которым следует новая строка.
Конец каждой строки отмечен символом
.Dq $ .
.Pp
.It [2addr]n
Записывает пространство шаблонов в стандартный вывод,
если вывод по умолчанию не был подавлен, и заменяет
пространство шаблонов следующей строкой ввода.
.Pp
.It [2addr]N
Добавляет следующую строку ввода к пространству шаблонов,
используя встроенный символ новой строки для разделения
добавленных данных и исходного содержимого.
Обратите внимание, что номер текущей строки изменяется.
.Pp
.It [2addr]p
Выводит пространство шаблонов в стандартный вывод.
.Pp
.It [2addr]P
Выводит пространство шаблонов до первого символа новой
строки в стандартный вывод.
.Pp
.It [1addr]q
Переход к концу сценария и завершение работы без начала
нового цикла.
.Pp
.It [1addr]r файл
Копирует содержимое
.Em файла
в стандартный вывод непосредственно перед следующей
попыткой прочитать строку ввода.
Если
.Em файл
не может быть прочитан по какой-либо причине,
он игнорируется без вывода ошибки.
.Pp
.It [2addr]s/регулярное_выражение/замена/флаги
Заменяет строку замены на первое совпадение регулярного
выражения в пространстве шаблонов. Любой символ, кроме
обратного слэша или новой строки, может быть использован
вместо слэша для разделения регулярного выражения (RE) и
строки замены. Внутри регулярного выражения и строки
замены сам разделитель может быть использован как символ,
если перед ним стоит обратный слэш.
.Pp
Амперсанд
.Pq &
в строке замены заменяется на строку, соответствующую
регулярному выражению. Особое значение
& 
может быть отменено, если перед ним поставить
обратный слэш. Строка
\e# ,
где
#
– это цифра, заменяется текстом, совпавшим
с соответствующей группой захвата (см.
.Xr re_format 7 ) .
.Pp
Строка может быть разделена с помощью замены на
символ новой строки. Чтобы указать символ новой
строки в строке замены, перед ним нужно поставить
обратный слэш.
.Pp
Значение флагов в функции замены может быть
нулевым или одним из следующих:
.Bl -tag -width "XXXXXX" -offset indent
.It Ar N
Выполнить замену только для
.Ar N -го
совпадения регулярного выражения в пространстве шаблонов.
.It g
Выполнить замену для всех неперекрывающихся совпадений
регулярного выражения, а не только для первого.
.It p
Вывести пространство шаблонов на стандартный вывод,
если была выполнена замена. Даже если строка замены
идентична заменяемой строке, это всё равно считается
заменой.
.It w Em файл
Добавить пространство шаблонов в
.Em файл ,
если была выполнена замена.
Даже если строка замены идентична заменяемой строке,
это всё равно считается заменой.
.It i или I
Совпадение регулярного выражения без учёта регистра.
.El
.Pp
.It [2addr]t [метка]
Переход к функции
\&:
с указанной меткой, если были выполнены замены с момента
последнего чтения строки ввода или выполнения функции
t .
Если метка не указана, выполняется переход к концу сценария.
.Pp
.It [2addr]w Em файл
Добавляет пространство шаблонов в
.Em файл .
.Pp
.It [2addr]x
Меняет содержимое пространства шаблонов и
удерживающего пространства местами.
.Pp
.It [2addr]y/строка1/строка2/
Заменяет все символы из
.Em строки1
в пространстве шаблонов на соответствующие символы из
.Em строки2 .
Любой символ, кроме обратного слэша или новой строки,
может быть использован вместо слэша для разделения строк.
Внутри
.Em строки1
и
.Em строки2 ,
символ обратного слэша, за которым следует любой символ,
кроме новой строки, будет воспринят как этот буквальный
символ, а обратный слэш, за которым следует «n»,
заменяется на символ новой строки.
.Pp
.It [2addr]!функция
.It [2addr]!список-функций
Применяет функцию или список функций только к строкам,
которые не выбраны по указанным адресам.
.Pp
.It [0addr]:метка
Эта функция ничего не делает; она несёт метку,
на которую могут ссылаться команды
b
и
t .
.Pp
.It [1addr]=
Выводит номер строки на стандартный вывод,
за которым следует символ новой строки.
.Pp
.It [0addr]
Пустые строки игнорируются.
.Pp
.It [0addr]#
Символ
#
и оставшаяся часть строки игнорируются (воспринимаются
как комментарий), за исключением случая, когда первыми
двумя символами в файле являются
#n .
В этом случае вывод по умолчанию подавляется.
Это эквивалентно указанию параметра
.Fl n
на командной строке.
.El
.Sh ОКРУЖЕНИЕ
Переменные среды
.Ev COLUMNS , LANG , LC_ALL , LC_CTYPE
и
.Ev LC_COLLATE
влияют на выполнение
.Nm ,
как описано на странице руководства
.Xr environ 7 .
.Sh КОД ЗАВЕРШЕНИЯ
.Ex -std
.Sh ПРИМЕРЫ
Заменить
bar
на
baz ,
когда вывод передаётся из другой команды:
.Bd -literal -offset indent
echo "Альтернативное слово, как bar, иногда используется
в примерах." | sed 's/bar/baz/'
.Ed
.Pp
Использование обратных слэшей может быть затруднительным
для чтения и понимания:
.Bd -literal -offset indent
echo "/home/example" | sed  's/\\/home\\/example/\\/usr\\/local\\/example/'
.Ed
.Pp
Использование другого разделителя может быть
удобным при работе с путями:
.Bd -literal -offset indent
echo "/home/example" | sed 's#/home/example#/usr/local/example#'
.Ed
.Pp
Заменить все вхождения
foo
на
bar
в файле
test.txt ,
без создания резервной копии файла:
.Bd -literal -offset indent
sed -i '' -e 's/foo/bar/g' test.txt
.Ed
.Sh СМ. ТАКЖЕ
.Xr awk 1 ,
.Xr ed 1 ,
.Xr grep 1 ,
.Xr regex 3 ,
.Xr re_format 7
.Rs
.\" 4.4BSD USD:15
.%A Lee E. McMahon
.%I AT&T Bell Laboratories
.%T SED \(em Неинтерактивный текстовый редактор
.%R Технический отчёт по вычислительной технике
.%N 77
.%D Январь 1979
.Re
.Sh СТАНДАРТЫ
Ожидается, что
.Nm
утилита будет расширенной версией
.St -p1003.2
спецификации.
.Pp
Параметры
.Fl E , I , a
и параметры
.Fl i
специальное значение
.Fl f Cm - ,
префикс
.Dq \&+
во втором элементе диапазона адресов, а также флаг
.Dq I
в регулярном выражении адреса и команде замены
являются нестандартными
.Fx
расширениями и могут быть недоступны в других
операционных системах.
.Sh ИСТОРИЯ
Команда
.Nm
, написанная
.An Л. Э. МакМахоном,
появилась в
.At v7 .
.Sh АВТОРЫ
.An Диомидис Д. Спинеллис Aq Mt dds@FreeBSD.org
.Sh ОШИБКИ
Многобайтовые символы, содержащие байт со значением 0x5C
.Tn ( ASCII
.Ql \e )
могут неправильно обрабатываться как символы продолжения
строки в аргументах команд
.Dq a ,
.Dq c
и
.Dq i
commands.
Многобайтовые символы нельзя использовать в качестве
разделителей в командах
.Dq s
и
.Dq y
commands.
