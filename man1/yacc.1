.\" $Id: yacc.1,v 1.42 2022/11/06 17:07:16 tom Exp $
.\"
.\" .TH YACC 1 "July\ 15,\ 1990"
.\" .UC 6
.ds N Yacc
.ds n yacc
.de Ex
.RS +7
.PP
.nf
.ft CW
..
.de Ee
.fi
.ft R
.RE
..
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds AQ \(aq
.el       .ds AQ '
.ie \n(.g .ds `` \(lq
.el       .ds `` ``
.ie \n(.g .ds '' \(rq
.el       .ds '' ''
.\" Bulleted paragraph
.de bP
.ie n  .IP \(bu 4
.el    .IP \(bu 2
..
.TH YACC 1 "Ноябрь 6, 2022" "Berkeley Yacc" "Пользовательские Команды"
.SH ИМЯ
\*N \- an LALR(1) parser generator
.SH СИНТАКСИС
.B \*n [ \-BdghilLPrtvVy ] [ \-b
.I file_prefix
.B ] [ \-H
.I defines_file
.B ] [ \-o
.I output_file
.B ] [ \-p
.I symbol_prefix
.B ]
.I filename
.SH ОПИСАНИЕ
.B \*N
считывает грамматическую спецификацию из файла в 
.I названии файла
и формирует для него синтаксический анализатор LALR(1).
Анализаторы состоят из набора таблиц синтаксического анализа LALR(1) и программы-драйвера, написанной на языке программирования C.
.B \*N
обычно записывает таблицы синтаксического анализа и процедуру драйвера в файл
.IR  y.tab.c .
.PP
Доступны следующие параметры:
.TP 5
\fB\-b \fIfile_prefix\fR
Параметры
.B \-b
изменяют префикс, добавляемый к именам выходных файлов, на
строку, обозначаемую символом
.I file_prefix.
Префиксом по умолчанию является символ
.I y.
.TP
.B \-B
создает синтаксический анализатор с обратным отслеживанием (конфигурация во время компиляции для \fBbtyacc\fP).
.TP
.B \-d
приводит к тому, что заголовок файла
.B y.tab.h
будет написан.
Он содержит #define для идентификаторов токенов.
.TP
.B \-h
выведите сообщение об использовании со стандартной ошибкой.
.TP
\fB\-H \fIdefines_file\fR
вызывает #define для записи идентификаторов токенов
скорее в данный \fIdefines_file\fP файл, чем в файл \fBy.tab.h\fP , используемый параметром \fB\-d\fP .
.TP
.B \-g
Параметр
.B \-g
приводит к записи графического описания сгенерированного синтаксического анализатора LALR(1) в файл
.B y.dot
в формате graphviz готовой для обработки
.BR dot (1).
.TP
.B \-i
Параметр \fB\-i\fR приводит к написанию дополнительного заголовочного файла 
.B y.tab.i
.
Он содержит внешние заявления 
и дополнительный #define's по мере необходимости для сопоставления стандартных 
\fIyacc\fP
\fByy\fP-prefixed имен к чему бы не указал параметр \fB\-p\fP .
Файл кода, например, \fBy.tab.c\fP видоизменен, чтобы #include данный файл
таким же образом, как и файл \fBy.tab.h\fP , обеспечивая согласованное использование
символов, определенных в этих файлах.
.IP
Дополнительный заголовочный файл упрощает раздельную компиляцию
lex- и yacc-файлов.
.TP
.B \-l
Если параметр
.B \-l
не указан, то
.B \*n
вставит директивы \fI#line\fP в сгенерированный код.
Директивы \fI#line\fP позволяют компилятору языка Си соотносить ошибки в
сгенерированном коде с исходным кодом пользователя.
Если параметр \fB\-l\fR указан, то
.B \*n
не будет добавлен в директивы \fI#line\fP .
\&\fI#line\fP директивы, указанные пользователем, будут сохранены.
.TP
.B \-L
позволяет обработку местоположения,
напр., \*(``%мlocations\*('' (настройка во время компиляции для \fBbtyacc\fP).
.TP
\fB\-o \fIoutput_file\fR
указывает имя файла для синтаксического анализа.
Если этот параметр не указан, именем выходного файла будет
префикс файла, объединенный с суффиксом файла, напр., \fBy.tab.c\fP.
Это перекрывает параметр \fB\-b\fP .
.TP
\fB\-p \fIsymbol_prefix\fR
Параметр
.B \-p
 изменяет префикс, добавляемый к символам, сгенерированным yacc, на
строку, обозначаемую как
.I symbol_prefix.
По умолчанию префиксом будет являться строка
.B yy.
.TP
.B \-P
формирует реентерабельный синтаксический анализатор, напр., \*(``%pure\-parser\*(''.
.TP
.B \-r
Параметр
.B \-r
приводит 
.B \*n
для создания отдельных файлов для кода и таблиц.
Файл с кодом называется
.IR y.code.c ,
и файл с таблицами называется
.IR y.tab.c .
Префикс \*(``\fIy.\fP\*('' может быть переопределен с помощью параметра \fB\-b\fP .
.TP
.B \-s
сжимает \*(``\fB#define\fP\*('' операторы, сгенерированные для строковых констант в
 \*(``\fB%token\fP\*('' заявление,
для лучшего соответствия с исходным поведением \fByacc\fP .
.IP
Обычно, когда \fB\*n\fP видет такую строку, как
.Ex
%token OP_ADD "ADD"
.Ee
.IP
он отмечает, что цитированные \*(``ADD\*('' является допустимым C идентификатором,
и формирует #define не только для OP_ADD,
но и для ADD,
напр.,
.Ex
#define OP_ADD 257
.br
#define ADD 258
.Ee
.IP
Исходный \fByacc\fP не формирует второго \*(``\fB#define\fP\*(''.
Параметр \fB\-s\fP подавляет этот \*(``\fB#define\fP\*(''.
.IP
POSIX (IEEE 1003.1 2004) записывает только названия и числовые значения 
для \*(``\fB%token\fP\*('',
[jnz исходный \fByacc\fP b bison также принимают строковые константы.
.TP
.B \-t
Параметр
.B \-t
изменяет директивы препроцессора, генерируемые с помощью
.B \*n
так, что инструкции по отладке будут включены в скомпилированный код.
.IP
\fB\*N\fR отправляет отладочные выходные данные на стандартный вывод
(совместимый как с исходным \fByacc\fP и \fBbtyacc\fP),
тем временем \fBbtyacc\fP записывает отладочный вывод в стандартную ошибку
(как \fBbison\fP).
.TP
.B \-v
Параметр
.B \-v
приводит к записи удобного для чтения человеком описания в файл сгенерированного синтаксического анализатора
.I y.output.
.TP
.B \-V
выводит номер версии на стандартный вывод.
.TP
.B \-y
\fB\*n\fP игнорирует данный параметр,
который поддерживает bison для обеспечения видимой совместимости с POSIX.
.PP
Параметр \fIfilename\fP не будет оптимальным.
Однако, \fB\*n\fP принимает сигнал \*(``\-\*('' чтобы прочитать содержание
из стандартного ввода.
Двойные кавычки \*(``\-\-\*('' обозначают конец списка опций.
Одиночный параметр \fIfilename\fP ожидается следующим за \*(``\-\-\*('' маркером.
.SH РАСШИРЕНИЯ
.B \*N
предоставлять некоторые расширения для
совместимости с bison и другими реализациями yacc.
Поддерживать некоторые \fIlong параметры\fP которые имеют аналоги в \*n.
\fB%destructor\fP и \fB%locations\fP отображают доступные 
только если \fB\*n\fP был сконфигурирован и скомпилирован для поддержки функции
обратного отслеживания (\fBbtyacc\fP) .
Остальные функции всегда доступны:
.TP
\fB %code\fP \fIkeyword\fP { \fIcode\fP }
Добавлять указанный источник \fIcode\fP в заданную точку файла выходных данных.
Опционный \fIkeyword\fP указывает \fB\*n\fP куда вставляется \fIcode\fP:
.RS 7
.TP 5
\fBнаивысший\fP
сразу после определения версии в сгенерированном файле кода.
.TP 5
\fBтребует\fP
сразу после заявления общедоступных переменных синтаксического анализатора.
Если параметр \fB\-d\fP уже задан, то код вставляется в
начало определяющего файла.
.TP 5
\fBобеспечивает\fP
сразу после объявления частных переменных синтаксического анализатора.
Если параметр \fB\-d\fP уже заданn, то код вставляется в
начало определяющего файла.
.RE
.IP
Если никакое \fIkeyword\fP не задано, код вставляется в
начало раздела кода, скопированного дословно из исходного файла.
Множественные директивы \fB%code\fPмогут быть заданы;
\fB\*n\fP вставляет их в соответствующий файл кода или определений
в том порядке, в котором они отображаются в исходном файле.
.TP
\fB %debug\fP
Это имеет такое же влияние, что и \*(``\-t\*('' параметр командной строки.
.TP
\fB %destructor\fP { \fIcode\fP } \fIsymbol+\fP
определять код, который вызывается, при автоматическом удалении 
символа во время восстановления после ошибки.
Этот код может использоваться для
исправления динамически выделяемой памяти, связанной с соответствующим
семантическим значением, в случаях, когда действия пользователя не могут
явно управлять памятью.
.IP
При обнаружении ошибки синтаксического анализа сгенерированный синтаксический
анализатор удаляет символы из стека и вводит токены до тех пор, пока не достигнет состояния, позволяющего продолжить синтаксический анализ.
Такой подход к устранению ошибок приводит к утечке памяти, 
если \fBYYSTYPE\fP значение является или содержит
указатели на динамически выделяемую память.
.IP
Заключенный в квадратные скобки \fIcode\fP вызывается всякий раз, когда синтаксический анализатор избавляется от одного из
символов.
В пределах \fIcode\fP, \*(``\fB$$\fP\*('' или
\*(``\fB$<\fItag\fB>$\fR\*('' определяет семантическое значение, связанное с
отброшенным символом, и \*(``\fB@$\fP\*('' обозначает его местоположение (см.
\fB%locations\fP каталог).
.IP
Деструктор для каждого символа определяется путем перечисления грамматического символа
в \fIsymbol+\fP.  Деструктор для каждого типа определяется путем перечисления
семантического тега типа (напр., \*(``<some_tag>\*('') in \fIsymbol+\fP; в этом
случае синтаксический анализатор будет применять \fIcode\fP всякий раз, когда он отбрасывает любой грамматический
символ, имеющий этот семантический тег типа, если только этот символ не имеет собственного деструктора для каждого символа.
.IP
Поддерживать две категории деструкторов по умолчанию, которые
вызываются при отбрасывании любого грамматического символа, у которого нет
деструктора для каждого символа или типа:
.RS
.bP
код для \*(``\fB<*>\fP\*('' используется
для грамматических символов, имеющих объявленный тег семантического типа
(через \*(``\fB%type\fP\*('');
.bP
код для \*(``\fB<>\fP\*('' используется
для грамматических символов, у которых нет объявленного тега семантического типа.
.RE
.TP
\fB %empty\fP
упускается \fB\*n\fP.
.TP
\fB %expect\fP \fInumber\fP
передать \fB\*n\fP ожидаемое количество противоречий сдвига/уменьшения.
Таким образом номер будет сообщаться только в случае, если он отличается.
.TP
\fB %expect\-rr\fP \fInumber\fP
передать \fB\*n\fP ожидаемое количество противоречий сдвига/уменьшения.
Таким образом номер будет сообщаться только в случае, если он отличается.
Это (в отличие от bison) допустимо в анализаторах LALR.
.TP
\fB %locations\fP
передать \fB\*n\fP включить управление информацией о местоположении, связанной
с каждым токеном, предоставляемой лексическим средством в глобальной переменной \fByylloc\fP,
похоже с управлением семантической ценной информацией, представленной в \fByylval\fP.
.IP
Что касается семантических значений, то на местоположения можно ссылаться в рамках действий используя
\fB@$\fP чтобы указать расположение символа слева, и \fB@\fIN\fR
(\fIN\fP an integer) чтобы указать местоположение одного из символов справа.
Также, что касается семантических значений, при сопоставлении с правилом используется
действие по умолчанию - вычисление местоположения, представленного \fB@$\fP в качестве начала первого символа и конца последнего символа справа от правила.
Это вычисление по умолчанию может быть отменено путем
прямого присвоения\fB@$\fP в действии правила.
.IP
Тип \fByylloc\fP является \fBYYLTYPE\fP, который по умолчанию определен как:
.Ex
typedef struct YYLTYPE {
    int first_line;
    int first_column;
    int last_line;
    int last_column;
} YYLTYPE;
.Ee
.IP
\fBYYLTYPE\fP может быть переопределен пользователем
(\fBYYLTYPE_IS_DEFINED\fP должен быть определен, чтобы остановить использование по умолчанию)
в разделе объявлений файла спецификации.
Как и в bison, макрос \fBYYLLOC_DEFAULT\fP вызывается
каждый раз, когда выполняется сопоставление с правилом, чтобы вычислить позицию для левой части правила перед выполнением соответствующего действия; 
этот макрос может быть
переопределен пользователем.
.IP
Этот директив добавляет параметр \fBYYLTYPE\fP к \fByyerror()\fP.
Если директив \fB%pure\-parser\fP присуствует,
параметр \fBYYLTYPE\fP добавляется к вызовам \fByylex()\fP .
.TP
\fB %lex\-param\fP { \fIargument-declaration\fP }
Лексический анализатор по умолчанию не принимает никаких параметров, напр., \fByylex()\fP.
Использует эту директиву для добавления заявлений параметров для настроенного лексического анализатора.
.TP
\fB %parse\-param\fP { \fIargument-declaration\fP }
Лексический анализатор по умолчанию не принимает никаких параметров, напр., \fByyparse()\fP.
Использует эту директиву для добавления заявлений параметров для настроенного синтаксического анализаторf.
.TP
\fB %pure\-parser\fP
Большинство переменных (кроме \fByydebug\fP и \fByynerrs\fP) 
размещаются в стеке в пределах \fByyparse\fP, что делает синтаксический анализатор повторно используемым.
.TP
\fB %token\-table\fP
Делает имена токенов, используемых синтаксическим анализатором, доступными в массиве \fByytname\fP.
Однако,
.B \*n
не предопределяет \*(``$end\*('', \*(``$error\*(''
or \*(``$undefined\*('' в этом массиве.
.SH МОБИЛЬНОСТЬ
По словам Роберта Корбетта,
.Ex
Berkeley Yacc - это генератор синтаксических анализаторов LALR(1). Berkeley Yacc
был сделан максимально совместимым с AT&T Yacc.
Berkeley Yacc может принимать любые входные данные,
соответствующие документации AT&T Yacc. Спецификации, которые могут воспользоваться недокументированными возможностями AT&T Yacc, вероятно, будут отклонены.
.Ee
.PP
Обоснование находится в
.Ex
http://pubs.opengroup.org/onlinepubs/9699919799/utilities/yacc.html
.Ee
.PP
документирует некоторые функции AT&T yacc, которые больше не требуются для
обеспечения соответствия требованиям POSIX.
.PP
Тем не менее, вы можете быть заинтересованы в повторном использовании грамматических файлов в какой-либо другой реализации, которая не совсем совместима с AT&T yacc.
Например, есть bison.
Вот несколько отличий:
.bP
\fBYacc\fP принимает знак равенства, предшествующий левой фигурной скобке
действия (как в исходном грамматическом файле \fBftp.y\fP):
.Ex
    |   STAT CRLF
        = {
                statcmd();
        }
.Ee
.bP
\fBYacc\fP и bison генерируют код в разном порядке, и, в частности, bison
создает прямые ссылки на общие функции, такие как yylex, yyparse и
yyerror, без предоставления прототипов.
.bP
Поддержка Bison для \*(``%expect\*('' не работает в нескольких версиях.
Для достижения наилучших результатов при использовании bison удалите эту директиву.
.bP
У Bison нет аналога некоторым из \fB\*n\fP's параметры командной строки,
основанные на директивах, встроенных в грамматический файл.
.bP
Параметр Bison \*(``\fB\-y\fP\*('' не влияет на отсутствие у bison поддержки
функций AT&T yacc, которые были признаны устаревшими.
.bP
\fBYacc\fP принимает несколько параметров
с \fB%lex\-param\fP и \fB%parse\-param\fP в двух формах
.Ex
{type1 name1} {type2 name2} ...
{type1 name1,  type2 name2 ...}
.Ee
.IP
Bison принимает недавний (хотя и недокументированный), но в зависимости от
версии может генерировать неверный код.
.bP
Как и bison, \fB\*n\fP добавит параметры, указанные через \fB%parse\-param\fP
to \fByyparse\fP, \fByyerror\fP и (если настроено для обратного отслеживания)
к ликвидатору, объявленному с помощью\fB%destructor\fP.
Bison задает дополнительные параметры \fIfirst\fP для
\fByyparse\fP и \fByyerror\fP но \fIlast\fP для ликвидаторов.
\fBYacc\fP соответствует такому поведению.
.
.SH ДИАГНОСТИКА
Если есть правила, которые никогда не сокращаются, количество таких правил
отображается в виде стандартной ошибки.
Если есть какие-либо конфликты LALR(1), количество конфликтов отображается
в виде стандартной ошибки.
