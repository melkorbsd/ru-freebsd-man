.\"
.\" CDDL HEADER START
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or https://opensource.org/licenses/CDDL-1.0.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" CDDL HEADER END
.\"
.\" Copyright (c) 2009 Oracle and/or its affiliates. All rights reserved.
.\" Copyright (c) 2009 Michael Gebetsroither <michael.geb@gmx.at>. All rights
.\" reserved.
.\" Copyright (c) 2017, Intel Corporation.
.\"
.Dd Май 26, 2021
.Dt ZTEST 1
.Os
.
.Sh ИМЯ
.Nm ztest
.Nd был написан разработчиками ZFS как модульный тест ZFS
.Sh СИНТАКСИС
.Nm
.Op Fl VEG
.Op Fl v Ar vdevs
.Op Fl s Ar size_of_each_vdev
.Op Fl a Ar alignment_shift
.Op Fl m Ar mirror_copies
.Op Fl r Ar raidz_disks/draid_disks
.Op Fl R Ar raid_parity
.Op Fl K Ar raid_kind
.Op Fl D Ar draid_data
.Op Fl S Ar draid_spares
.Op Fl C Ar vdev_class_state
.Op Fl d Ar datasets
.Op Fl t Ar threads
.Op Fl g Ar gang_block_threshold
.Op Fl i Ar initialize_pool_i_times
.Op Fl k Ar kill_percentage
.Op Fl p Ar pool_name
.Op Fl T Ar time
.Op Fl z Ar zil_failure_rate
.
.Sh ОПИСАНРИЕ
.Nm
был написан разработчиками ZFS как модульный тест ZFS. Инструмент 
был разработан в тандеме с функциональностью ZFS и выполнялся каждый вечер как один из многих регрессионных тестов по сравнению с ежедневной сборкой. По мере того, как 
в ZFS добавлялись новые функции, модульные тесты также добавлялись в 
.Nm .
Кроме того, отдельная команда разработчиков тестов написала и выполнила дополнительный функционал и стресс-тесты.
.
.Pp
По умолчанию
.Nm
выполняется в течение десяти минут и использует файлы блоков  (хранящихся в
.Pa /tmp )
для создания pools вместо использования физических дисков.
Блоки файлов обеспечивают
.Nm
гибкость работы с
компонентами zpool, не требуя больших конфигураций оборудования.
Однако сохранение блоков файлов в
.Pa /tmp
может не подойти для вас, если у вас
небольшой каталог tmp.
.
.Pp
По умолчанию не содержит подробных сведений.
Вот почему ввод приведенной выше команды приведет к
.Nm
спокойно проводится в течение 5 минут
Параметр
.Fl V
может использоваться для увеличения детализации инструмента.
Добавление нескольких параметров
.Fl V
разрешено, и чем больше вы добавляете, тем более болтливым
.Nm
становится.
.
.Pp
После того, как 
.Nm
запуск завершится, вы должны заметить множество
.Pa ztest.*
разбросанных файлов.
После завершения запуска вы можете безопасно удалить эти файлы.
Обратите внимание, что удалять эти файлы во время запуска не следует.
Вы можете повторно использовать эти файлы в следующем
.Nm
запускается с помощью
.Fl E
параметра.
.
.Sh ПАРАМЕТРЫ
.Bl -tag -width "-v v"
.It Fl h , \&? , -help
Выносить сводку справки.
.It Fl v , -vdevs Ns = (default: Sy 5 )
Количество vdevs.
.It Fl s , -vdev-size Ns = (default: Sy 64M )
Размер каждого vdev.
.It Fl a , -alignment-shift Ns = (default: Sy 9 ) No (use Sy 0 No for random )
Сдвиг выравнивания, используемый в тесте.
.It Fl m , -mirror-copies Ns = (default: Sy 2 )
Количество зеркальных копий.
.It Fl r , -raid-disks Ns = (default: Sy 4 No for raidz/ Ns Sy 16 No for draid )
Количество дисков raidz/draid.
.It Fl R , -raid-parity Ns = (default: Sy 1 )
Raid parity (raidz & draid).
.It Fl K , -raid-kind Ns = Ns Sy raidz Ns | Ns Sy draid Ns | Ns Sy random No (по умолчанию: выбирается случайно )
Тип конфигурации RAID для использования.
С
.Sy random
разновидности чередуются между raidz и draid.
.It Fl D , -draid-data Ns = (default: Sy 4 )
Количество дисков с данными в группе резервирования dRAID.
.It Fl S , -draid-spares Ns = (default: Sy 1 )
Количество распределенных драйдом запасных дисков.
.It Fl d , -datasets Ns = (default: Sy 7 )
Количество наборов данных.
.It Fl t , -threads Ns = (default: Sy 23 )
Количество потоков.
.It Fl g , -gang-block-threshold Ns = (default: Sy 32K )
Порог блокировки банды.
.It Fl i , -init-count Ns = (default: Sy 1 )
Количество инициализаций пула.
.It Fl k , -kill-percentage Ns = (default: Sy 70% )
Процент убитых.
.It Fl p , -pool-name Ns = (default: Sy ztest )
Pool название.
.It Fl f , -vdev-file-directory Ns = (default: Pa /tmp )
Файловый каталог для файлов vdev.
.It Fl M , -multi-host
Мультихост; имитация пула, импортированного на удаленный хост.
.It Fl E , -use-existing-pool
Используйте существующий пул (используйте существующий пул вместо создания нового).
.It Fl T , -run-time Ns = (default: Sy 300 Ns s)
Общее время выполнения теста.
.It Fl P , -pass-time Ns = (default: Sy 60 Ns s)
Время на один проход.
.It Fl F , -freeze-loops Ns = (default: Sy 50 )
Максимальное количество циклов в
.Fn spa_freeze .
.It Fl B , -alt-ztest Ns =
Путь к альтернативному ("более старому")
.Nm ztest
для запуска, который будет использоваться для инициализации пула и, в половине
случаев, для запуска тестов.
Параллельный каталог
.Pa lib
добавляется к
.Ev LD_LIBRARY_PATH ;
i.e. given
.Fl B Pa ./chroots/lenny/usr/bin/ Ns Nm ,
.Pa ./chroots/lenny/usr/lib
будет загружен.
.It Fl C , -vdev-class-state Ns = Ns Sy on Ns | Ns Sy off Ns | Ns Sy random No 
будет загружен
Состояние класса распределения vdev.
.It Fl o , -option Ns = Ns Ar variable Ns = Ns Ar value
Устанавливать глобальный
.Ar переменный
в 32-разрядное целое число без знака
.Ar value
(little-endian only).
.It Fl G , -dump-debug
Дамп буфера zfs_dbgmsg перед завершением работы из-за ошибки.
.It Fl V , -verbose
Подробный (используется несколько раз для большей детализации).
.El
.
.Sh ПРИМЕРЫ
Чтобы переопределить 
.Pa /tmp
в качестве местоположения для файлов блоков, можно использовать
.Fl f
параметр:
.Dl # ztest -f /
.Pp
Чтобы получить представление о том, что
.Nm
на самом деле тестирует попробуйте это:
.Dl # ztest -f / -VVV
.Pp
Может быть, вы хотели бы запускать 
.Nm ztest
на больший промежуток времени? Для этого просто используйте параметр
.Fl T
и укажите продолжительность выполнения в секундах следующим образом:
.Dl # ztest -f / -V -T 120
.
.Sh ПЕРЕМЕННЫЕ ОКРУЖАЮЩЕЙ СРЕДЫ
.Bl -tag -width "ZF"
.It Ev ZFS_HOSTID Ns = Ns Em id
Используйте
.Em id
вместо SPL hostid для идентификации этого хоста.
Предназначен для использования с
.Nm , но эта переменная будет влиять на любую утилиту, использующую
libzpool, включая
.Xr zpool 8 .
Так как ядро не знает об этом параметре,
результаты использования других утилит, кроме ztest, не определены.
.It Ev ZFS_STACK_SIZE Ns = Ns Em stacksize
Ограничьте размер стека по умолчанию до следующего значения
.Em stacksize
байты для
обнаружения и отладки переполнений стека ядра.
По умолчанию это значение равно
.Em 32K
что в два раза больше значения по умолчанию
.Em 16K
Размер стека ядра Linux.
.Pp
На практике необходимо немного увеличить размер стека, поскольку
различия в использовании стека ядром и пользовательским пространством могут привести к ложному переполнению стека (особенно при включенной отладке).
Указанное значение
будет округлено в большую сторону до значения PTHREAD_STACK_MIN which которое является минимальным стеком, требуемым для нулевой процедуры в пользовательском пространстве. 

.Pp
По умолчанию размер стека ограничен
.Em 256K .
.El
.
.Sh СМОТРИТЕ ТАКЖЕ
.Xr zdb 1 ,
.Xr zfs 1 ,
.Xr zpool 1 ,
.Xr spl 4
