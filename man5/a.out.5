.\" Copyright (c) 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This manual page is derived from documentation contributed to Berkeley by
.\" Donn Seeley at UUNET Technologies, Inc.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)a.out.5	8.1 (Berkeley) 6/5/93
.\"
.Dd 10 июня, 2010
.Dt A.OUT 5
.Os
.Sh ИМЯ
.Nm a.out
.Nd формат исполняемых бинарных файлов
.Sh СИНТАКСИС
.In a.out.h
.Sh ОПИСАНИЕ
Файл заголовка
.In a.out.h
объявляет три структуры и несколько макросов.
Структуры описывают формат 
исполняемых файлов машинного кода 
.Pq Sq бинарников
в системе.
.Pp
Бинарный файл состоит из 7 секций. 
В порядке, эти секции:
.Bl -tag -width "text relocations"
.It exec header
Содержит параметры, используемые ядром
для загрузки бинарного файла в память и его выполнения,
а также редактором линковки 
.Xr ld 1
для объединения бинарного файла с другими бинарными файлами.
Эта секция является единственной обязательной.
.It text segment
Содержит машинный код и связанные данные, 
которые загружаются в память при выполнении программы.
Может быть загружен как только для чтения.
.It data segment
Содержит инициализированные данные; всегда загружается в записываемую память.
.It text relocations
Содержит записи, используемые редактором линковки 
для обновления указателей в текстовом сегменте при объединении бинарных файлов.
.It data relocations
Как и секция текстовых перемещений, но для указателей сегмента данных.
.It symbol table
Содержит записи, используемые редактором линковки
для перекрестной ссылки адресов именованных переменных и функций 
.Pq Sq символов
между бинарными файлами.
.It string table
Содержит строковые символы, соответствующие именам символов.
.El
.Pp
Каждый бинарный файл начинается со
.Fa exec
структуры:
.Bd -literal -offset indent
struct exec {
	unsigned long	a_midmag;
	unsigned long	a_text;
	unsigned long	a_data;
	unsigned long	a_bss;
	unsigned long	a_syms;
	unsigned long	a_entry;
	unsigned long	a_trsize;
	unsigned long	a_drsize;
};
.Ed
.Pp
Поля имеют следующие функции:
.Bl -tag -width a_trsize
.It Fa a_midmag
Это поле хранится в порядке байтов хоста.
Оно имеет несколько подкомпонентов, к которым можно получить доступ с помощью макросов 
.Fn N_GETFLAG ,
.Fn N_GETMID ,
и
.Fn N_GETMAGIC ,
и устанавливается макросом 
.Fn N_SETMAGIC .
.Pp
Макрос
.Fn N_GETFLAG
возвращает несколько флагов:
.Bl -tag -width EX_DYNAMIC
.It Dv EX_DYNAMIC
указывает на то, что исполняемый файл требует услуг редактора линковки времени выполнения.
.It Dv EX_PIC
указывает на то, что объект содержит код, независимый от позиции. 
Этот флаг 
устанавливается 
.Xr as 1
при использовании
.Sq -k
и сохраняется 
.Xr ld 1
при необходимости.
.El
.Pp
Если оба флага EX_DYNAMIC и EX_PIC установлены, объектный файл представляет собой исполняемый файл, независимый от позиции (например, \& общая библиотека), который должен быть загружен в 
адресное пространство процесса редактором линковки времени выполнения.
.Pp
Макрос
.Fn N_GETMID
возвращает идентификатор машины. 
Это указывает, на какой машине(ах) предназначен бинарный файл для выполнения.
.Pp
.Fn N_GETMAGIC
указывает магическое число, которое уникально идентифицирует бинарные файлы 
и различает различные конвенции загрузки.
Поле должно содержать одно из следующих значений:
.Bl -tag -width ZMAGIC
.It Dv OMAGIC
Текстовые и данные сегменты немедленно следуют за заголовком 
и являются смежными. 
Ядро загружает как текст, так и данные в записываемую память.
.It Dv NMAGIC
Как и в случае
.Dv OMAGIC ,
текстовые и данные сегменты немедленно следуют за заголовком и являются смежными.
Однако ядро загружает текст в память только для чтения
и загружает данные в записываемую память 
на следующей границе страницы после текста.
.It Dv ZMAGIC
Ядро загружает отдельные страницы по требованию из бинарного файла. 
Заголовок, текстовый сегмент и сегмент данных все
дополнены редактором линковки до кратного размеру страницы. 
Страницы, которые ядро загружает из текстового сегмента, являются только для чтения, 
в то время как страницы из сегмента данных являются записываемыми.
.El
.It Fa a_text
Содержит размер текстового сегмента в байтах.
.It Fa a_data
Содержит размер сегмента данных в байтах.
.It Fa a_bss
Содержит количество байтов в
.Sq bss сегменте
и используется ядром для установки начального разрыва.
.Pq Xr brk 2
после сегмента данных. 
Ядро загружает программу так, чтобы это количество записываемой памяти 
казалось следовать за сегментом данных и изначально читалось как нули. 
.Em ( bss
= блок, начатый символом)
.It Fa a_syms
Содержит размер в байтах секции таблицы символов.
.It Fa a_entry
Содержит адрес в памяти точки входа
программы после загрузки ядром;
ядро начинает выполнение программы 
с машинной инструкции по этому адресу.
.It Fa a_trsize
Содержит размер в байтах таблицы перемещений текста.
.It Fa a_drsize
Содержит размер в байтах таблицы перемещений данных.
.El
.Pp
Файл включения
.In a.out.h
определяет несколько макросов, которые используют 
.Fa exec
структуру для проверки согласованности или для нахождения смещений секций в бинарном файле.
.Bl -tag -width N_BADMAG(exec)
.It Fn N_BADMAG exec
Ненулевое значение, если поле 
.Fa a_magic
не содержит распознанного значения.
.It Fn N_TXTOFF exec
Байтовое смещение в бинарном файле начала текстового сегмента.
.It Fn N_SYMOFF exec
Байтовое смещение начала таблицы символов.
.It Fn N_STROFF exec
Байтовое смещение начала строковой таблицы.
.El
.Pp
Записи о перемещениях имеют стандартный формат, который 
описывается
.Fa relocation_info
структурой:
.Bd -literal -offset indent
struct relocation_info {
	int		r_address;
	unsigned int	r_symbolnum : 24,
			r_pcrel : 1,
			r_length : 2,
			r_extern : 1,
			r_baserel : 1,
			r_jmptable : 1,
			r_relative : 1,
			r_copy : 1;
};
.Ed
.Pp
Поля
.Fa relocation_info
используются следующим образом:
.Bl -tag -width r_symbolnum
.It Fa r_address
Содержит байтовое смещение указателя, который необходимо редактировать. 
Смещения перемещений текста считаются от начала текстового сегмента, 
а смещения перемещений данных — от начала сегмента данных. 
Редактор линковки добавляет значение, уже хранящееся по этому смещению, 
к новому значению, которое он вычисляет с помощью этой записи о перемещении.
.It Fa r_symbolnum
Содержит порядковый номер структуры символа 
в таблице символов (это
.Em не
байтовое смещение).
После того как редактор линковки разрешает абсолютный адрес для этого символа, 
он добавляет этот адрес к указателю, который подвергается перемещению. 
(Если
.Fa r_extern
бит очищен, ситуация отличается; см. ниже.)
.It Fa r_pcrel
Если этот бит установлен,
редактор линковки предполагает, что он обновляет указатель, 
который является частью машинной инструкции с использованием относительной адресации по счетчику программы. 
Адрес перемещаемого указателя неявно добавляется
к его значению, когда выполняющая программа его использует.
.It Fa r_length
Содержит логарифм по основанию 2 длины указателя в байтах; 
0 для смещений на 1 байт, 1 для смещений на 2 байта, 
2 для смещений на 4 байта.
.It Fa r_extern
Установлен, если это перемещение требует внешней ссылки; 
редактор линковки должен использовать адрес символа для обновления указателя. 
Когда
.Fa r_extern
бит очищен, перемещение является 
.Sq локальным ;
редактор линковки обновляет указатель, чтобы отразить изменения в адресах загрузки различных сегментов, 
вместо изменений значения символа (за исключением случаев, когда
.Fa r_baserel
также установлен бит (см. ниже).
В этом случае содержимое
.Fa r_symbolnum
поля является
.Fa n_type
значением (см. ниже);
это поле типа указывает редактору линковки, 
в какой сегмент указывает перемещаемый указатель.
.It Fa r_baserel
Если установлен, символ, определяемый
.Fa r_symbolnum
полем, должен быть перемещен на смещение в Таблицу глобальных смещений (Global Offset Table). 
Во время выполнения запись в Таблице глобальных смещений по этому смещению устанавливается 
как адрес символа.
.It Fa r_jmptable
Если установлен, символ, определяемый
.Fa r_symbolnum
полем, должен быть перемещен на смещение в Таблицу связывания процедур (Procedure Linkage Table).
.It Fa r_relative
Если установлен, это перемещение относительно (временного) адреса загрузки
образа, частью которого будет этот объектный файл. 
Этот тип перемещения происходит
только в общих объектах.
.It Fa r_copy
Если установлен, эта запись о перемещении идентифицирует символ, содержимое которого должно
быть скопировано в место, указанное в
.Fa r_address .
Копирование выполняется редактором линковки во время выполнения из подходящего элемента данных
в общем объекте.
.El
.Pp
Символы сопоставляют имена с адресами (или, более общо, строки со значениями)
Поскольку редактор ссылок корректирует адреса,
имя символа должно использоваться для обозначения его адреса
до тех пор, пока не будет назначено абсолютное значение.
Символы состоят из записи фиксированной длины в таблице символов
и имени переменной длины в строковой таблице.
Таблица символов представляет собой массив 
.Fa nlist
структур:
.Bd -literal -offset indent
struct nlist {
	union {
		const char	*n_name;
		long		n_strx;
	} n_un;
	unsigned char		n_type;
	char			n_other;
	short			n_desc;
	unsigned long		n_value;
};
.Ed
.Pp
Поля используются следующим образом:
.Bl -tag -width n_un.n_strx
.It Fa n_un.n_strx
Содержит смещение в байтах в строковой таблице
для имени этого символа
Когда программа обращается к таблице символов с помощью
.Xr nlist 3
функции,
это поле заменяется 
.Fa n_un.n_name
полем, которое является указателем на строку в памяти.
.It Fa n_type
Используется редактором ссылок для определения того, 
как обновить значение символа.
Поле
.Fa n_type
делится на три подполя с использованием битовых масок.
Редактор ссылок рассматривает символы с
.Dv N_EXT
установленным битом типа, как 
.Sq external
внешние символы и позволяет на них ссылаться из других двоичных файлов. 
Маска
.Dv N_TYPE
выбирает интересующие биты для редактора ссылок:  
.Bl -tag -width N_TEXT
.It Dv N_UNDF
Неопределенный символ.
Редактор ссылок должен найти внешний символ с тем же 
именем в другом двоичном файле, чтобы определить абсолютное значение этого символа.
В качестве особого случая, если
.Fa n_value
поле ненулевое и ни один двоичный файл в редактировании не определяет этот символ,
редактор ссылок разрешит этот символ на адрес
в сегменте bss, 
резервируя количество байт, равное
.Fa n_value .
Если этот символ неопределен в более чем одном двоичном файле 
и двоичные файлы не согласны по размеру,
редактор ссылок выбирает наибольший размер, найденный среди всех бинарников.  
.It Dv N_ABS
Абсолютный символ. 
Редактор ссылок не обновляет абсолютный символ.  
.It Dv N_TEXT
Текстовый символ.
Значение этого символа — адрес текста,
и редактор ссылок обновит его, когда объединит двоичные файлы.  
.It Dv N_DATA
Данные символ; аналогично
.Dv N_TEXT
но для адресов данных.
Значения для текстовых и данных символов не являются смещениями в файле, а
адресами; чтобы восстановить смещения файла, необходимо
определить загруженный адрес начала соответствующего
раздела и вычесть его, затем добавить смещение раздела.  
.It Dv N_BSS
Символ bss; как текстовые или данные символы, 
но не имеет соответствующего смещения в двоичном файле.  
.It Dv N_FN
Символ имени файла.
Редактор ссылок вставляет этот символ перед
другими символами из двоичного файла при
объединении двоичных файлов.
Имя символа — это имя файла, указанное редактору ссылок,
а его значение — первый текстовый адрес из этого двоичного файла.
Символы имени файла не нужны для редактирования или загрузки ссылок,
но полезны для отладчиков.
.El
.Pp
Маска
.Dv N_STAB
выбирает интересующие биты для символических отладчиков,
таких как
.Xr gdb 1 Pq Pa ports/devel/gdb ;
начения описаны в 
.Xr stab 5 .
.It Fa n_other
Это поле предоставляет информацию о характере
символа независимо от его расположения в терминах сегментов, определяемых
.Fa n_type
полем.
В настоящее время младшие 4 бита поля
.Fa n_other
содержат одно из двух значений: 
.Dv AUX_FUNC
и
.Dv AUX_OBJECT
(см.
.In link.h
для их определений).
.Dv AUX_FUNC
ассоциирует символ с вызываемой функцией, в то время как
.Dv AUX_OBJECT
ассоциирует символ с данными, независимо от их местоположения в
текстовом или сегменте данных.
Это поле предназначено для использования
.Xr ld 1
при построении динамических исполняемых файлов.  
.It Fa n_desc
Резервировано для использования отладчиками; передается без изменений редактором ссылок.
Разные отладчики используют это поле для различных целей.
.It Fa n_value
Содержит значение символа.
Для текстовых, данных и bss символов это адрес;
для других символов (таких как символы отладчика)
значение может быть произвольным. 
.El
.Pp
Строковая таблица состоит из длины
.Em unsigned long
за которой следуют строки символов, заканчивающиеся нулем.
Длина представляет собой размер всей таблицы в байтах, 
поэтому ее минимальное значение (или смещение первой строки)
всегда равно 4 на 32-битных машинах.  
.Sh СМОТРИ ТАКЖЕ
.Xr as 1 ,
.Xr gdb 1 Pq Pa ports/devel/gdb ,
.Xr ld 1 ,
.Xr brk 2 ,
.Xr execve 2 ,
.Xr nlist 3 ,
.Xr core 5 ,
.Xr elf 5 ,
.Xr link 5 ,
.Xr stab 5
.Sh ИСТОРИЯ
Файл
.In a.out.h
включения появился в
.At v7 .
.Sh ОШИБКИ
Поскольку не все поддерживаемые архитектуры используют поле
.Fa a_midmag
может быть трудно определить, на какой
архитектуре будет выполняться бинарный файл,
не исследуя его фактический машинный код. 
Даже с идентификатором машины
порядок байтов заголовка
.Fa exec
зависит от машины.