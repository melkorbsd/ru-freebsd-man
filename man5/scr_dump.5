.\"***************************************************************************
.\" Copyright 2018,2020 Thomas E. Dickey                                     *
.\" Copyright 2017 Free Software Foundation, Inc.                            *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, to any person obtaining a  *
.\" copy of this software and associated documentation files (the            *
.\" "Software"), to deal in the Software without restriction, including      *
.\" without limitation the rights to use, copy, modify, merge, publish,      *
.\" distribute, distribute with modifications, sublicense, and/or sell       *
.\" copies of the Software, and to permit persons to whom the Software is    *
.\" furnished to do so, subject to the following conditions:                 *
.\"                                                                          *
.\" The above copyright notice and this permission notice shall be included  *
.\" in all copies or substantial portions of the Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained in this notice, the name(s) of the above copyright   *
.\" holders shall not be used in advertising or otherwise to promote the     *
.\" sale, use or other dealings in this Software without prior written       *
.\" authorization.                                                           *
.\"***************************************************************************
.\"
.\" $Id: scr_dump.5,v 1.16 2020/02/02 23:34:34 tom Exp $
.TH scr_dump 5
.ie \n(.g .ds `` \(lq
.el       .ds `` ``
.ie \n(.g .ds '' \(rq
.el       .ds '' ''
.de NS
.ie n  .sp
.el    .sp .5
.ie n  .in +4
.el    .in +2
.nf
.ft C			\" Courier
..
.de NE
.fi
.ft R
.ie n  .in -4
.el    .in -2
..
.de bP
.ie n  .IP \(bu 4
.el    .IP \(bu 2
..
.SH ИМЯ
scr_dump \- формат экранных дампов curses.
.SH КРАТКИЙ ОБЗОР
.B сброс данных
.SH ОПИСАНИЕ
.PP
Библиотека курсов предоставляет приложениям возможность писать
содержимое окна во внешний файл с помощью \fBscr_dump\fP или \fBputwin\fP,
и прочитайте его, используя \fBscr_restore\fP или \fBgetwin\fP.
.PP
Функции \fBputwin\fP и \fBgetwin\fP выполняют всю работу;
в то время как \fBscr_dump\fP и \fBscr_restore\fP удобно сохраняют и восстанавливают
весь экран, т. е. \fBstdscr\fP.
.SS ncurses6
.PP
Давняя реализация дампа экрана была
исправлено с помощью ncurses6 для устранения проблем с предыдущим подходом:
.bP
В начало файла дампа записывается \*(``магическое число\*('',
позволяет приложениям (таким как \fBfile\fP(1)) распознавать файлы дампов курсов.
.IP
Поскольку ncurses6 использует новый формат,
для этого требуется новое магическое число
не использовался другими приложениями.
Это 16-битное число не использовалось:
.NS
0x8888 (octal \*(``\\210\\210\*('')
.NE
.IP
но для большей уверенности было выбрано вот это 32-битное число:
.NS
0x88888888 (octal \*(``\\210\\210\\210\\210\*('')
.NE
.IP
Это шаблон, отправленный сопровождающим программы \fBfile\fP:
.NS
#
# ncurses5 (and before) did not use a magic number,
# making screen dumps "data".
#
# ncurses6 (2015) uses this format, ignoring byte-order
0    string    \\210\\210\\210\\210ncurses    ncurses6 screen image
#
.NE
.bP
Дампы экрана записываются в текстовом виде,
чтобы внутренние размеры данных не были напрямую связаны с форматом дампа, и
позволяя библиотеке читать дампы как с узкими, так и с широкими символами.
конфигурации.
.IP
Конфигурация библиотеки \fInarrow\fP содержит символы и атрибуты видео.
в 32-битном \fBchtype\fP, а библиотека \fIwide-character\fP хранит
эта информация находится в структуре \fBcchar_t\fP, которая намного больше, чем
32-бит.
.bP
Можно прочитать дамп экрана в терминале с другим
размером экрана,
потому что библиотека усекает или заполняет экран по мере необходимости.
.bP
ncurses6 \fBgetwin\fP считывает устаревшие дампы экрана из ncurses5.
.SS ncurses5 (legacy)
.PP
Функция дампа экрана была добавлена ​​в ncurses в июне 1995 года.
Хотя в последующие годы были исправления и улучшения,
основная схема осталась неизменной:
.bP
Структура \fBWINDOW\fP была записана в двоичной форме.
.bP
Структура \fBWINDOW\fP относится к строкам данных,
которые были записаны как массив двоичных данных после \fBWINDOW\fP.
.bP
Когда \fBgetwin\fP восстановил окно,
он будет отслеживать смещения в массиве строковых данных
и откорректируйте структуру \fBWINDOW\fP, которая была считана обратно в память.
.PP
Это похоже на Unix SystemV,
но не записывает \*(``магическое число\*('' для идентификации формата файла.
.SH ПОРТАТИВНОСТЬ
.PP
Для \fBputwin\fP не существует стандартного формата.
В этом разделе дается краткое описание существующих форматов.
.SS X/Open Curses
.PP
См. \fIX/Open Curses, выпуск 7\fP (2009).
.PP
В документации X/Open для \fIenhanced Curses\fP говорится только:
.RS 3
.PP
Функция \fIgetwin(\) \fP считывает данные, связанные с окном.
хранится в файле \fIputwin(\ )\fP.
Функция
затем создает и инициализирует новое окно, используя эти данные.
.PP
Функция \fIputwin(\ )\fP записывает все связанные данные.
с \fIwin\fP в поток \fIstdio\fP, к которому \fIfilep\fP
точек, используя формат \fBunspecified\fP.
Эту информацию можно получить позже, используя \fIgetwin(\ )\fP.
.RE
.PP
В середине 1990-х годов, когда был написан документ X/Open Curses,
все еще существовали системы, использующие старые, менее функциональные библиотеки курсов.
(кроме библиотеки курсов BSD, которая не имела отношения к X/Open
потому что оно не соответствовало критериям \fIbase курсов\fP).
В документе термин \*(``улучшенный\*('' объясняется следующим образом:
.RS 3
.bP
Затенение используется для идентификации материала \fIX/Open Enhanced Curses\fP,
относящиеся к интерфейсам, включенным для обеспечения расширенных возможностей
для приложений, изначально написанных для компиляции в системах
на базе операционной системы UNIX.
Поэтому описанные функции могут отсутствовать в системах
которые соответствуют \fBXPG4 или более ранним выпускам XPG\fP.
Соответствующие справочные страницы могут содержать дополнительную информацию.
или более конкретные предупреждения о переносимости использования материала.
.RE
.PP
Выше был сделан акцент на \fBunspecified format\fP.
и \fBXPG4 или более ранние версии XPG\fP,
для ясности.
.SS Система Unixv
.PP
В curses of Unix System V был определен формат файла, написав
\*(``магическое число\*('' в начале дампа.
Далее следуют данные \fBWINDOW\fP и строки текста, все в двоичной форме.
.PP
В источнике курсов Solaris есть следующие определения:
.NS
/* terminfo magic number */
#define MAGNUM  0432

/* curses screen dump magic number */
#define SVR2_DUMP_MAGIC_NUMBER  0433
#define SVR3_DUMP_MAGIC_NUMBER  0434
.NE
.PP
То есть эта функция, скорее всего, была введена в SVr2 (1984 г.),
и улучшен в СВр3 (1987).
В источнике курсов Соляриса нет магического числа для SVr4 (1989).
Другие операционные системы (AIX и HPUX) используют магическое число, которое
соответствуют этому определению:
.NS
/* curses screen dump magic number */
#define SVR4_DUMP_MAGIC_NUMBER  0435
.NE
.PP
Это восьмеричное число в байтах — 001, 035.
Поскольку большинство поставщиков Unix используют оборудование с прямым порядком байтов,
магическое число записывается сначала старшим байтом, например,
.NS
\001\035
.NE
.PP
После магического числа указывается структура \fBWINDOW\fP и строковые данные.
записанный в двоичном формате.
Хотя магическое число, используемое в системах Unix, можно увидеть с помощью \fBod\fP(1),
ни одна из систем Unix не документирует формат, используемый для дампов экрана.
.PP
Системы Unix не используют одинаковые форматы.
При сборе информации для этой страницы руководства,
тестовая программа \fIsavescreen\fP
производятся отвалы разного размера
(все на 64-битном железе, на экранах 40х80):
.bP
AIX (51817 байт)
.bP
HPUX (90093 байта)
.bP
Solaris 10 (13273 байта)
.bP
ncurses5 (12888 байт)
.SS Solaris
.PP
Как отмечалось выше, проклятия Соляриса не имеют магического числа, соответствующего
на ругательства СВр4.
Это странно, поскольку Solaris была первой операционной системой.
пройти рекомендации SVR4.
В Solaris есть две версии курсов:
.bP
Библиотека курсов по умолчанию использует магическое число SVr3.
.bP
Альтернативная библиотека курсов находится в \fB/usr/xpg4\fP.
При этом используется текстовый формат без магического числа.
.IP
Согласно уведомлению об авторских правах, библиотека курсов \fIxpg4\fP Solaris была
разработан компанией MKS (Mortice Kern Systems) с 1990 по 1995 год.
.IP
Как и в ncurses6, здесь есть заголовок файла с параметрами.
В отличие от ncurses6, содержимое окна записывается по частям,
с координатами и атрибутами для каждого фрагмента текста, а не
чем писать все окно сверху вниз.
.SS PDCurses
.PP
В PDCurses добавлена ​​поддержка дампов экрана в версии 2.7 (2005 г.).
Подобно Unix SystemV и ncurses5,
он записывает структуру \fBWINDOW\fP в двоичном формате,
но начинает файл со своего трехбайтового идентификатора \*(``PDC\*('',
за которым следует однобайтовая версия,
например,
.NS
	\*(``PDC\\001\*(''
.NE
.SS NetBSD
.PP
По состоянию на апрель 2017 года проклятия NetBSD
не поддерживает \fBscr_dump\fP и \fBscr_restore\fP
(или \fBscr_init\fP, \fBscr_set\fP),
хотя у него есть \fBputwin\fP и \fBgetwin\fP.
.PP
Как и ncurses5, NetBSD \fBputwin\fP не идентифицирует свои дампы с помощью
полезное магическое число.
Он записывает
.bP
основные и второстепенные версии общей библиотеки курсов
как первые два байта (например, 7 и 1),
.bP
за которым следует двоичный дамп \fBWINDOW\fP,
.bP
некоторые данные для расширенных символов, на которые ссылается структура \fBWINDOW\fP, и
.bP
наконец, строки, как это делается в других реализациях.
.SH пример
.PP
Дана простая программа, которая выводит текст на экран.
(и для примера ограничение размера экрана до 10х20):
.NS
#include <curses.h>

int
main(void)
{
    putenv("LINES=10");
    putenv("COLUMNS=20");
    initscr();
    start_color();
    init_pair(1, COLOR_WHITE, COLOR_BLUE);
    init_pair(2, COLOR_RED, COLOR_BLACK);
    bkgd(COLOR_PAIR(1));
    move(4, 5);
    attron(A_BOLD);
    addstr("Hello");
    move(5, 5);
    attroff(A_BOLD);
    attrset(A_REVERSE | COLOR_PAIR(2));
    addstr("World!");
    refresh();
    scr_dump("foo.out");
    endwin();
    return 0;
}
.NE
.PP
При запуске с использованием ncurses6 вывод выглядит следующим образом:
.NS
\\210\\210\\210\\210ncurses 6.0.20170415
_cury=5
_curx=11
_maxy=9
_maxx=19
_flags=14
_attrs=\\{REVERSE|C2}
flag=_idcok
_delay=-1
_regbottom=9
_bkgrnd=\\{NORMAL|C1}\\s
rows:
1:\\{NORMAL|C1}\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s
2:\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s
3:\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s
4:\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s
5:\\s\\s\\s\\s\\s\\{BOLD}Hello\\{NORMAL}\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s
6:\\s\\s\\s\\s\\s\\{REVERSE|C2}World!\\{NORMAL|C1}\\s\\s\\s\\s\\s\\s\\s\\s\\s
7:\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s
8:\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s
9:\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s
10:\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s
.NE
.PP
Первые четыре восьмеричных escape-символа на самом деле являются непечатаемыми символами,
а остальная часть файла представляет собой печатный текст.
Вы можете заметить:
.bP
Фактические значения цветовых пар не записываются в файл.
.bP
Все символы показаны в печатном виде; пробелы - это \*(``\\s\*('' до
убедиться, что их не упускают из виду.
.bP
Атрибуты записываются в экранированных фигурных скобках, например, \*(``\\{BOLD}\*('',
и может включать пару цветов (в данном примере C1 или C2).
.bP
Параметры в заголовке выписываются, только если они ненулевые.
При обратном чтении порядок не имеет значения.
.ne 10
.PP
Запуск той же программы с курсами Solaris \fIxpg4\fP дает такой дамп: 
.NS
MAX=10,20
BEG=0,0
SCROLL=0,10
VMIN=1
VTIME=0
FLAGS=0x1000
FG=0,0
BG=0,0, 
0,0,0,1,
0,19,0,0, 
1,0,0,1,
1,19,0,0, 
2,0,0,1,
2,19,0,0, 
3,0,0,1,
3,19,0,0, 
4,0,0,1,
4,5,0x20,0,Hello
4,10,0,1,
4,19,0,0, 
5,0,0,1,
5,5,0x4,2,World!
5,11,0,1,
5,19,0,0, 
6,0,0,1,
6,19,0,0, 
7,0,0,1,
7,19,0,0, 
8,0,0,1,
8,19,0,0, 
9,0,0,1,
9,19,0,0, 
CUR=11,5
.NE
.PP
Solaris \fBgetwin\fP требует присутствия всех параметров и
в том же порядке.
Библиотека проклятий \fIxpg4\fP не знает о \fBbce\fP
(стирание заднего цвета) и не окрашивает фон окна.
.ne 10
.PP
С другой стороны, библиотека проклятий SVr4 знает о цвете фона.
Однако его дампы экрана находятся в двоичном формате.
Вот соответствующий дамп (с использованием \*(``od -t x1\*(''):
.NS
0000000 1c 01 c3 d6 f3 58 05 00 0b 00 0a 00 14 00 00 00
0000020 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00
0000040 00 00 b8 1a 06 08 cc 1a 06 08 00 00 09 00 10 00
0000060 00 00 00 80 00 00 20 00 00 00 ff ff ff ff 00 00
0000100 ff ff ff ff 00 00 00 00 20 80 00 00 20 80 00 00
0000120 20 80 00 00 20 80 00 00 20 80 00 00 20 80 00 00
*
0000620 20 80 00 00 20 80 00 00 20 80 00 00 48 80 00 04
0000640 65 80 00 04 6c 80 00 04 6c 80 00 04 6f 80 00 04
0000660 20 80 00 00 20 80 00 00 20 80 00 00 20 80 00 00
*
0000740 20 80 00 00 20 80 00 00 20 80 00 00 57 00 81 00
0000760 6f 00 81 00 72 00 81 00 6c 00 81 00 64 00 81 00
0001000 21 00 81 00 20 80 00 00 20 80 00 00 20 80 00 00
0001020 20 80 00 00 20 80 00 00 20 80 00 00 20 80 00 00
*
0001540 20 80 00 00 20 80 00 00 00 00 f6 d1 01 00 f6 d1
0001560 08 00 00 00 40 00 00 00 00 00 00 00 00 00 00 07
0001600 00 04 00 01 00 01 00 00 00 01 00 00 00 00 00 00
0001620 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
0002371
.NE
.SH СМОТРИТЕ ТАКЖЕ
.PP
\fBcurs_scr_dump\fR(3X),
\fBcurs_util\fR(3X).
.SH AUTHORS
.PP
Томас Э. Дики
.br
расширенный формат дампа экрана для ncurses 6.0 (2015)
.sp
Эрик С. Рэймонд
.br
функция дампа экрана в ncurses 1.9.2d (1995)
