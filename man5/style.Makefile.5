.\" Copyright (c) 2002-2003 David O'Brien <obrien@FreeBSD.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the author nor the names of any contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL DAVID O'BRIEN OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd July 17, 2023
.Dt STYLE.MAKEFILE 5
.Os
.Sh ИМЯ
.Nm style.Makefile
.Nd
.Fx
.Pa Makefile - файл Makefile
руководство по стилю файла
.Sh ОПИСАНИЕ
Этот файл определяет предпочтительный стиль для make-файлов в
.Fx
исходное дерево.
.Bl -bullet
.It
.Cm .PATH :
При необходимости идет первым и пишется
.Dq Li ".PATH: " ,
с одним
.Tn ASCII
пробелом после двоеточия.
Не используйте 
.Va VPATH
переменную.
.It
Специальные переменные (т. е.
.Va LIB , SRCS , MLINKS ,
и т. д.) перечислены в
.Dq product ,
порядке сборки и установки двоичного файла.
Специальные переменные также могут быть перечислены по
.Dq build
порядку: т. е. сначала переменные для основной программы (или библиотеки).
Общий порялок
.Dq product
таков:
.Va PROG Ns / Ns Oo Va SH Oc Ns Va LIB Ns / Ns Va SCRIPTS
.Va FILES
.Va LINKS
.Va MAN
.Va MLINKS
.Va INCS
.Va SRCS
.Va WARNS
.Va CSTD
.Va CFLAGS
.Va DPADD
.Va LDADD .
Общий порядок
.Dq build
таков:
.Va PROG Ns / Ns Oo Va SH Oc Ns Va LIB Ns / Ns Va SCRIPTS
.Va SRCS
.Va WARNS
.Va CSTD
.Va CFLAGS
.Va DPADD
.Va LDADD
.Va INCS
.Va FILES
.Va LINKS
.Va MAN
.Va MLINKS .
.It
Опустить
.Va Управляющие компании
когда используем
.In bsd.prog.mk
и есть один исходный файл с таким же именем, как и у
.Va программы .
.It
Опустить
.Va MAN
когда используем
.In bsd.prog.mk
и страница руководства называется так же, как и страница
.Va PROG ,
и находится в разделе 1.
.It
Все назначения переменных пишутся
.Dq Va VAR Ns Ic = ,
т. е. между именем переменной и ее значением нет пробела.
.Ic = .
По возможности сохраняйте значения в алфавитном порядке.
.It
Переменные расширяются с помощью
.Sy {} ,
нет
.Sy () .
Такой как
.Va ${VARIABLE} .
.It
Не используйте 
.Ic +=
для установки переменных, которые устанавливаются только один раз
(или установить переменные впервые).
.It
Не используйте вертикальные пробелы в простых make-файлах.
но используйте его для группировки локально связанных вещей в более сложные/длинные.
.It
.Va WARNS
приходит раньше
.Va CFLAGS ,
поскольку это, по сути,
.Va CFLAGS
модификатор.
Это происходит до
.Va CFLAGS
а не после
.Va CFLAGS
чтобы не затеряться в море
.Va CFLAGS
утверждений
.Va WARNS
это очень важно.
Использование 
.Va WARNS
написано так
.Dq Li "WARNS?= " ,
что его можно переопределить в командной строке или 
.Xr make.conf 5 .
.It
.Dq Li "MK_WERROR=no"
не следует использовать,
это противоречит цели
.Va WARNS .
Его следует использовать только в командной строке и в особых случаях.
.It
.Va CFLAGS
пишется
.Dq Li "CFLAGS+= " .
.It
Листинг
.Fl D Ns 's
раньше
.Fl I Ns 's
в
.Va CFLAGS
предпочтительнее для алфавитного порядка и 
.Fl D Ns 's
облегчения просмотра.
часто
.Fl D Ns 's
 влияют на условную компиляцию,
и
.Fl I Ns 's
имеют тенденцию быть довольно длинными.
Разделить длинные
.Va CFLAGS
настройки между
.Fl D Ns 's
и
.Fl I Ns 's.
.It
Не используйте GCCизмы (например,
.Fl g
и
.Fl Wall )
в
.Va CFLAGS .
.It
обычно,
.Tn ASCII
между
.Va VAR Ns Ic =
и значением, чтобы начать значение в столбце 9.
Пробел
.Tn ASCII
 допускается для имен переменных, выходящих за пределы столбца 9.
Отсутствие пробелов также допускается для очень длинных имен переменных
.It
.Ic .include In bsd.*.mk
идет последним..
.It
Не используйте анахронизмы типа
.Va $<
и
.Va $@ .
Вместо этого используйте
.Va ${.IMPSRC}
или
.Va ${.ALLSRC}
и
.Va ${.TARGET} .
.It
Чтобы не строить
.Dq foo
часть базовой системы,
используйте
.Va NO_FOO ,
не
.Va NOFOO .
.It
Чтобы при необходимости построить что-то в базовой системе,
написать ручку
.Va WITH_FOO
не
.Va WANT_FOO
или
.Va USE_FOO .
Последние зарезервированы для
.Fx
коллекции портов.
.It
Для переменных, которые проверяются только с помощью
.Fn defined ,
не указывайте ложное значение.
.El
.Pp
Желание выразить логическую группировку часто означает неподчинение некоторым из
выше.
.Sh EXAMPLES
Самая простая программа
.Pa Makefile
является:
.Bd -literal -offset indent
PROG=	foo

\&.include <bsd.prog.mk>
.Ed
.Pp
Самая простая библиотека
.Pa Makefile
является:
.Bd -literal -offset indent
LIB=	foo
SHLIB_MAJOR= 1
MAN=	libfoo.3
SRCS=	foo.c

\&.include <bsd.lib.mk>
.Ed
.Sh СМОТРИТЕ ТАКЖЕ
.Xr make 1 ,
.Xr make.conf 5 ,
.Xr style 9
.Sh ИСТОРИЯ
Эта страница руководства основана на том же источнике, что и
.Xr style 9
страница руководства в
.Fx .
.Sh ОШИБКИ
Здесь есть несколько жестких правил стиля.
Стиль многих вещей слишком зависит от контекста всего make-файла,
или линии, окружающие его.
