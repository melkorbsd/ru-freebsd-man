.\" Copyright (c) 2003-2009 Tim Kientzle
.\" Copyright (c) 2016 Martin Matuska
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" $FreeBSD$
.\"
.Dd December 27, 2016
.Dt TAR 5
.Os
.Sh ИМЯ
.Nm tar
.Nd формат файлов ленточного архива
.Sh ОПИСАНИЕ
Формат
.Nm
архива собирает любое количество файлов, каталогов и других файлов.
объекты файловой системы (символические ссылки, узлы устройств и т. д.) в единый
поток байтов.
Изначально формат был разработан для использования с
ленточные накопители, работающие с блоками фиксированного размера, но широко используемые в качестве
общий механизм упаковки.
.Ss Общий формат
Архив
.Nm
состоит из серии записей по 512 байт.
Каждому объекту файловой системы требуется запись заголовка, в которой хранятся основные метаданные.
(путь, владелец, разрешения и т. д.) и ноль или более записей, содержащих какие-либо
данные файла.
Конец архива обозначается двумя записями, состоящими из
полностью из нулевых байтов.
.Pp
Для совместимости со стримерами, использующими фиксированные размеры блоков,
программы, которые читают или записывают файлы tar, всегда читают или записывают фиксированную
количество записей при каждой операции ввода-вывода.
Эти
.Dq блоки
всегда кратны размеру записи.
Максимальный размер блока, поддерживаемый ранними
реализации составляло 10240 байт или 20 записей.
Это по-прежнему значение по умолчанию для большинства реализаций.
хотя размеры блоков 1 МБ (2048 записей) или больше
обычно используется с современными высокоскоростными ленточными накопителями.
(Примечание:
.Dq блок терминов
и
.Dq запись
здесь не совсем стандартные; этот документ соответствует
соглашению, установленному John Gilmore для документации
.Nm pdtar . )
.Ss Формат архива старого образца
Исходный формат архива tar многократно расширялся до
включать дополнительную информацию, найденную различными разработчиками
необходимый.
В этом разделе описывается вариант, реализованный командой tar.
включен в
.At v7 ,
это, по-видимому, самая ранняя широко используемая версия программы tar.
.Pp
Заголовок записи для старого стиля
.Nm
архив состоит из следующего:
.Bd -literal -offset indent
struct header_old_tar {
	char name[100];
	char mode[8];
	char uid[8];
	char gid[8];
	char size[12];
	char mtime[12];
	char checksum[8];
	char linkflag[1];
	char linkname[100];
	char pad[255];
};
.Ed
Все неиспользуемые байты в записи заголовка заполняются нулями.
.Bl -tag -width indent
.It Va имя
Путь, сохраненный в виде строки с нулевым завершением.
Ранние реализации tar хранили только обычные файлы (включая
жесткие ссылки на эти файлы).
В одном из ранних соглашений использовался завершающий символ «/» для обозначения
имя каталога, предоставляющее права доступа к каталогу и информацию о владельце
быть заархивированы и восстановлены.
.It Va mode
Режим файла, хранящийся в виде восьмеричного числа в формате ASCII.
.It Va uid , Va gid
Идентификатор пользователя и идентификатор группы владельца в виде восьмеричных чисел в формате ASCII.
.It Va size
Размер файла в восьмеричном формате ASCII.
Только для обычных файлов это указывает на объем данных.
это следует за заголовком.
В частности, это поле игнорировалось в ранних реализациях tar.
при извлечении жестких ссылок.
Современные авторы должны всегда сохранять нулевую длину для записей жестких ссылок.
.It Va время
Время модификации файла в восьмеричном формате ASCII.
Это указывает количество секунд с начала эпохи,
00:00:00 UTC January 1, 1970.
Обратите внимание, что следует избегать отрицательных значений
здесь, поскольку они обрабатываются непоследовательно.
.It Va контрольная сумма
Контрольная сумма заголовка, хранящаяся в виде восьмеричного числа в формате ASCII.
Чтобы вычислить контрольную сумму, установите в поле контрольной суммы все пробелы.
затем просуммируйте все байты в заголовке, используя беззнаковую арифметику.
Это поле должно храниться в виде шести восьмеричных цифр, за которыми следует ноль и пробел.
характер.
Обратите внимание, что во многих ранних реализациях tar использовалась знаковая арифметика.
для поля контрольной суммы, что может вызвать проблемы совместимости
при переносе архивов между системами.
Современные надежные считыватели вычисляют контрольную сумму обоими способами и принимают
заголовок, если любое из вычислений совпадает.
.It Va флаг ссылки , Va имя ссылки
Чтобы сохранить жесткие ссылки и сэкономить ленту, файл
при нескольких ссылках в архив записывается только первая
время, когда оно встречается.
В следующий раз, когда он встретится,
.Va флаг ссылки
установлен в ASCII
.Sq 1
и
.Va имя ссылки
Поле содержит первое имя, под которым отображается этот файл.
(Note that regular files have a null value in the
.Va флаг ссылки
field.)
.El
.Pp
Ранние реализации tar различались по способу закрытия этих полей.
Команда tar в
.At v7
использовали следующие соглашения (это также описано в ранних справочных страницах BSD):
путь должен заканчиваться нулем;
поля mode, uid и gid должны заканчиваться пробелом и нулевым байтом;
поля size и mtime должны заканчиваться пробелом;
контрольная сумма заканчивается нулем и пробелом.
Ранние реализации заполняли числовые поля начальными пробелами.
Похоже, это была обычная практика до тех пор, пока
.St -p1003.1-88
стандарт был выпущен.
Для лучшей переносимости современные реализации должны заполнять числовые значения.
поля с ведущими нулями.
.Ss Pre-POSIX Archives
Ранний проект
.St -p1003.1-88
послужил основой для Джона Гилмора
.Nm pdtar
программа и многие реализации систем конца 1980-х годов
и начале 1990-х годов.
Эти архивы обычно соответствуют стандарту POSIX.
описанный ниже формат со следующими вариациями:
.Bl -bullet -compact -width indent
.It
Магическое значение состоит из пяти символов,
.Dq ustar
за которыми следует пробел.
Поле версии содержит пробел, за которым следует ноль.
.It
Числовые поля обычно заполняются пробелами.
(без ведущих нулей, как рекомендовано в окончательной версии стандарта).
.It
Поле префикса часто не используется, ограничивая имена путей
100 знаков из архивов старого образца.
.El
.Ss POSIX ustar Архивы
.St -p1003.1-88
определение стандартного формата файла tar для чтения и записи
посредством совместимых реализаций
.Xr tar 1 .
Этот формат часто называют
.Dq ustar
формат после используемого магического значения
в заголовке.
(The name is an acronym for
.Dq Unix Standard TAR . )
Он расширяет исторический формат новыми полями:
.Bd -literal -offset indent
struct header_posix_ustar {
	char name[100];
	char mode[8];
	char uid[8];
	char gid[8];
	char size[12];
	char mtime[12];
	char checksum[8];
	char typeflag[1];
	char linkname[100];
	char magic[6];
	char version[2];
	char uname[32];
	char gname[32];
	char devmajor[8];
	char devminor[8];
	char prefix[155];
	char pad[12];
};
.Ed
.Bl -tag -width indent
.It Va шрифтовой флаг
Тип входа.
POSIX расширил предыдущее
.Va флаг ссылки
поле с несколькими значениями нового типа:
.Bl -tag -width indent -compact
.It Dq 0
Обычный файл.
В целях совместимости NUL следует рассматривать как синоним.
.It Dq 1
Жесткая ссылка.
.It Dq 2
Символическая ссылка.
.It Dq 3
Узел символьного устройства.
.It Dq 4
Узел блочного устройства.
.It Dq 5
Справочник
.It Dq 6
Узел FIFO.
.It Dq 7
Сдержанный.
.It Other
Реализация, совместимая с POSIX, должна обрабатывать любое нераспознанное значение флага типа.
как обычный файл.
В частности, авторы должны гарантировать, что все записи
иметь допустимое имя файла, чтобы его могли восстановить читатели, которые этого не делают.
поддерживать соответствующее расширение.
Прописные буквы от «A» до «Z» зарезервированы для пользовательских расширений.
Обратите внимание, что сокеты и записи белого цвета не подлежат архивированию.
.El
Стоит отметить, что
.Va размер
поля, в частности, имеет разные значения в зависимости от типа.
Для обычных файлов, конечно, указывается объём данных
следуя за заголовком.
Для каталогов его можно использовать для указания общего размера всех
файлы в каталоге для использования операционными системами, которые предварительно выделяют
пространство каталогов.
Для всех других типов авторы должны устанавливать его равным нулю и игнорировать.
читателями.
.It Va Магическое поле
Содержит магическое значение
.Dq ustar
за которым следует NUL-байт, указывающий, что это стандартный архив POSIX.
Полное соответствие требует правильной установки полей uname и gname.
.It Va версия
Вариант.
Это должно быть
.Dq 00
(две копии цифры нуля ASCII) для стандартных архивов POSIX.
.It Va uname , Va gname
Имена пользователей и групп в виде строк ASCII с нулевым завершением.
Их следует использовать вместо значений uid/gid.
когда они установлены и соответствующие имена существуют на
система.
.It Va главный разработчик , Va разработчик
Старшие и младшие номера для символьного устройства или ввода блочного устройства.
.It Va имя , Va префикс
Если путь слишком длинный и не помещается в 100 байт, предусмотренных стандартом
формате, его можно разделить в любом месте
.Pa /
символ, первая часть которого входит в поле префикса.
Если поле префикса не пусто, программа чтения добавит
значение префикса и
.Pa /
символ в обычное поле имени, чтобы получить полный путь.
Стандарт не требует завершающего
.Pa /
символа в именах каталогов, хотя большинство реализаций по-прежнему
включает это из соображений совместимости.
.El
.Pp
Обратите внимание, что все неиспользуемые байты должны быть установлены на
.Dv НОЛЬ .
.Pp
Завершение поля определяется в POSIX несколько иначе
чем в предыдущих реализациях.
.Va magic ,
.Va uname ,
и
.Va gname
поля должны иметь завершающий символ
.Dv NUL .
.Va pathname ,
.Va linkname ,
и
.Va prefix
поля должны иметь завершающий символ
.Dv NUL

если они не заполняют все поле.
(В частности, можно сохранить 256-значное имя пути, если оно
случайно есть
.Pa /
как 156-й символ.)
POSIX требует, чтобы числовые поля дополнялись нулями спереди, и
их следует заканчивать пробелом или
.Dv НОЛЬ
символом.
.Pp
В настоящее время большинство реализаций tar соответствуют требованиям ustar.
формат, иногда расширяя его, добавляя новые поля в
пустая область в конце записи заголовка.
.Ss Numeric Extensions
Было несколько попыток расширить диапазон размеров.
или время поддерживается путем изменения способа хранения чисел в
заголовок.
.Pp
Одним из очевидных расширений для увеличения размера файлов является
удалить конечные символы из различных
числовые поля.
Например, стандарт позволяет поле размера содержать только
11 восьмеричных цифр, двенадцатый байт резервируется для завершающего числа.
NUL-символ.
Разрешение 12 восьмеричных цифр позволяет использовать файлы размером до 64 ГБ.
.Pp
Еще одно расширение, используемое GNU tar, star и другими новыми версиями
.Nm
реализации допускает использование двоичных чисел в стандартных числовых полях.
Это отмечается установкой старшего бита первого байта.
Оставшаяся часть поля рассматривается как знаковое дополнение до двух
значений.
Это позволяет использовать 95-битные значения для полей длины и времени.
и 63-битные значения для uid, gid и номеров устройств.
В частности, это обеспечивает последовательный способ обработки
отрицательные значения времени.
GNU tar поддерживает это расширение для
Поля length, mtime, ctime и atime.
Звездная программа Йорга Шиллинга и поддержка библиотеки лиархива
это расширение для всех числовых полей.
Обратите внимание, что это расширение в значительной степени устарело по сравнению с расширенным
запись атрибута, предоставляемая форматом обмена pax.
.Pp
Другое раннее расширение GNU позволяло использовать значения в формате Base64, а не в восьмеричном формате.
Это расширение просуществовало недолго и больше не поддерживается никем.
выполнение.
.Ss Pax Interchange Format
Существует множество атрибутов, которые невозможно перенести в
устарный архив POSIX.
.St -p1003.1-2001
определил
.Dq pax interchange format
что использует два новых типа записей для хранения текстовых данных
метаданные, которые применяются к следующим записям.
Обратите внимание, что архив формата pax interchange представляет собой архив ustar в каждом
уважать.
Новые данные сохраняются в архивных записях, совместимых с ustar, которые используют
.Dq x
или
.Dq g
типфлаг.
В частности, старые реализации, которые не полностью поддерживают эти
расширения извлекут метаданные в обычные файлы, где
метаданные могут быть проверены по мере необходимости.
.Pp
Запись в архиве формата обмена pax состоит из одного или
две стандартные записи ustar, каждая со своим заголовком и данными.
Первая необязательная запись хранит расширенные атрибуты.
для следующей записи.
Эта необязательная первая запись имеет флаг типа «x» и поле размера, которое
указывает общий размер расширенных атрибутов.
Сами расширенные атрибуты хранятся в виде серии текстовых форматов
строки, закодированные в переносимой кодировке UTF-8.
Каждая строка состоит из десятичного числа, пробела, ключевой строки, знака равенства,
строки значения и новой строки.
Десятичное число указывает длину всей строки, включая
поле начальной длины и конечная новая строка.
Пример такого поля:
.Dl 25 ctime=1084839148.1212\en
Клавиши, написанные строчными буквами, являются стандартными клавишами.
Продавцы могут добавлять свои собственные ключи, добавляя к ним заглавные буквы.
имя поставщика и период.
Обратите внимание, что, в отличие от исторического заголовка, числовые значения сохраняются с использованием
десятичное, а не восьмеричное.
Ниже приводится описание некоторых общих ключей:
.Bl -tag -width indent
.It Cm atime , Cm ctime , Cm mtime
Доступ к файлу, изменение индексного дескриптора и время модификации.
Эти поля могут быть отрицательными или содержать десятичную точку и дробное значение.
.It Cm hdrcharset
Набор символов, используемый значениями расширения pax.
По умолчанию все текстовые значения в расширенных атрибутах pax
предполагаются в формате UTF-8, включая имена путей, имена пользователей,
и названия групп.
В некоторых случаях невозможно перевести локальный
соглашения в UTF-8.
Если этот ключ присутствует и значение представляет собой шестисимвольную строку ASCII
.Dq BINARY ,
тогда предполагается, что все текстовые значения находятся в зависимости от платформы.
многобайтовое кодирование.
Обратите внимание, что для этого ключа существует только два допустимых значения:
.Dq BINARY ,
или
.Dq ISO-IR\ 10646\ 2000\ UTF-8 .
Никакие другие значения стандартом не допускаются, и
последнее значение обычно не следует использовать, поскольку оно является
по умолчанию, если этот ключ не указан.
В частности, этот флаг не следует использовать в качестве общего
механизм, позволяющий хранить имена файлов в произвольных
кодировки.
.It Cm uname , Cm uid , Cm gname , Cm gid
Имя пользователя, имя группы и числовые значения UID и GID.
Имя пользователя и имя группы, хранящиеся здесь, закодированы в UTF8.
и, таким образом, может включать символы, отличные от ASCII.
Поля UID и GID могут иметь произвольную длину.
.It Cm путь к ссылке
Полный путь к связанному файлу.
Обратите внимание, что он закодирован в UTF8 и поэтому может включать символы, отличные от ASCII.
.It Cm путь
Полный путь записи.
Обратите внимание, что он закодирован в UTF8 и поэтому может включать символы, отличные от ASCII.
.It Cm в реальном времени.* , Cm безопасность.*
Эти ключи зарезервированы и могут использоваться для будущей стандартизации.
.It Cm размер
Размер файла.
Обратите внимание, что для этого поля нет ограничений по длине, что позволяет
архивы для хранения файлов, размер которых намного превышает исторический предел в 8 ГБ.
.It Cm SCHILY.*
Атрибуты, специфичные для поставщика, используемые Йоргом Шиллингом
.Nm star
выполнены.
.It Cm SCHILY.acl.access , Cm SCHILY.acl.default , Cm SCHILY.acl.ace
Сохраняет списки доступа, списки управления доступом по умолчанию и списки управления доступом NFSv4 в виде текстовых строк в формате
это расширение формата, указанного в проекте POSIX.1e 17.
В частности, каждая спецификация доступа пользователя или группы может включать
дополнительное поле, разделенное двоеточиями, с числовым UID или GID.
Это позволяет восстанавливать списки ACL в системах, которые могут быть неполными.
доступна информация о пользователе или группе (например, когда службы NIS/YP или LDAP
временно недоступны).
.It Cm SCHILY.devminor , Cm SCHILY.devmajor
Полные младшие и старшие номера узлов устройств.
.It Cm SCHILY.fflags
Флаги файла.
.It Cm SCHILY.realsize
Полный размер файла на диске.
XXX explain? XXX
.It Cm SCHILY.dev , Cm SCHILY.ino , Cm SCHILY.nlinks
Номер устройства, номер индексного дескриптора и количество ссылок для записи.
В частности, обратите внимание, что архив формата обмена pax с использованием Joerg
Шиллинга
.Cm SCHILY.*
расширения могут хранить все данные из
.Va struct stat .
.It Cm АРХИВ БИБЛИОТЕКИ.*
Атрибутов, специфичных для поставщика, используемые
.Nm архив библиотеки
библиотеку и программы, которые ее используют.
.It Cm АРХИВ БИБЛИОТЕКИ.creationtime
Время создания файла.
(Это не следует путать с POSIX
.Dq ctime
атрибут, который относится к времени, когда файл
метаданные были изменены в последний раз.)
.It Cm АРХИВ БИБЛИОТЕКИ.xattr . Ns Ar пространство имен . Ns Ar  ключ
архив библиотеки хранит расширенные атрибуты в стиле POSIX.1e, используя
ключи этой формы.
.Ar  ключ
Значение ключа имеет кодировку URL-адреса:

Все символы, отличные от ASCII, и два специальных символа.
.Dq =
и
.Dq %
кодируются как
.Dq %
за которыми следуют две шестнадцатеричные цифры в верхнем регистре.
Значение этого ключа является значением расширенного атрибута
закодировано в базе 64.
XXX Подробно о формате base-64 здесь XXX
.It Cm VENDOR.*
XXX документирует другие расширения, специфичные для конкретного поставщика XXX
.El
.Pp
Любые значения, хранящиеся в расширенном атрибуте, переопределяют соответствующие значения.
значения в обычном заголовке tar.
Обратите внимание, что читатели, соответствующие требованиям, должны игнорировать обычные поля, когда они
переопределены.
Это важно, поскольку известно, что существующие архиваторы хранят несовместимые файлы
значения в стандартных полях заголовка в этой ситуации.
Для любого из этих полей нет ограничений по длине.
В частности, числовые поля могут быть сколь угодно большими.
Все текстовые поля кодируются в UTF8.
Совместимые устройства записи должны хранить в файлах только переносимые 7-битные символы ASCII.
стандартный заголовок ustar и используйте расширенный
атрибуты всякий раз, когда текстовое значение содержит символы, отличные от ASCII.
.Pp
В добавок к
.Cm x
записи, описанной выше, формат обмена pax
также поддерживает
.Cm g
вступление.
.Cm g
запись идентична по формату, но определяет атрибуты, которые служат
значенем по умолчанию для всех последующих записей архива.
запись
.Cm g
широко не используется.
.Pp
Помимо нового
.Cm x
и
.Cm g
записей, формат обмена pax имеет несколько других незначительных изменений
из более раннего формата ustar.
Самым тревожным является то, что жестким ссылкам разрешено иметь
данные, следующие за ними.
Это позволяет читателям восстановить любую жесткую ссылку на файл без
приходится перематывать архив, чтобы найти более раннюю запись.
Однако это создает сложности для опытных читателей, поскольку больше не является
ясно, должны ли они игнорировать поле размера для записей жесткой ссылки.
.Ss GNU Tar Архивы 
Программа GNU tar начиналась с формата до POSIX, подобного этому
описанный ранее, и расширил его, используя несколько различных механизмов:
К пустому месту в заголовке были добавлены новые поля (некоторые из которых были позже
используется POSIX для противоречивых целей);
это позволяло продолжать заголовок в нескольких записях;
и он определил новые записи, которые изменяют следующие записи
(по принципу аналогично
.Cm x
описанную выше запись, но каждая специальная запись GNU имеет одноцелевое назначение,
в отличие от универсального
.Cm x
входа).
В результате архивы tar GNU несовместимы с POSIX, хотя
более мягкие POSIX-совместимые читатели могут успешно извлечь большую часть
GNU tar-архивы.
.Bd -literal -offset indent
struct header_gnu_tar {
	char name[100];
	char mode[8];
	char uid[8];
	char gid[8];
	char size[12];
	char mtime[12];
	char checksum[8];
	char typeflag[1];
	char linkname[100];
	char magic[6];
	char version[2];
	char uname[32];
	char gname[32];
	char devmajor[8];
	char devminor[8];
	char atime[12];
	char ctime[12];
	char offset[12];
	char longnames[4];
	char unused[1];
	struct {
		char offset[12];
		char numbytes[12];
	} sparse[4];
	char isextended[1];
	char realsize[12];
	char pad[17];
};
.Ed
.Bl -tag -width indent
.It Va шрифтовой флаг
GNU tar использует следующие специальные типы записей в дополнение к
определенные POSIX:
.Bl -tag -width indent
.It "7"
GNU tar обрабатывает записи типа «7» идентично записям типа «0»
за исключением одной малоизвестной ОСРВ, где они используются для обозначения
предварительное выделение непрерывного файла на диске.
.It "D"
Это указывает на запись каталога.
В отличие от стандарта POSIX «5»
шрифтовой флаг, за заголовком следуют записи данных, в которых перечислены имена
файлов в этом каталоге.
Каждому имени предшествует ASCII «Y».
если файл хранится в этом архиве или "N", если файл не хранится
хранится в этом архиве.
Каждое имя заканчивается нулем, и
дополнительный нуль отмечает конец списка имен.
Цель этого
запись предназначена для поддержки инкрементального резервного копирования; программа восстанавливающая из
такой архив может захотеть удалить файлы на диске, которых не существовало
в каталоге, в котором был создан архив.
.Pp
Обратите внимание, что флаг типа «D» явно нарушает POSIX, который требует
чтобы нераспознанные флаги типов были восстановлены как обычные файлы.
В этом случае восстановление записи «D» в виде файла может помешать
с последующим созданием одноименного каталога.
.It "K"
Данные для этой записи представляют собой длинное имя ссылки для следующей обычной записи.
.It "L"
Данные для этой записи представляют собой длинный путь к следующей обычной записи.
.It "M"
Это продолжение последнего файла предыдущего
тома.
Многотомные архивы GNU гарантируют, что каждый том начинается с действительного имени.
заголовок записи.
Для этого файл можно разделить, сохранив часть в конце одного тома.
и часть сохраняется в начале следующего тома.
Флаг типа «M» указывает, что эта запись продолжает существующий файл.
Такие записи могут встречаться только как первая или вторая запись.
в архиве (последнее только в том случае, если первая запись является меткой тома).
Поле 
.Va size
определяет размер этой записи.
Поле
.Va offset
в байтах 369–380 указывает смещение, где находится этот фрагмент файла.
Поле
.Va realsize
указывает общий размер файла (который должен быть равен
.Va size

плюс
.Va offset ) .
При извлечении GNU tar проверяет, соответствует ли имя файла заголовка тому, какое оно есть
ожидая, что смещение заголовка находится в правильной последовательности и что
сумма смещения и размера равна реальному размеру.
.It "N"
Записи типа «N» больше не генерируются GNU tar.
Они содержали
список файлов, которые необходимо переименовать или создать символическую ссылку после извлечения; это было
первоначально использовался для поддержки длинных имен.
Содержание этой записи
представляют собой текстовое описание операций, которые необходимо выполнить, в виде
.Dq Rename %s to %s\en
или
.Dq Symlink %s to %s\en ;
в любом случае оба
имена файлов экранируются с использованием синтаксиса K&R C.
Из соображений безопасности записи «N» теперь обычно игнорируются
при чтении архивов.
.It "S"
Это
.Dq редкий
обычный файл.
Разреженные файлы хранятся в виде серии фрагментов.
Заголовок содержит список пар смещения/длины фрагмента.
Если требуется более четырех таких записей, заголовок
продлевается по мере необходимости с
.Dq дополнительный
расширения заголовков (старый формат, который больше не используется) или
.Dq редкий
расширения.
.It "V"
Поле
.Va name
следует интерпретировать как имя заголовка ленты/тома.
Эту запись обычно следует игнорировать при извлечении.
.El
.It Va Магическое поле
Магическое поле содержит пять символов
.Dq ustar
за которыми следует пробел.
Обратите внимание, что архивы ustar POSIX имеют завершающий нуль.
.It Va version
Поле версии содержит пробел, за которым следует ноль.
Обратите внимание, что архивы ustar POSIX используют две копии цифры ASCII.
.Dq 0 .
.It Va atime , Va ctime
Время последнего доступа к файлу и время
последнего изменения информации о файле, хранящееся в восьмеричном формате, как и в случае
.Va время .
.It Va длинные имена
Это поле, видимо, больше не используется.
.It Sparse Va offset / Va numbytes
Каждая такая структура определяет один фрагмент разреженного
файл.
В этих двух полях значения хранятся в виде восьмеричных чисел.
Каждый фрагмент дополняется до размера, кратного 512 байтам
в архиве.
При извлечении список фрагментов собирается из файла
заголовок (включая любые заголовки расширений), а данные
затем читается и записывается в файл с соответствующими смещениями.
.It Va расширение
Если для этого параметра установлено значение, отличное от нуля, за заголовком будет следовать дополнительные
.Dq разделенные заголовоки
записи.
Каждая такая запись содержит информацию о 21 дополнительном
редкие блоки, как показано здесь:
.Bd -literal -offset indent
struct gnu_sparse_header {
	struct {
		char offset[12];
		char numbytes[12];
	} sparse[21];
	char    isextended[1];
	char    padding[7];
};
.Ed
.It Va реальный размер
Двоичное представление полного размера файла с гораздо большим диапазоном.
чем размер файла POSIX.
В частности, с
.Cm M
type-файлами, текущая запись представляет собой только часть файла.
В этом случае поле размера POSIX будет указывать размер этого файла.
вход; 
.Va реальный размер
В поле будет указан общий размер файла.
.El
.Ss GNU tar pax archives
GNU tar 1.14 (XXX проверьте этот XXX) и позже напишу
pax в формате обмена файлами при указании.
.Fl -posix
флага.
Этот формат точно соответствует формату обмена pax,
используя некоторые
.Cm SCHILY
теги и введение новых ключевых слов для хранения разреженной информации о файлах.
Было три версии поддержки разреженных файлов, называемых
как
.Dq 0.0 ,
.Dq 0.1 ,
и
.Dq 1.0 .
.Bl -tag -width indent
.It Cm GNU.sparse.numblocks , Cm GNU.sparse.offset , Cm GNU.sparse.numbytes , Cm  GNU.sparse.size
Формат
.Dq 0.0
использовал начальный
.Cm GNU.sparse.numblocks
атрибут для указания количества блоков в файле, пара
.Cm GNU.sparse.offset
и
.Cm GNU.sparse.numbytes
для указания смещения и размера каждого блока,
и один
.Cm GNU.sparse.size
чтобы указать полный размер файла.
Это не то же самое, что размер в заголовке tar, поскольку
последнее значение не включает размер каких-либо отверстий.
Этот формат требовал сохранения порядка атрибутов и
полагался на то, что читатели принимают несколько упоминаний одного и того же атрибута
имена, что официально не разрешено стандартами.
.It Cm GNU.sparse.map
Формат
.Dq 0.1
использовал один атрибут, в котором хранились разделенные запятыми
список десятичных чисел.
Каждая пара цифр обозначала смещение и размер соответственно.
блока данных.
Это не работает, если архив распакован архиватором.
который не распознает это расширение, поскольку многие реализации pax
просто отбросьте нераспознанные атрибуты.
.It Cm GNU.sparse.major , Cm GNU.sparse.minor , Cm GNU.sparse.name , Cm GNU.sparse.realsize
Формат
.Dq 1.0
хранит разреженную карту блоков в одном или нескольких блоках по 512 байт.
добавляется к данным файла в теле записи.
Атрибуты pax указывают на существование этой карты
(через
.Cm GNU.sparse.major
и
.Cm GNU.sparse.minor
поля)
и полный размер файла.
содержит
.Cm GNU.sparse.name
 истинное имя файла.
Во избежание путаницы имя хранится в обычном заголовке tar.
это измененное имя, чтобы ошибки извлечения были очевидны.
пользователям.
.El
.Ss Solaris Tar
XXX Требуется дополнительная информация XXX
.Pp
Solaris tar (начиная с SunOS XXX 5.7 ?? XXX) поддерживает
.Dq extended
формат, который принципиально похож на формат обмена pax,
со следующими отличиями:
.Bl -bullet -compact -width indent
.It
Расширенные атрибуты хранятся в записи типа
.Cm X ,
нет
.Cm x ,
как используется в формате обмена pax.
Подробный формат этой записи выглядит таким же
как подробно описано выше для
.Cm x
входа.
.It
Вдобавок
.Cm A
заголовок используется для хранения ACL для следующей обычной записи.
Тело этой записи содержит семизначное восьмеричное число.
за которым следует нулевой байт, за которым следует
текстовое описание ACL.
Восьмеричное значение — это количество записей ACL.
плюс константа, указывающая тип ACL: 01000000
для списков ACL POSIX.1e и 03000000 для списков ACL NFSv4.
.El
.Ss AIX Tar
XXX Требуется дополнительная информация XXX
.Pp
AIX Tar использует заголовок в формате ustar с типом
.Cm A
для хранения закодированной информации ACL.
В отличие от формата Solaris, tar AIX записывает этот заголовок после
обычное тело файла, к которому оно применяется.
Путь в этом заголовке либо
.Cm NFS4
или
.Cm AIXC
для указания типа сохраненного ACL.
Фактический список ACL хранится в двоичном формате, зависящем от платформы.
.Ss Mac OS X Tar
В tar, поставляемом с Mac OS X от Apple, хранится большинство обычных файлов
как два отдельных файла в tar-архиве.
Эти два файла имеют одинаковое имя, за исключением того, что первый
надо
.Dq ._
добавляется к последнему элементу пути.
В этом специальном файле хранится файл, закодированный AppleDouble.
двоичный объект с дополнительными метаданными о втором файле,
включая ACL, расширенные атрибуты и ресурсы.
Чтобы воссоздать исходный файл на диске, каждый
отдельный файл может быть извлечен и Mac OS X
.Fn copyfile
функцию можно использовать для распаковки отдельных
метаданных и примените его к обычному файлу.
И наоборот, та же функция обеспечивает
.Dq pack
возможность кодировать расширенные метаданные из
файл в отдельный файл, содержимое которого
затем можно поместить в tar-архив.
.Pp
Обратите внимание, что расширенные атрибуты Apple взаимодействуют
плохо с длинными именами файлов.
Поскольку каждый файл сохраняется под полным именем,
необходимо включить отдельный набор расширений
в архиве для каждого, удваивая накладные расходы
требуется для файлов с длинными именами.
.Ss Summary of tar type codes
Следующий список представляет собой сокращенное описание кодов типов
используется в записях заголовков tar, созданных различными реализациями tar.
Более подробную информацию о конкретных реализациях можно найти выше:
.Bl -tag -compact -width XXX
.It NUL
Ранние программы tar хранили нулевой байт для обычных файлов.
.It Cm 0
Код стандартного типа POSIX для обычного файла.
.It Cm 1
Код стандартного типа POSIX для описания жесткой ссылки.
.It Cm 2
Код стандартного типа POSIX для описания символической ссылки.
.It Cm 3
Код стандартного типа POSIX для узла символьного устройства.
.It Cm 4
Код стандартного типа POSIX для узла блочного устройства.
.It Cm 5
Код стандартного типа POSIX для каталога.
.It Cm 6
Стандартный код типа POSIX для FIFO.
.It Cm 7
POSIX зарезервирован.
.It Cm 7
GNU tar используется для предварительно выделенных файлов в некоторых системах.
.It Cm A
Описание Solaris tar ACL хранится перед обычным заголовком файла.
.It Cm A
Описание ACL tar AIX, хранящееся после тела файла.
.It Cm D
Дамп каталога tar GNU.
.It Cm K
Длинное имя ссылки GNU tar для следующего заголовка.
.It Cm L
Длинный путь GNU tar для следующего заголовка.
.It Cm M
Многотомный маркер GNU tar, указывающий, что файл является продолжением файла из предыдущего тома.
.It Cm N
Поддержка длинных имен файлов GNU tar.
Устарело.
.It Cm S
GNU tar разреженный обычный файл.
.It Cm V
Имя заголовка ленты/тома GNU tar.
.It Cm X
Заголовок расширения общего назначения Solaris tar.
.It Cm g
Глобальные расширения формата обмена POSIX pax.
.It Cm x
Расширения каждого файла в формате обмена POSIX pax.
.El
.Sh СМОТРИТЕ ТАКЖЕ
.Xr ar 1 ,
.Xr pax 1 ,
.Xr tar 1
.Sh СТАНДАРТЫ
Утилита 
.Nm tar
больше не является частью POSIX или единого стандарта Unix.
Последний раз оно появлялось в
.St -susv2 .
В последующих стандартах он был заменен на
.Xr pax 1 .
Формат ustar в настоящее время является частью спецификации
.Xr pax 1
утилиты.
Формат файла обмена pax является новым с
.St -p1003.1-2001 .
.Sh ИСТОРИЯ
Команда 
.Nm tar
появилась в седьмом издании Unix, выпущенном в январе 1979 года.
Он заменил
.Nm tp
программа из четвертого издания Unix, которая, в свою очередь, заменила
.Nm tap
программа из первого издания Unix.
Джона Гилмора
.Nm pdtar
внедрение общественного достояния (около 1987 г.) оказало большое влияние
и легли в основу
.Nm GNU tar
(около 1988 г.).
Йорг Шиллинг
.Nm star
archiver — еще один архиватор с открытым исходным кодом (CDDL) (первоначально разработанный
около 1985 г.), который обеспечивает полную поддержку обмена пассажирами.
формат.
.Pp
Эта документация была написана как часть
.Nm libarchive
и
.Nm bsdtar
проект
.An Tim Kientzle Aq kientzle@FreeBSD.org .
