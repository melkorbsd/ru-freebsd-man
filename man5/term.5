.\"***************************************************************************
.\" Copyright 2018-2019,2020 Thomas E. Dickey                                *
.\" Copyright 1998-2016,2017 Free Software Foundation, Inc.                  *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, to any person obtaining a  *
.\" copy of this software and associated documentation files (the            *
.\" "Software"), to deal in the Software without restriction, including      *
.\" without limitation the rights to use, copy, modify, merge, publish,      *
.\" distribute, distribute with modifications, sublicense, and/or sell       *
.\" copies of the Software, and to permit persons to whom the Software is    *
.\" furnished to do so, subject to the following conditions:                 *
.\"                                                                          *
.\" The above copyright notice and this permission notice shall be included  *
.\" in all copies or substantial portions of the Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained in this notice, the name(s) of the above copyright   *
.\" holders shall not be used in advertising or otherwise to promote the     *
.\" sale, use or other dealings in this Software without prior written       *
.\" authorization.                                                           *
.\"***************************************************************************
.\"
.\" $Id: term.5,v 1.38 2020/07/25 21:56:02 tom Exp $
.TH term 5
.ie \n(.g .ds `` \(lq
.el       .ds `` ``
.ie \n(.g .ds '' \(rq
.el       .ds '' ''
.de NS
.ie n  .sp
.el    .sp .5
.ie n  .in +4
.el    .in +2
.nf
.ft C			\" Courier
..
.de NE
.fi
.ft R
.ie n  .in -4
.el    .in -2
..
.de bP
.ie n  .IP \(bu 4
.el    .IP \(bu 2
..
.ds n 5
.ds d /usr/share/misc/terminfo
.SH ИМЯ
срок \- формат скомпилированного файла term.
.SH SYNOPSIS
.B term
.SH ОПИСАНИЕ
.SS МЕСТО ХРАНЕНИЯ
Скомпилированные описания terminfo помещаются в каталог \fB\*d\fP.
Поддерживаются две конфигурации (при построении библиотек \fBncurses\fP):
.TP 5
.B дерево каталогов
Двухуровневая схема используется для того, чтобы избежать линейного поиска
в огромном системном каталоге \s-1UNIX\s+1: \fB\*d/c/name\fP где
.I наименование
является названием терминала, и
.I c
является первым символом
.IR наименования .
Таким образом,
.I act4
можно найти в файле \fB\*d/a/act4\fP.
Синонимы для одного и того же терминала реализуются с помощью нескольких
ссылок на один и тот же скомпилированный файл.
.TP 5
.B хэшированная база данных
В базе данных Berkeley хранятся записи двух типов:
данные terminfo в том же формате, что и в дереве каталогов, с
основным именем terminfo в качестве ключа,
и записи, содержащие только псевдонимы, указывающие на основное имя.
.IP
Если создается для записи хэшированных баз данных,
\fBncurses\fP по-прежнему может считывать базы данных terminfo, организованные в виде дерева каталогов,
но не может записывать записи в дерево каталогов.
Он может записывать (или перезаписывать) записи в хэшированной базе данных.
.IP
\fBncurses\fP различает эти два случая в TERMINFO и TERMINFO_DIRS
переменная окружения, предполагающая дерево каталогов для записей,
соответствующих существующему каталогу,
и хэшированную базу данных в противном случае.
.SS УСТАРЕВШИЙ ФОРМАТ ХРАНЕНИЯ
Формат был выбран таким образом, чтобы он был одинаковым для всего оборудования.
Предполагается, что размер байта составляет 8 или более бит, но не делается никаких предположений относительно порядка байтов
или расширения знака.
.PP
Скомпилированный файл создается с помощью программы \fBtic\fP ,
и читается по заведенному порядку \fBsetupterm\fP(3X).
Файл разделен на шесть частей:
.RS 5
.TP 3
a) \fIheader\fP,
.TP 3
b) \fIterminal names\fP,
.TP 3
c) \fIboolean flags\fP,
.TP 3
d) \fInumbers\fP,
.TP 3
e) \fIstrings\fP, and
.TP 3
f) \fIstring table\fP.
.RE
.PP
Раздел \fIheader\fP начинает файл.
Этот раздел содержит шесть коротких целых чисел в формате
, описанном ниже.
Эти целые числа являются
.RS 5
.TP 5
(1) \fImagic number\fP (octal 0432);
.TP 5
(2) размер файла в байтах \fIterminal names\fP раздела;
.TP 5
(3) количество байт в файле \fIboolean flags\fP раздела;
.TP 5
(4) количество коротких целых чисел в разделе \fInumbers\fP ;
.TP 5
(5) количество смещений (коротких целых чисел) в разделе \fIstrings\fP ;
.TP 5
(6) размер файла в байтах раздела \fIstring table\fP.
.RE
.PP
Возможности в разделах
\fIboolean flags\fP,
\fInumbers\fP, и разделе
\fIstrings\fP
находятся в том же порядке, что и файл <term.h>.
.PP
Короткие целые числа обозначаются знаком в диапазоне \-32768 to 32767.
Они хранятся в виде двух 8-разрядных байтов.
Первый байт содержит 8 младших битов значения,
а второй байт содержит 8 старших битов.
(Таким образом, представленное значение равно 256*второй+первый.)
Этот формат соответствует аппаратному обеспечению устройства. \s-1VAX\s+1
и \s-1PDP\s+1-11 (то есть, машины с малым числом последовательностей).
Машины, где это не соответствует аппаратному обеспечению, должны считывать
целые числа в виде двух байт и вычислять значение в порядке убывания.
.PP
Номера в описании терминала,
независимо от того, являются ли они записями в \fInumbers\fP или \fIstrings\fP таблице,
являются положительными целыми числами.
Логические флаги обрабатываются как положительные однобайтовые целые числа.
В каждом случае эти положительные целые числа представляют возможность терминала.
Tic компилятора терминала использует отрицательные целые числа для обработки случаев, когда
возможность недоступна:
.bP
Если в этом терминале отсутствует какая-либо возможность,
tic сохраняет \-1 в соответствующей таблице.
.IP
Целочисленное значение \-1 представлен двумя байтами 0377, 0377.
.br
Отсутствующие логические значения представлены байтом 0 (ложь).
.bP
Если функция была отменена на этом терминале,
tic сохраняет значение \-2 в соответствующей таблице.
.IP
Целое значение \-2 представлено двумя байтами 0377, 0376.
.br
Логическое значение \-2 представлено байтом 0376.
.br
.bP
Другие отрицательные значения недопустимы.
.PP
Раздел \fIterminal names\fP идет после раздела \fIheader\fP.
Он содержит первую строку описания terminfo,
в которой перечислены различные названия терминала,
разделенные параметрами \*(``|\*('' .
Раздел \fIterminal names\fP завершается 
символом \s-1ASCII NUL\s+1 .
.PP
Раздел \fIboolean flags\fP имеет один байт для каждого флага.
Логические возможности равны 1 или 0 (true или false)
в зависимости от того, поддерживает ли терминал данную возможность или нет.
.PP
Между разделом \fIboolean flags\fP и раделом cessary,
чтобы гарантировать, что раздел  \fInumber\fP начинается с четного байта
Это пережиток архитектуры PDP\-11'с адресацией по словам,
изначально разработанной для предотвращения ошибок, возникающих
при адресации слова на границе нечетного байта.
Все короткие целые числа выравниваются по границе короткого слова.
.PP
Раздел \fInumbers\fP похож на раздел \fIboolean flags\fP .
Каждая функция занимает два байта
и хранится в виде короткого целого числа, начинающегося с запятой.
.PP
Раздел \fIstrings\fP тоже похож.
Каждая способность сохраняется в виде короткого целого числа.
Значение способности является индексом в \fIstring table\fP.
.PP
Раздел \fIstring table\fP является последним.
Он содержит все значения строковых возможностей, 
на которые ссылаются в раздел \fIstrings\fP .
Он содержит все значения string, каждая строка заканчивается нулем.
Специальные символы в ^X или возможности, на которые ссылаются в
 \ec обозначения сохраняются в их
интерпретируемой форме, а не в печатном виде.
Информация о дополнении $<nn> и информация о параметрах %x
сохраняются в неизменном виде в неинтерпретированном виде.
.SS РАСШИРЕННЫЙ ФОРМАТ ХРАНЕНИЯ ДАННЫХ
В предыдущем разделе описан обычный двоичный формат terminfo.
С некоторыми незначительными изменениями в смещениях (см. раздел "ПЕРЕНОСИМОСТЬ"),
один и тот же двоичный формат используется во всех современных системах UNIX..
Каждая система использует предопределенный набор логических, числовых или строковых функций.
.PP
Библиотеки \fBncurses\fP приложения поддерживают
расширенный двоичный формат terminfo,
позволяющий пользователям определять возможности, которые загружаются во время выполнения.
Это
расширение стало возможным благодаря тому, что другие реализации
прекращают чтение данных terminfo, когда они достигают конечного размера, указанного
в заголовке.
\fBncurses\fP проверяет размер,
и если оно превышает это значение из-за предопределенных данных,
продолжает разбор по своей собственной схеме.
.PP
Сначала он считывает расширенный заголовок (5 коротких целых чисел).:
.RS 5
.TP 5
(1)
количество расширенных логических возможностей
.TP 5
(2)
количество расширенных числовых возможностей
.TP 5
(3)
количество расширенных возможностей построения строк
.TP 5
(4)
количество элементов в расширенной таблице строк
.TP 5
(5)
размер расширенной таблицы строк в байтах
.RE
.PP
Параметры count- и size-values для расширенной таблицы строк
включите расширенную возможность \fInames\fP а также
расширенные возможности \fIvalues\fP.
.PP
Используя количество и размеры, \fBncurses\fP выделяет массивы и считывает данные
для расширенных возможностей в том же порядке, что и информация заголовка.
.PP
Таблица расширенных строк содержит значения для возможностей string.
После окончания этих значений в ней содержатся имена для каждой из
расширенных возможностей по порядку, например, логические значения, затем числа и, 
наконец, строки.
.PP
Приложения, которые манипулируют данными терминала, могут использовать определения, описанные в \fBterm_variables\fP(3X) которые связывают длинные
имена возможностей с членами структуры \fBTERMTYPE\fP .
.
.SS РАСШИРЕННЫЙ ФОРМАТ НОМЕРА
.PP
Иногда 16-разрядные целые числа со знаком недостаточно велики.
С \fBncurses\fP 6.1, новый формат был введен путем внесения нескольких изменений
в устаревший формат:
.bP
другое магическое число (восьмеричное 01036)
.bP
изменение типа массива \fInumber\fP со знаковых 16-разрядных целых
чисел на знаковые 32-разрядные целые числа.
.PP
Для обеспечения совместимости библиотека предоставляет
непосредственным пользователям структуры \fBTERMTYPE\fP те же структуры данных, что и в предыдущих форматах.
Однако это не позволяет предоставлять абонентам расширенные номера.
Библиотека использует аналогичную, но скрытую структуру данных \fBTERMTYPE2\fP
для предоставления данных для функций terminfo.
.SH МОБИЛЬНОСТЬ
.SS setupterm
.PP
Обратите внимание, что это возможно для
.B setupterm
ожидать, что набор возможностей
будет отличаться от того, который на самом деле присутствует в файле.
Либо база данных могла быть обновлена с тех пор, как
.B setupterm
была перекомпилирована
(что привело к появлению дополнительных нераспознанных записей в файле)
или программа могла быть перекомпилирована
позже обновления базы
данных (что привело к отсутствию записей).
Процедура
.B setupterm
необходимо быть готовым к обеим возможностям \-
вот почему указаны номера и размеры.
Кроме того, новые возможности всегда должны добавляться в конце списков
логических, числовых и строковых возможностей.
.SS Двоичный формат
.PP
X/Open Curses не указан формат базы данных terminfo.
В UNIX System V curses использовалось дерево каталогов двоичных файлов,
по одному на описание терминала.
.PP
Несмотря на последовательное использование литтл-эндиана для чисел и в остальном
самоописывающийся формат, неразумно рассчитывать на переносимость двоичных записей
terminfo между коммерческими версиями UNIX.
Проблема в том, что существует
по крайней мере три версии terminfo (под HP\-UX, AIX и OSF/1), которые
отличаются от System V terminfo после SVr1 и добавили
возможности расширения в таблицу строк, которые (в двоичном формате) противоречат
Расширения System V и XSI Curses.
См. раздел \fBterminfo\fR(\*n) для подробного
обсуждения проблем совместимости исходных текстов terminfo.
.PP
Эта реализация по умолчанию совместима с двоичным
форматом terminfo, используемым Solaris curses,
за исключением нескольких менее используемых деталей, в которых было обнаружено, что последний не соответствует X/Open Curses.
Формат, используемый в других версиях Unix, может быть согласован путем создания ncurses
с различными параметрами конфигурации.
.SS Магические коды
.PP
Магическим числом в двоичном файле terminfo являются первые 16 бит (два байта).
Помимо повышения надежности проверки библиотекой того, что файл
является terminfo,
такие утилиты, как \fBfile\fP также используйте это, чтобы определить формат файла.
System V определила более одного магического числа,
с 0433, 0435 в качестве дампов экрана (см. \fBscr_dump\fP(5)).
Эта реализация использует 01036 как продолжение этой последовательности,
но с другим старшим байтом, чтобы избежать путаницы.
.SS Структура TERMTYPE
.PP
Для устаревших приложений предусмотрен прямой доступ к структуре \fBTERMTYPE\fP.
Портативные приложения должны использовать \fBtigetflag\fP и связанные с ним функции, описанные в \fBcurs_terminfo\fP(3X) для чтения возможностей терминала.
.SS Названия терминалов со смешанным регистром
.PP
В названиях небольшого числа терминалов используются заглавные буквы.
Если базовая файловая система игнорирует разницу между
прописными и строчными буквами,
\fBncurses\fP представляет собой \*(``первый параметр\*(''
от имени терминала, используемого в качестве
промежуточный уровень дерева каталогов в (двухсимвольной) шестнадцатеричной форме.
.SH ПРИМЕР
В качестве примера, вот описание для Lear-Siegler
ADM\-3, популярный, хотя и довольно глупый ранний терминал:
.NS
adm3a|lsi adm3a,
        am,
        cols#80, lines#24,
        bel=^G, clear=\032$<1>, cr=^M, cub1=^H, cud1=^J,
        cuf1=^L, cup=\\E=%p1%{32}%+%c%p2%{32}%+%c, cuu1=^K,
        home=^^, ind=^J,
.NS
.PP
and a hexadecimal dump of the compiled terminal description:
.NS
.ft CW
\s-20000  1a 01 10 00 02 00 03 00  82 00 31 00 61 64 6d 33  ........ ..1.adm3
0010  61 7c 6c 73 69 20 61 64  6d 33 61 00 00 01 50 00  a|lsi ad m3a...P.
0020  ff ff 18 00 ff ff 00 00  02 00 ff ff ff ff 04 00  ........ ........
0030  ff ff ff ff ff ff ff ff  0a 00 25 00 27 00 ff ff  ........ ..%.'...
0040  29 00 ff ff ff ff 2b 00  ff ff 2d 00 ff ff ff ff  ).....+. ..-.....
0050  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
0060  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
0070  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
0080  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
0090  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
00a0  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
00b0  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
00c0  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
00d0  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
00e0  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
00f0  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
0100  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
0110  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
0120  ff ff ff ff ff ff 2f 00  07 00 0d 00 1a 24 3c 31  ....../. .....$<1
0130  3e 00 1b 3d 25 70 31 25  7b 33 32 7d 25 2b 25 63  >..=%p1% {32}%+%c
0140  25 70 32 25 7b 33 32 7d  25 2b 25 63 00 0a 00 1e  %p2%{32} %+%c....
0150  00 08 00 0c 00 0b 00 0a  00                       ........ .\s+2
.ft R
.NE
.sp
.SH ОГРАНИЧЕНИЯ
Некоторые ограничения:
.bP
общее количество скомпилированных записей не может превышать 4096 байт в устаревшем формате.
.bP
общее количество скомпилированных записей не может превышать 32768 байт в расширенном формате.
.bP
размер поля "имя" не может превышать 128 байт.
.PP
Размер скомпилированных записей ограничен 32768 байтами, поскольку для смещений в
таблице \fIstrings\fP используются двухбайтовые целые числа.
Устаревший формат мог поддерживать записи размером 32768 байт,
но был ограничен объемом страницы виртуальной памяти в 4096 байт.
.SH ФАЙЛЫ
\*d/*/*	составленная база данных о возможностях терминала
.SH СМ. ТАКЖЕ
\fBcurses\fR(3X), \fBterminfo\fR(\*n).
.SH АВТОРЫ
Thomas E. Dickey
.br
расширенный формат terminfo для ncurses 5.0
.br
поддержка хэшированной базы данных для ncurses 5.6
.br
расширенная поддержка номеров для ncurses 6.1
.sp
Eric S. Raymond
.br
документированный устаревший формат terminfo, например, из pcurses.