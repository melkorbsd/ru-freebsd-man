'\" t
.\" DO NOT EDIT THIS FILE BY HAND!
.\" It is generated from terminfo.head,  /usr/src/contrib/ncurses/include/Caps, and terminfo.tail.
.\"
.\" Note: this must be run through tbl before nroff.
.\" The magic cookie on the first line triggers this under some man programs.
.\"***************************************************************************
.\" Copyright 2018-2019,2020 Thomas E. Dickey                                *
.\" Copyright 1998-2016,2017 Free Software Foundation, Inc.                  *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, to any person obtaining a  *
.\" copy of this software and associated documentation files (the            *
.\" "Software"), to deal in the Software without restriction, including      *
.\" without limitation the rights to use, copy, modify, merge, publish,      *
.\" distribute, distribute with modifications, sublicense, and/or sell       *
.\" copies of the Software, and to permit persons to whom the Software is    *
.\" furnished to do so, subject to the following conditions:                 *
.\"                                                                          *
.\" The above copyright notice and this permission notice shall be included  *
.\" in all copies or substantial portions of the Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained in this notice, the name(s) of the above copyright   *
.\" holders shall not be used in advertising or otherwise to promote the     *
.\" sale, use or other dealings in this Software without prior written       *
.\" authorization.                                                           *
.\"***************************************************************************
.\"
.\" $Id: terminfo.head,v 1.39 2020/02/02 23:34:34 tom Exp $
.TH terminfo 5 "" "" "File Formats"
.ds n 5
.ds d /usr/share/misc/terminfo
.ie \n(.g .ds `` \(lq
.el       .ds `` ``
.ie \n(.g .ds '' \(rq
.el       .ds '' ''
.de bP
.ie n  .IP \(bu 4
.el    .IP \(bu 2
..
.de NS
.ie n  .sp
.el    .sp .5
.ie n  .in +4
.el    .in +2
.nf
.ft C			\" Courier
..
.de NE
.fi
.ft R
.ie n  .in -4
.el    .in -2
..
.SH ИМЯ
terminfo \- terminal capability data base
.SH КРАТКИЙ ОБЗОР
\*d/*/*
.SH ОПИСАНИЕ
.I Terminfo
это база данных, описывающая терминалы,
используемые экранно-ориентированными программами, такими как
\fBnvi\fR(1),
\fBlynx\fR(1),
\fBmutt\fR(1),
и другие приложения curses,
использующие высокоуровневые вызовы таких библиотек, как \fBcurses\fR(3X).
Он также используется с помощью низкоуровневых вызовов приложениями, не использующими curses
которые могут быть ориентированы на экран (such as \fBclear\fP(1))
или без экрана (such as \fBtabs\fP(1)).
.PP
.I Terminfo
описывает терминалы, предоставляя набор возможностей, которыми они
обладают, указывая, как выполнять операции с экраном, а
также требования к заполнению и последовательности инициализации.
.PP
В этом руководстве описывается \fBncurses\fR
версия 6.2 (patch 20210220).
.SS Синтаксис ввода Terminfo
.PP
Entries in
.I terminfo
состоит из последовательности полей:
.bP
Каждое поле заканчивается запятой \*(``,\*('' 
(встроенные запятые могут быть
экранируется обратной косой чертой или записывается как \*(``\\054\*('').
.bP
Пробелы между полями игнорируются.
.bP
Первое поле в \fIterminfo\fP запись начинается с первой колонки.
.bP
Новые строки и начальные пробелы (пробелы или знаки табуляции)
может использоваться для форматирования записей для удобства чтения.
Они удаляются из проанализированных записей.
.IP
The \fBinfocmp\fP \fB\-f\fP and \fB\-W\fP параметры зависят от этого для
форматирования if-then-else выражения,
или для обеспечения максимального line-width.
Полученное в результате отформатированное описание терминала может быть прочитано \fBtic\fP.
.bP
В первом поле для каждого терминала указаны имена, которые известны для данного
терминала, разделенные символом \*(``|\*('' иероглифом.
.IP
Первое приведенное название является наиболее распространенной аббревиатурой терминала
(его основное название),
указанное последнее имя должно быть длинным, полностью идентифицирующим терминал
(see \fBlongname\fP(3X)),
а все остальные рассматриваются как синонимы (псевдонимы) основного имени терминала.
.IP
X/Open Curses рекомендует, чтобы все имена, кроме последнего, были написаны строчными
буквами и не содержали пробелов;
фамилия вполне может содержать заглавные буквы и пробелы для удобства чтения.
.IP
Эта реализация не столь строга;
это позволяет использовать смешанный регистр в основном имени и псевдонимах.
Если в фамилии нет встроенных пробелов,
это позволяет использовать это как псевдоним, так и подробное имя
(но предупреждает об этой двусмысленности).
.bP
Строки, начинающиеся с буквы \*(``#\*('' в первом столбце они рассматриваются как комментарии.
.IP
в первом столбце они рассматриваются как комментарии \fBcaptoinfo\fP
и \fBinfotocap\fP (aliases for \fBtic\fP)
переместит комментарии таким образом, чтобы они появлялись только между записями.
.PP
Названия терминалов (за исключением последней, подробной записи) должны
быть выбранным с использованием следующих условных обозначений.
Конкретная аппаратная часть, составляющая терминал, должна
имеют корневое имя, таким образом \*(``hp2621\*(''.
Это имя не должно содержать дефисов.
Режимы, в которых может работать оборудование, или предпочтения пользователя должны
может быть обозначен добавлением дефиса и суффикса режима.
Таким образом, vt100 в 132-column режим был бы следующим vt100\-w.
По возможности следует использовать следующие суффиксы:
.PP
.TS
центр ;
l c l
l l l.
\Суффикс fBSuffix	Пример Значения\fP
\-\fInn\fP	Количество строк на экране	aaa\-60
\-\fIn\fPp	Количество страниц в памяти	c100\-4p
\-am	С автоматическими параметрами (обычно по умолчанию)	vt100\-am
\-m	Монорежим; подавление цветаИ      	ansi\-m
\-mc	Волшебное печенье; пробелы при выделении	wy30\-mc
\-na	Нет клавиш со стрелками (оставьте их локальными)	c100\-na
\-nam	Без автоматических полей      	vt100\-nam
\-nl	Нет строки состояния                  	att4415\-nl
\-ns	Нет строки состояния                  	hp2626\-ns
\-rv	Обратное видео                   	c100\-rv
\-s	Включить строку состояния              	vt100\-s
\-vb	Используйте видимый звонок вместо звукового сигнала	wy370\-vb
\-w	Широкий режим (> 80 columns, usually 132)	vt100\-w
.TE
.PP
Дополнительные сведения о соглашениях об именовании терминалов см. в разделе \fBterm\fP(7) страница руководства.
.SS Синтаксис возможностей Terminfo
.PP
Запись terminfo состоит из нескольких \fIcapabilities\fP,
то есть, функции, которыми обладает терминал,
или способы использования функций терминала.
.PP
После первого поля (с указанием имени(ен) терминальной записи),
там должен быть один или несколько \fIcapability\fP поля.
Это логические, числовые или строковые имена с соответствующими значениями:
.bP
Логические возможности имеют значение true, когда они присутствуют, и false, когда отсутствуют.
Явного значения для логических возможностей не существует.
.bP
Числовые возможности обладают \*(``#\*('' после названия,
затем десятичное целое значение без знака.
.bP
Возможности String обладают \*(``=\*('' после названия,
затем строка символов, составляющих значение возможности.
.IP
Возможности строк могут быть разделены на несколько строк,
точно так же, как поля, содержащие терминальную запись, могут быть
разделены на несколько строк.
В то время как пробелы между полями игнорируются,
пробелы, вставленные в строковое значение, сохраняются,
за исключением начальных пробелов в строке.
.PP
Любая возможность может быть \fIcanceled\fP,
то есть, заблокирован от входа в терминал,
следуя за его названием с помощью \*(``@\*(''
вместо значения способности.
.SS Похожие терминалы
.PP
Если есть два очень похожих терминала, то один (вариант) может быть определен как
точно такой же, как другой (базовый), за некоторыми исключениями.
В
определение варианта, возможность использования строки \fBuse\fR может быть указано вместе с
названием базового терминала:
.bP
Возможности, предоставленные ранее
.B использовать
переопределите те, которые относятся к базовому типу, названному
.BR использовать .
.bP
Если имеется несколько \fBuse\fR возможности, они объединяются в обратном порядке.
То есть крайний правый \fBuse\fR сначала обрабатывается ссылка, затем та
, что находится слева от нее, и так далее.
.bP
CВозможности, явно
указанные в записи, переопределяют возможности, предоставляемые \fBuse\fR Рекомендации.
.PP
Возможность может быть отменена путем размещения \fBxx@\fR слева от
ссылки use, которая импортирует его, где \fIxx\fP является возможностью.
Например, запись
.RS
.PP
2621\-nl, smkx@, rmkx@, use=2621,
.RE
.PP
определяет 2621\-nl который не обладает \fBsmkx\fR or \fBrmkx\fR возможности,
и, следовательно, не включает ярлыки функциональных клавиш в визуальном режиме.
Это полезно для различных режимов работы терминала или для различных
пользовательских предпочтений.
.PP
Запись, включенная через \fBuse\fP может содержать отмененные возможности,
которые имеют тот же эффект, как если бы эти отмены были встроены в запись
using terminal.
.SS Предопределенные возможности
.\" Главная страница руководства terminfo заканчивается здесь
.ps -1
Ниже приведена полная таблица возможностей, включенных в
блок описания terminfo и доступных коду, использующему terminfo. В каждой
строке таблицы,

То \fBvariable\fR это имя, под которым программист (на уровне terminfo)
получает доступ к возможности.


То \fBcapname\fR это краткое название, используемое в тексте базы данных
и используемое лицом, обновляющим базу данных.
По возможности, заглавные имена выбираются такими же или похожими на ANSI X3.64-1979 стандарт (в настоящее время заменен ECMA-48, в котором используются
идентичные или очень похожие названия). Семантика также должна соответствовать
спецификации.

Код termcap - это старый
.B termcap
название возможности (некоторые возможности являются новыми и имеют названия, которые
не были созданы в termcap).
.P
Для названий функций нет жестких ограничений по длине, но было введено неофициальное ограничение в 5
символов, чтобы они были короткими и позволяли использовать табуляцию в
исходном файле
.B Caps
чтобы красиво выстроиться в линию.

Наконец, поле "Описание" пытается передать семантику
возможности. В поле "Описание" вы можете найти некоторые коды:
.TP
(P)
указывает, что может быть указано заполнение 
.TP
#[1-9]
в поле описания указывается, что строка передается 
через \fBtparm\fP(3X) с заданными параметрами (#\fIi\fP).
.IP
Если в описании не указаны параметры, 
передача строки через \fBtparm\fP(3X) может привести к неожиданным результатам, 
например, если она содержит знаки процента (%%).
.TP 
(P*)
указывает, что заполнение может изменяться пропорционально количеству 
затронутых строк 
.TP
(#\d\fIi \fP \u)
указывает параметр \fIi\fP \ uth \d.

.PP
Это логические возможности:

.na 
.TS H 
центр;
c l l c 
c l l c 
lw25 lw7 lw2 lw20.
\fbпеременный колпачок- Описание TCap \fR
\Код имени fBBooleans\fR 
auto_left_margin bw bw T{ 
cub1 переносит из столбца 0 в последний столбец
T} 
auto_right_margin am am T{ 
у терминала есть автоматические поля
T} 
back_color_erase bce ut T{ 
экран со стертым цветом фона
T} 
can_change ccc cc T{ 
терминал может переопределять существующие цвета
T} 
ceol_standout_glitch xhp xs T{
выделение, не удаляемое при перезаписи (hp)
T} 
col_addr_glitch xhpa YA T{ 
только положительное движение для заглушек hpa / mhpa
T} 
cpi_changes_res cpix YF T{ 
изменение высоты тона символа изменяет разрешение
T} 
cr_cancels_micro_mode crxm YB T{ 
использование cr отключает микрорежим
T} 
dest_tabs_magic_smso xt xt T{ 
разрушительные вкладки, magic so символ (t1061)
T} 
eat_newline_glitch xenl xn T{ 
перевод строки игнорируется после 80 столбцов (концепция)
T} 
erase_overstrike eo eo T{ 
можно стирать зачеркивания пробелом
T} 
generic_type gn gn T{ 
общий тип строки
T} 
hard_copy hc hc T{ 
терминал для копирования на бумажном носителе
T} 
hard_cursor chts HC T{ 
курсор плохо виден
T} 
has_meta_key km km T{
Имеет мета-ключ (т.е. Устанавливает 8-й бит)
T} 
has_print_wheel daisy YCT{ 
принтеру требуется оператор для изменения набора символов
T} 
имеет строку состояния hs hs T{ 
имеет дополнительную строку состояния
T} 
hue_lightness_saturation hls hl T{ 
терминал использует только цветовую нотацию HLS (Tektronix)
T} 
insert_null_glitch в in T{ 
режим вставки различает нули
T} 
lpi_changes_res lpix YG T{ 
изменение высоты тона строки изменяет разрешение
T} 
memory_above da da T{ 
дисплей может быть сохранен над экраном
T} 
memory_below db db T{ 
дисплей может быть сохранен под экраном
T} 
move_insert_mode mir mi T{ 
безопасно перемещать в режиме вставки
T}
move_standout_mode msgr ms T{ 
безопасно перемещать в режиме ожидания
T} 
needs_xon_xoff nxon nx T{ 
заполнение не будет работать, требуется xon / xoff
T} 
no_esc_ctlc xsb xb T{ 
улей (f1= escape, f2=ctrl C)
T} 
no_pad_char npc NP T{ 
символ pad не существует
T} 
non_dest_scroll_region ndscr ND T{ 
область прокрутки неразрушающая
T} 
non_rev_rmcup nrrmc NR T{ 
smcup не отменяет rmcup
T} 
over_strike os os T{ 
терминал может перезапустить
T} 
prtr_silent mc5i 5i T{ 
принтер не будет отображать эхо-сигнал на экране
T} 
row_addr_glitch xvpa YD T{ 
только положительное движение для заглушек vpa / mvpa
T} 
semi_auto_right_margin сам Е Т{ 
печать в последнем столбце приводит к возврату
T} 
status_line_esc_ok eslok es T{ 
в строке состояния можно использовать escape
T} 
tilde_glitch hz hz T{ 
невозможно напечатать ~'s (Hazeltine)
T} 
transparent_underline ul ul T{ 
подчеркивание символов через зачеркивания
T} 
xon_xoff xon xo T{ 
терминал использует рукопожатие xon / xoff
T}
.TE
.ad

Это числовые возможности:

.na 
.TS H 
центр;
c l l c 
c l l c 
lw25 lw7 lw2 lw20.
\Fbпеременный колпачок- Описание TCap \fR
\fBNumeric name Code \fR 
столбцы cols co T{ 
количество столбцов в строке
T} 
init_tabs it it T{ 
табуляции изначально через # пробелы
T} 
label_height lh lh T{ 
строки в каждой метке 
T}
label_width lw lw T{
столбцы в каждой метке
T} 
lines lines li T{ 
количество строк на экране или странице
T} 
lines_of_memory lm lm T{
строки памяти, если > строка. 0 означает, что изменяется
T} 
magic_cookie_glitch xmc sg T{ 
количество пустых символов, оставленных sms-сообщением или rmso
T} 
max_attributes ma ma T{
максимальное количество комбинированных атрибутов, которые может обработать терминал
T} 
max_colors colors Co T{ 
максимальное количество цветов на экране
T} 
max_pairs pairs pa T{
максимальное количество цветовых пар на экране
T} 
maximum_windows wnum MW T{
максимальное количество определяемых окон
T} 
no_color_video ncv NC T{
атрибуты видео, которые нельзя использовать с цветами
T} 
num_labels nlab Nl T{ 
количество меток на экране
T} 
padding_baud_rate pb pb T{ 
самая низкая скорость передачи данных в бодах там, где требуется дополнение
T} 
virtual_terminal vt vt T{ 
номер виртуального терминала (CB / unix)
T} 
width_status_line wsl ws T{ 
количество столбцов в строке состояния
T}
.TE
.ad

Следующие цифровые возможности присутствуют в структуре терминов SVr4.0, 
но еще не задокументированы на странице руководства. Они поставляются с SVr4. 
поддержка принтеров.

.na 
.TS H 
центр;
c l l c 
c l l c 
lw25 lw7 lw2 lw20.
\Fbпеременный колпачок- Описание TCap \fR
\fBNumeric name Code \fR 
bit_image_entwining bitwin Yo T{
количество проходов для каждой строки битового изображения
T} 
bit_image_type битовый тип Yp T{ 
тип устройства битового изображения
T} 
buffer_capacity bufsz Ya T{ 
количество байт, буферизованных перед печатью
T} 
кнопки btns BT T {
количество кнопок на мыши
T} 
dot_horz_spacing spinh Yc T{ 
расстояние между точками по горизонтали в точках на дюйм
T} 
dot_vert_spacing spinv Yb T{ 
расстояние между выводами по вертикали в выводах на дюйм
T} 
max_micro_address maddr Yd T{
максимальное значение в micro_..._address
T} 
max_micro_jump mjump Ye T{
максимальное значение в parm_..._micro
T} 
micro_col_size mcs Yf T{ 
размер шага символа в микрорежиме
T} 
micro_line_size mls Yg T{ 
размер шага строки в микрорежиме
T} 
number_of_pins npins Yh T{ 
количество выводов в печатающей головке
T} 
output_res_char orc Yi T{
разрешение по горизонтали в единицах измерения на строку
T} 
output_res_horz_inch orhi Yk T{ 
разрешение по горизонтали в единицах на дюйм
T} 
output_res_line orl Yj T{
разрешение по вертикали в единицах на строку
T} 
output_res_vert_inch orvi Yl T{
разрешение по вертикали в единицах измерения на дюйм
T} 
скорость печати cps Ym T{ 
скорость печати в символах в секунду
T} 
wide_char_size widcs Yn T{ 
размер шага символа в режиме двойного расширения
T}
.TE
.ad

Это возможности string:

.na 
.TS H 
центр;
c l l c 
c l l c
лв25, лв7, лв2, лв20.
\Fbпеременный Cap- Описание TCap \fR 
\Код имени fBString\fR 
acs_chars acsc ac T{ 
пары графических кодировок на основе vt100
T} 
обратная вкладка cbt bt T{ 
обратная вкладка (P)
T} 
звонок bel bl T{ 
звуковой сигнал (звонок) (P)
T} 
carriage_return cr cr T{ 
возврат каретки (P *) (P *)
T} 
change char_pitch cpi ZA T{
Измените количество символов на дюйм на # 1
T} 
change_line_pitch lpi ZB T{
Измените количество линий на дюйм на # 1
T} 
change_reshorz chr ZC T{
Измените разрешение по горизонтали на # 1
T} 
change_res_vert cvr ZD T{
Измените разрешение по вертикали на # 1
T} 
change_scroll_region csr cs T{ 
измените регион со строки # 1 на строку # 2 (P)
T} 
char_padding rmp rP T{
как ip, но в режиме вставки
T} 
clear_all_tabs tbc ct T{ 
очистить все табуляции (P)
T} 
clear_margins mgc MC T{ 
очистить правое и левое мягкие поля
T} 
clear_screen очистить cl T{ 
очистить экран и курсор "Домой" (P *)
T} 
clr_bol el1 cb T{
Очистить до начала строки
T} 
clr_eol el ce T{ 
очистить до конца строки (P)
T} 
clr_eos отредактировал cd T{ 
очистить до конца экрана (P *)
T} 
адрес столбца hpa ch T{ 
горизонтальное положение # 1, абсолютное (P)
T} 
command_character cmdch CC T{ 
настраиваемый терминалом символ cmd в прототипе !?
T}
create_window cwin CW T{
определите окно # 1 с # 2, # 3 по # 4, # 5
T} 
cursor_address cup cm T{ 
переместите в строку # 1 столбцы # 2
T} 
cursor_down cud1 do T{ 
вниз на одну строку
T} 
cursor_home home ho T{ 
домашний курсор (если нет cup)
T} 
cursor_invisible civis vi T{ 
сделать курсор невидимым
T} 
cursor_left cub1 le T{ 
переместить влево на один пробел
T} 
cursor_mem_address mrcup CM T{
относительная адресация курсора в памяти, переход к строке #1, столбцам #2
T} 
cursor_normal cnorm ve T{ 
придать курсору нормальный вид (отменить civis / cvvis)
T} 
cursor_right cuf1 и T{ 
неразрушающий пробел (переместить вправо на один пробел)
T} 
cursor_to_ll ll ll T{
последняя строка, первый столбец (если нет cup)
T} 
cursor_up cuu1 up T{ 
вверх на одну строку
T} 
cursor_visible cvvis vs T{ 
сделать курсор очень заметным
T} 
define_char defc ZE T{
Определите символ #1, шириной # 2 точки, спуском #3
T} 
удалить символ dch1 dc T{ 
удалить символ (P*)
T} 
удалить строку dl1 dl T{ 
удалить строку (P*)
T} 
dial_phone наберите DI T{ 
наберите номер # 1
T} 
dis_status_line dsl ds T{ 
отключить строку состояния
T} 
display_clock dclk DK T{ 
часы дисплея
T} 
down_half_line hd hd T{ 
на полстроки ниже
T} 
ena_acs активирует eA T{ 
включить альтернативный набор символов
T} 
введите alt_charset_mode smacs как T{ 
запустите альтернативный набор символов (P)
T} 
введите параметр_am_mode smam SA T{ 
включите автоматические поля
T}
enter_blink_mode blink mb T{ 
включить мигание
T} 
enter_bold_mode bold md T{ 
включить режим жирного (особо яркого) выделения
T} 
введите_ca_mode smcup ti T{ 
строку для запуска программ с помощью cup
T} 
введите_delete_mode smdc dm T{ 
войдите в режим удаления
T} 
введите dim-режим dim mh T{ 
включите режим полуосвещения
T} 
Введите doublewide_mode swidm ZF T{
Перейдите в режим двойного освещения
T} 
введите sdrfq ZG t_draft_quality{
Войдите в режим черновика-качество
T} 
введите smir im t_insert_mode{ 
войдите в режим вставки
T} 
введите_italics_mode sitm ZH T{
Введите курсивный режим
T} 
введите_leftward_mode slm ZI T{
Начните движение каретки влево
T} 
введите_micro_mode smicm ZJ T{
Запустите режим микродвижения
T} 
введите snlq_near_letter_quality ZK T{
Войдите в режим NLQ
T} 
войдите в режим нормального качества snrmq ZL T{
Войдите в режим нормального качества
T} 
введите protected_mode prot mp T{ 
включите защищенный режим
T} 
введите_reverse_mode rev mr T{ 
включите режим обратного видео
T} 
введите_secure_mode invis mk T{ 
включите пустой режим (символы невидимы)
T} 
введите_shadow_mode sshm ZM T{
Войдите в режим теневой печати
T} 
введите_standout_mode smso so T{ 
запустите режим выделенной печати
T} 
Введите subscript_mode ssubm ZN T{
Перейдите в режим подстрочного индекса
T} 
Введите supersscript_mode ssupm ZO T{
Перейдите в режим надстрочного индекса
T} 
введите underline_mode, который нам нужен T{
начать режим подчеркивания
T} 
введите сумму ZP t_upward_mode sum ZP_T{
Начните движение каретки вверх
T} 
введите xon_mode smxon SX T{ 
включите рукопожатие xon / xoff
T} 
удалите символы ech ec T{ 
удалите символы #1 (P)
T} 
exit_alt_charset_mode rmacs ae T{ 
завершить альтернативный набор символов (P)
T} 
exit_am_mode ram RA T{ 
отключить автоматические поля
T} 
exit_attribute_mode sgr0 me T{ 
отключить все атрибуты
T} 
exit_ca_mode rmcup te T{ 
строки для завершения программ, использующих cup
T} 
exit_delete_mode rmdc ed T{ 
завершить режим удаления
T} 
exit_doublewide_mode rwidm ZQ T{
Завершить режим двойного расширения
T} 
exit_insert_mode rmir ei T{
выйти из режима вставки
T} 
exit_italics_mode ritm ZR T{
Завершить курсивный режим
T} 
exit_leftward_mode rlm ZS T{
Завершить режим движения влево
T} 
exit_micro_mode rmicm ZT T{
Завершить режим микродвижения
T} 
exit_shadow_mode rshm ZU T{
Завершить режим теневой печати
T} 
exit_standout_mode rmso se T{
выйти из режима выделенной печати
T} 
exit_subscript_mode rsubm ZV T{
Режим конечного подстрочного индекса
T} 
exit_superscript_mode rsupm ZW T{
Завершить режим надстрочного знака
T} 
exit_underline_mode rmul ue T{
выйти из режима подчеркивания
T} 
exit_upward_mode rum ZX T{
Завершить обратное перемещение символов
T} 
exit_xon_mode rmxon RX T{ 
отключить подтверждение связи xon / xoff
T} 
fixed_pause pause PA T{
пауза на 2-3 секунды
T}
flash_hook крючок fh T { 
крючок переключения вспышки
T} 
вспышка flash_screen vb T { 
видимый звонок (может не перемещать курсор)
T} 
form_feed ff ff T{ 
извлечение печатной копии страницы терминала (P *)
T} 
from_status_line fsl fs T{ 
возврат из строки состояния
T} 
goto_window wingo WG T{ 
перейти к окну № 1
T} 
отбой, хуп ХУ T{ 
отбой телефона
T} 
init_1string is1 i1 T{ 
строка инициализации
T} 
init_2string is2 is T{ 
строка инициализации
T} 
init_3string is3 i3 T{ 
строка инициализации
T} 
init_file if if T{ 
имя файла инициализации
T} 
init_prog iprog iP T{ 
путь к программе для инициализации
T} 
инициализируй_цвет инициализации Ic T{ 
инициализируй цвет # 1 до (#2,#3,#4)
T} 
инициализируй_пару инициализации Ip T{
Инициализируем цветовую пару # 1 значением fg=(#2,#3,#4), bg=(#5,#6,#7)
T} 
insert_character ich1 ic T{ 
вставить символ (P)
T} 
insert_line il1 al T{ 
вставить строку (P*)
T} 
insert_padding ip ip T{ 
вставить отступ после введенного символа
T} 
key_a1 ka1 K1 T{ 
вверху слева от клавиатуры
T} 
key_a3 ka3 K3 T{ 
верхний правый угол клавиатуры
T} 
key_b2 kb2 K2 T { 
центр клавиатуры
T} 
key_backspace kbs kb T{ 
клавиша обратного пробела
T} 
key_beg kbeg @1 T{ 
клавиша начала
T} 
key_btab kcbt kB T{
клавиша обратной вкладки
T} 
key_c1 kc1 K4 T{
слева внизу клавиатуры
T} 
key_c3 kc3 K5 T{
справа внизу клавиатуры
T}
key_cancel kcan @2 T{ 
клавиша отмены
T} 
key_catab ktbc ka T{ 
клавиша очистки всех вкладок
T} 
клавиша clear kclr kC T{ 
клавиша очистки экрана или стирания
T} 
клавиша close kclo @3 T{ 
клавиша закрытия
T} 
key_command kcmd @4 T{ 
командный ключ
T} 
key_copy kcpy @5 T{
скопировать ключ
T} 
key_create kcrt @6 T{ 
создать ключ
T} 
key_ctab kctab kt T{ 
очистить клавишу табуляции
T} 
key_dc kdch1 kD T{ 
клавиша удаления символов
T} 
key_dl kdl1 kL T{ 
клавиша удаления строк
T} 
key_down kcud1 kd T{ 
клавиша со стрелкой вниз
T} 
key_eic krmir kM T{ 
отправлено rmir или smir в режиме вставки
T} 
key_end kend @7 T{ 
клавиша завершения
T} 
key_enter kent @8 T{ 
введите / отправьте ключ
T} 
key_eol kel kE T{
клавиша "очистить до конца строки"
T} 
key_eos ked kS T{ 
клавиша "очистить до конца экрана"
T} 
key_exit kext @9 T {
клавиша выхода
T} 
key_f0 kf0 k0 T{
Функциональная клавиша F0
T} 
key_f1 kf1 k1 T{
Функциональная клавиша F1
T} 
key_f10 kf10 k; T{
Функциональная клавиша F10
T} 
key_f11 kf11 F1 T{
Функциональная клавиша F11
T} 
key_f12 kf12 F2 T{
Функциональная клавиша F12
T} 
key_f13 kf13 F3 T{
Функциональная клавиша F13
T} 
key_f14 kf14 F4 T{
Функциональная клавиша F14
T} 
key_f15 kf15 F5 T{
Функциональная клавиша F15
T} 
key_f16 kf16 F6 T{
Функциональная клавиша F16
T} 
key_f17 kf17 F7 T{
Функциональная клавиша F17
T} 
key_f18 kf18 F8 T{
Функциональная клавиша F18
T} 
key_f19 kf19 F9 T{
Функциональная клавиша F19
T} 
key_f2 kf2 k2 T{
Функциональная клавиша F2
T} 
key_f20 kf20 FA T{
Функциональная клавиша F20
T} 
key_f21 kf21 FB T{
Функциональная клавиша F21
T} 
key_f22 kf22 FC T{
Функциональная клавиша F22
T} 
key_f23 kf23 FD T{
Функциональная клавиша F23
T} 
key_f24 kf24 FE T{
Функциональная клавиша F24
T} 
key_f25 kf25 FF T{
Функциональная клавиша F25
T} 
key_f26 kf26 FG T{
Функциональная клавиша F26
T} 
key_f27 kf27 FH T{
Функциональная клавиша F27
T} 
key_f28 kf28 FI T{
Функциональная клавиша F28
T} 
key_f29 kf29 FJ T{
Функциональная клавиша F29
T} 
key_f3 kf3 k3 T{
Функциональная клавиша F3
T} 
key_f30 kf30 FK T{
Функциональная клавиша F30
T} 
key_f31 kf31 FL T{
Функциональная клавиша F31
T} 
key_f32 kf32 FM T{
Функциональная клавиша F32
T} 
key_f33 kf33 FN T{
Функциональная клавиша F33
T} 
key_f34 kf34 FO T{
Функциональная клавиша F34
T} 
key_f35 kf35 FP T{
Функциональная клавиша F35 
T}
key_f36 kf36 FQ T{
Функциональная клавиша F36
T} 
key_f37 kf37 FR T{
Функциональная клавиша F37
T} 
key_f38 kf38 FS T{
Функциональная клавиша F38
T} 
key_f39 kf39 FT T{
Функциональная клавиша F39
T} 
key_f4 kf4 k4 T{
Функциональная клавиша F4
T} 
key_f40 kf40 FU T{
Функциональная клавиша F40
T} 
key_f41 kf41 FV T{
Функциональная клавиша F41
T} 
key_f42 kf42 FW T{
Функциональная клавиша F42
T} 
key_f43 kf43 FX T{
Функциональная клавиша F43
T} 
key_f44 kf44 FY T{
Функциональная клавиша F44
T} 
key_f45 kf45 FZ T{
Функциональная клавиша F45
T} 
key_f46 kf46 Fa T{
Функциональная клавиша F46
T} 
key_f47 kf47 Fb T{
Функциональная клавиша F47
T} 
key_f48 kf48 Fc T{
Функциональная клавиша F48
T} 
key_f49 kf49 Fd T{
Функциональная клавиша F49
T} 
key_f5 kf5 k5 T{
Функциональная клавиша F5
T} 
key_f50 kf50 Fe T{
Функциональная клавиша F50
T} 
key_f51 kf51 Ff T{
Функциональная клавиша F51
T} 
key_f52 kf52 Fg T{
Функциональная клавиша F52
T} 
key_f53 kf53 Fh T{
Функциональная клавиша F53
T} 
key_f54 kf54 Fi T{
Функциональная клавиша F54
T} 
key_f55 kf55 Fj T{
Функциональная клавиша F55
T} 
key_f56 kf56 Fk T{
Функциональная клавиша F56
T} 
key_f57 kf57 Fl T{
Функциональная клавиша F57
T} 
key_f58 kf58 Fm T{
Функциональная клавиша F58
T} 
key_f59 kf59 Fn T{
Функциональная клавиша F59
T} 
key_f6 kf6 k6 T{
Функциональная клавиша F6
T} 
key_f60 kf60 Fo T{
Функциональная клавиша F60
T} 
key_f61 kf61 Fp T{
Функциональная клавиша F61
T} 
key_f62 kf62 Fq T{
Функциональная клавиша F62
T} 
key_f63 kf63 Fr T{
Функциональная клавиша F63 
T}
key_f7 kf7 k7 T{
Функциональная клавиша F7
T} 
key_f8 kf8 k8 T{
Функциональная клавиша F8
T} 
key_f9 kf9 k9 T{
Функциональная клавиша F9
T} 
key_find kfnd @0 T{ 
найти клавишу
T} 
key_help khlp %1 T{
клавиша справки
T} 
key_home khome kh T{ 
ключ home
T} 
key_ic kich1 kI T{ 
клавиша вставки символов
T} 
key_il kil1 kA T{ 
клавиша вставки строки
T} 
key_left kcub1 kl T{
клавиша со стрелкой влево
T} 
key_ll kll kH T{
нижняя левая клавиша (home down)
T} 
key_mark kmrk %2 T{
отметить клавишу
T} 
key_message kmsg %3 T{
клавиша сообщения
T} 
key_move kmov %4 T{
клавиша перемещения
T} 
key_next knxt %5 T{
следующая клавиша
T} 
ключ_страницы knp kN T{
ключ следующей страницы
T} 
ключ_открытия kopn %6 T{ 
ключ открытия
T} 
key_options kopt %7 T{ 
ключ опций
T} 
key_ppage kpp kp T{ 
ключ предыдущей страницы
T} 
key_previous kprv %8 T{
предыдущий ключ
T} 
key_print kprt %9 T{
ключ печати
T} 
key_redo krdo %0 T{
клавиша повтора
T} 
key_reference kref &1 T{ 
опорная клавиша
T} 
key_refresh krfr & 2 T{ 
клавиша обновления
T} 
key_replace krpl & 3 T{
заменить ключ
T} 
key_restart krst & 4 T{ 
перезапустить ключ
T} 
key_resume kres &5 T{ 
клавиша возобновления работы
T} 
key_right kcuf1 kr T{ 
клавиша со стрелкой вправо
T} 
клавиша_сохранения ksav и 6 T{ 
клавиша сохранения
T} 
клавиша_сбега kBEG и 9 T{ 
сдвинутая клавиша начала
T} 
key_scancel kCAN &0 T{ 
сдвинутая клавиша отмены
T} 
key_scommand kCMD *1 T{ 
сдвинутая клавиша команды
T} 
key_scopy kCPY *2 T{
сдвинутый ключ копирования 
T}
key_screate kCRT *3 T{
сдвинутая клавиша создания
T} 
key_sdc kDC * 4 T{
сдвинутая клавиша удаления-символьная клавиша
T} 
key_sdl kDL *5 T{ 
сдвинутая клавиша удаления строки
T} 
key_select kslt *6 T{
клавиша выбора
T} 
key_send kEND *7 T{ 
сдвинутая клавиша завершения
T} 
key_seol kEOL * 8 T{
сдвинутая клавиша очистки до конца строки
T} 
key_sexit kEXT *9 T{
сдвинутая клавиша выхода
T} 
key_sf kind kF T{ 
клавиша прокрутки вперед
T} 
key_sfind kFND *0 T{
сдвинутая клавиша поиска
T} 
key_shelp kHLP #1 T{ 
сдвинутая клавиша справки
T} 
key_shome kHOM # 2 T{ 
сдвинутая клавиша home
T} 
key_sic kIC #3 T{ 
сдвинутая клавиша вставки символов
T} 
key_sleft kLFT #4 T{ 
сдвинутая клавиша со стрелкой влево
T} 
key_smessage kMSG %a T{ 
сдвинутая клавиша сообщения
T} 
key_smove kMOV %b T{ 
сдвинутая клавиша перемещения
T} 
key_snext kNXT %c T{
сдвинутая следующая клавиша
T} 
key_soptions kOPT %d T{ 
сдвинутая клавиша опций
T} 
key_sprevious kPRV %e T{ 
сдвинутая предыдущая клавиша
T} 
key_sprint kPRT %f T{
сдвинутая клавиша печати
T} 
key_sr kri kR T{ 
клавиша прокрутки назад
T} 
key_sredo kRDO %g T{
сдвинутая клавиша повтора
T} 
key_sreplace kRPL %h T{ 
сдвинутая клавиша замены
T} 
key_sright kRIT %i T{ 
сдвинутая клавиша со стрелкой вправо
T} 
key_srsume kRES %j T{ 
сдвинутая клавиша возобновления работы
T} 
key_ssave kSAV !1 T{
сдвинутая клавиша сохранения
T} 
key_ssuspend kSPD !2 T{
сдвинутая клавиша приостановки
T} 
key_stab khts kT T{ 
клавиша set-tab 
T}
key_sundo kUND !3 T{
сдвинутая клавиша отмены
T} 
key_suspend kspd &7 T{ 
клавиша приостановки
T} 
key_undo kund & 8 T{ 
клавиша отмены
T} 
key_up kcuu1 ku T{ 
клавиша со стрелкой вверх
T} 
keypad_local rmkx ke T{
выйти из режима 'keyboard_transmit'
T} 
keypad_xmit smkx ks T{ 
войдите в режим 'keyboard_transmit'
T} 
lab_f0 lf0 l0 T{
метка на функциональной клавише f0, если не f0
T} 
lab_f1 lf1 l1 T{
метка на функциональной клавише f1, если не f1
T} 
lab_f10 lf10 la T{
метка на функциональной клавише f10, если не f10
T} 
lab_f2 lf2 l2 T{
метка на функциональной клавише f2, если не f2
T} 
lab_f3 lf3 l3 T{
метка на функциональной клавише f3, если не f3
T} 
lab_f4 lf4 l4 T{
метка на функциональной клавише f4, если не f4
T} 
lab_f5 lf5 l5 T{
метка на функциональной клавише f5, если не f5
T} 
lab_f6 lf6 l6 T{
метка на функциональной клавише f6, если не f6
T} 
lab_f7 lf7 l7 T{
метка на функциональной клавише f7, если не f7
T} 
lab_f8 lf8 l8 T{
метка на функциональной клавише f8, если не f8
T} 
lab_f9 lf9 l9 T{
метка на функциональной клавише f9, если не f9
T} 
label_format fln Lf T{ 
формат метки
T} 
label_off rmln LF T{ 
отключить программные метки
T} 
label_on smln LO T{ 
включить программные метки
T} 
meta_off rmm mo T{ 
выключить мета-режим
T} 
meta_on smm mm T{ 
включить мета-режим (8-й бит включен)
T} 
micro_column_address mhpa ZY T{
Как и column_address в микрорежиме
T} 
micro_down mcud1 ZZ T{
Как cursor_down в микрорежиме
T} 
micro_left mcub1 Za T{
Как cursor_left в микрорежиме
T} 
micro_right mcuf1 Zb T{
Нравится cursor_right в микрорежиме
T} 
micro_row_address mvpa Zc T{
Нравится row_address # 1 в микрорежиме
T} 
micro_up mcuu1 Zd T{
Как cursor_up в микрорежиме
T} 
перевод строки nel nw T{ 
перевод строки (ведет себя как cr, за которым следует lf)
T} 
упорядочить_оф_пинсы в соответствии с T{
Сопоставьте программные биты с выводами печатающей головки
T} 
orig_colors oc oc T{
Установите все пары цветов на исходные
T} 
orig_pair op op T{
Установите пару по умолчанию в исходное значение
T} 
pad_char pad pc T{ 
заполняющий символ (вместо null)
T} 
parm_dch dch DC T{ 
удалить символы #1 (P*)
T} 
parm_delete_line dl DL T{ 
удалить строки #1 (P *)
T} 
parm_down_cursor cud DO T{ 
вниз по строкам # 1 (P *)
T} 
parm_down_micro mcud Zf T{
Как parm_down_cursor в микрорежиме
T} 
parm_ich ich IC T{ 
вставить символы #1 (P *)
T} 
parm_index indn SF T{ 
прокрутите вперед #1 строки (P)
T} 
parm_insert_line il AL T{ 
вставьте #1 строки (P *)
T} 
parm_left_cursor cub LE T{
переместить символы #1 влево (P)
T} 
parm_left_micro mcub Zg T{
Как parm_left_cursor в микрорежиме
T} 
parm_right_cursor cuf RI T{
переместить символы #1 вправо (P *)
T} 
parm_right_micro mcuf Zh T{
Как parm_right_cursor в микрорежиме
T} 
parm_rindex rin SR T{ 
прокрутите назад # 1 строки (P)
T} 
parm_up_cursor обновляет T{ 
обновляет # 1 строки (P *)
T} 
parm_up_micro mcuu Zi T{
Как parm_up_cursor в микрорежиме
T} 
pkey_key pfkey pk T{ 
запрограммируйте функциональную клавишу # 1 для ввода строки # 2
T} 
pkey_local pfloc pl T{ 
запрограммируйте функциональную клавишу # 1 для выполнения строки # 2
T} 
pkey_xmit pfx px T{ 
программная функциональная клавиша # 1 для передачи строки # 2
T} 
plab_norm pln pn T{ 
программная метка # 1 для отображения строки # 2
T} 
print_screen mc0 ps T{ 
распечатать содержимое экрана
T} 
prtr_non mc5p pO T{ 
включить принтер на #1 байт
T} 
prtr_off mc4 pf T{ 
выключить принтер
T} 
prtr_on mc5 po T{ 
включить принтер
T} 
импульсный pulse PU T{ 
выбрать импульсный набор
T}
быстрый набор qdial QD T{ 
набрать номер #1 без проверки
T} 
remove_clock rmclk RC T{
удалить часы
T} 
repeat_char повторите rp t{ 
повторите символ #1 # 2 раза (P *)
T} 
req_for_input rfi RF T{ 
отправить следующий входной символ (для ptys)
T} 
reset_1string rs1 r1 T{ 
строка сброса
T} 
reset_2string rs2 r2 T{ 
строка сброса
T} 
reset_3string rs3 r3 T{ 
строка сброса
T} 
reset_file rf rf T{ 
имя файла сброса
T} 
restore_cursor rc rc T{ 
восстановить курсор в положение последнего сохраненного курсора
T} 
row_address vpa cv T{ 
абсолютное вертикальное положение #1 (P) 
T}
save_cursor sc sc T{ 
сохранить текущее положение курсора (P)
T} 
scroll_forward ind sf T{ 
прокрутить текст вверх (P)
T} 
scroll_reverse ri sr T{ 
прокрутите текст вниз (P)
T} 
select_char_set scs Zj T{
Выберите набор символов, #1
T} 
set_attributes sgr sa T{
определение атрибутов видео #1-#9 (стр. 9)
T} 
set_background setb Sb T{
Установка цвета фона #1
T} 
set_bottom_margin smgb Zk T{
Установить нижнее поле в текущей строке
T} 
set_bottom_margin_parm smgbp Zl T{
Установите нижнее поле в строке № 1 или (если smgtp не указан) № 2 строки снизу
T} 
set_clock sclk SC T{ 
установить время #1 час # 2 минуты # 3 секунды
T} 
set_color_pair scp sp T{
Установите текущую цветовую пару равной # 1
T} 
set_foreground setf Sf T{
Установите цвет переднего плана # 1
T} 
set_left_margin smgl ML T{ 
установите мягкое левое поле в текущем столбце. Смотрите smgl. (ML отсутствует в BSD termcap).
T} 
set_left_margin_parm smglp Zm T{
Установить левое (правое) поле в столбце #1
T} 
set_right_margin smgr MR T{ 
установите мягкое правое поле в текущем столбце
T} 
set_right_margin_parm smgrp Zn T{
Установите правое поле в столбце № 1
T} 
set_tab hts st T{ 
установите табуляцию в каждой строке, текущие столбцы
T} 
set_top_margin smgt Zo T{
Установите верхнее поле в текущей строке
T} 
set_top_margin_parm smgtp Zp T{
Установите верхнее (нижнее) поле в строке № 1 
T}
set_window wind wi T{ 
текущее окно - это строки # 1-# 2 столбцов # 3-# 4
T} 
start_bit_image sbim Zq T{
Начать печать графики с битовым изображением
T} 
start_char_set_def scsd Zr T{
Начните определение набора символов # 1 с символов #2 в наборе
T} 
stop_bit_image rbim Zs T{
Остановить печать битовых графических изображений
T} 
stop_char_set_def rcsd Zt T{
Конечное определение набора символов #1
T} 
subscript_characters subcs Zu T{
Список символов с возможностью подписи
T} 
superscript_characters supcs Zv T{
Список символов с возможностью подписи
T} 
tab ht ta T{ 
переход от табуляции к следующей аппаратной вкладке с 8 пробелами прекращается
T} 
these_cause_cr docr Zw T{
Печать любого из этих символов вызывает CR
T} 
to_status_line tsl ts T{ 
перейти к строке состояния, столбец № 1
T} 
звуковой сигнал НА T{
выберите набор сенсорным тоном
T} 
underline_char uc uc T{ 
подчеркните символ и пройдите мимо него
T} 
up_half_line hu hu T{ 
на половину строки вверх
T} 
пользователь0 u0 u0 T{
Строка пользователя #0
T} 
пользователь1 u1 u1 T{
Строка пользователя #1
T} 
пользователь2 u2 u2 T{
Строка пользователя # 2
T} 
пользователь3 u3 u3 T{
Строка пользователя # 3
T} 
пользователь4 u4 u4 T{
Строка пользователя # 4
T} 
пользователь5 u5 u5 T{
Строка пользователя #5
T} 
пользователь6 u6 u6 T{
Строка пользователя #6
T} 
пользователь7 u7 u7 T{
Строка пользователя #7
T} 
пользователь8 u8 u8 T{
Строка пользователя #8
T} 
пользователь9 u9 u9 T{
Строка пользователя # 9
T} 
wait_tone подождите WA T{
дождитесь гудка набора номера
T}
xoff_character xoffc XF T{
Символ XOFF
T} 
xon_character xonc XN T{
Символ XON
T} 
zero_motion zerom Zx T{
Нет движения для последующего символа
T}
.TE
.ad

Следующие возможности использования строк присутствуют в структуре терминов SVr4.0, 
но изначально не были задокументированы на странице руководства.

.na 
.TS H 
центр;
c l l c 
c l l c 
lw25 lw7 lw2 lw18.
\Fb Variable Cap- Описание TCap \fR 
\Код имени fBString \fR 
alt_scancode_esc scesa S8 T{
Альтернативный escape для эмуляции scancode
T} 
bit_image_carriage_return bicr Yvt{
Переместить в начало той же строки
T} 
bit_image_newline binel Zzt{
Перейти к следующей строке битового изображения
T} 
bit_image_repeat birep Xy T{
Повторить ячейку битового изображения #1 # 2 раза
T} 
char_set_names csnm Zy T{
Создайте #1-й элемент из списка имен наборов символов
T} 
code_set_init csin ci T{
Последовательность инициализации для нескольких наборов кодов
T} 
color_names colornm Yw T{
Укажите имя цвета #1
T} 
define_bit_image_region defbi Yx T{
Определите область прямоугольного битового изображения
T} 
device_type devt dv T{
Укажите поддержку языка / набора кодов
T} 
display_pc_char dispc S1 T{
Отобразить символ ПК # 1
T} 
end_bit_image_region endbi Yy T{
Конец бита-область изображения
T} 
введите_pc_charset_mode smpch S2 T{
Войдите в режим отображения символов ПК
T}
введите_scancode_mode smsc S4 T{
Войдите в режим сканирования ПК
T} 
exit_pc_charset_mode rmpch S3 T{
Выйдите из режима отображения символов ПК
T} 
exit_scancode_mode rmsc S5 T{
Выйдите из режима сканирования ПК
T} 
get_mouse getm Gm T{
Проклятия должны получать события кнопок, параметр № 1 не задокументирован.
T} 
key_mouse kmous Km T{
Произошло событие мыши
T} 
mouse_info minfo Mi T{
Информация о состоянии мыши
T} 
pc_term_options pctrm S6 T{
Опции терминала ПК
T} 
pkey_plab pfxl xl T{
Запрограммируйте функциональную клавишу # 1, чтобы ввести строку # 2 и отобразить строку # 3
T} 
req_mouse_pos reqmp RQ T{
Запросить положение мыши
T} 
scancode_escape scesc S7 T{
Escape для эмуляции scancode
T} 
set0_des_seq s0ds s0 T{
Перейти к кодовому набору 0 (набор EUC 0, ASCII)
T} 
set1_des_seq s1ds s1 T{
Перейти к кодовому набору 1
T} 
set2_des_seq s2ds s2 T{
Перейти к набору кодов 2
T} 
set3_des_seq s3ds s3 T{
Перейти к набору кодов 3
T} 
set_a_background setab AB T{
Установите цвет фона на #1, используя ANSI escape
T} 
set_a_foreground setaf AF T{
Установите цвет переднего плана на # 1, используя ANSI escape
T} 
set_color_band setcolor Yz T{
Измените цвет ленты на # 1
T} 
set_lr_margin smglr ML T{
Установите как левое, так и правое поля равными #1, # 2. (ML отсутствует в BSD termcap).
T} 
set_page_length слайды YZ T{
Установите длину страницы равной # 1 строкам
T}
set_tb_margin smgtb MT T{
Устанавливает как верхнее, так и нижнее поля равными #1, #2
T}
.TE
.ad

.в .8i
Стандарт XSI Curses добавил эти возможности копирования на бумажном носителе.
Они использовались в некоторых версиях System V curses после версии 4.1, 
например, Solaris 2.5 и IRIX 6.x.
За исключением \fBYI\fP, для них придуманы названия termcap \fBncurses\fR .
Согласно стандарту XSI Curses, у них нет имен termcap.
Если ваши скомпилированные записи terminfo используют их, 
они могут быть несовместимы с двоичным кодом System V terminfo 
записи после SVr4.1; осторожно!

.na 
.TS H 
центр;
c l l c 
c l l c 
lw25 lw7 lw2 lw20.
\fBVariable	Cap-	TCap	Description\fR 
\fBString	name	Code\fR 
введите horizontal_hl_mode ehhlm Xh T{
Перейдите в режим горизонтального выделения
T} 
Введите left_hl_mode elohlm Xl T{
Войдите в режим подсветки слева
T} 
Введите low_hl_mode elohlm Xo T{
Войдите в режим низкой подсветки
T} 
Введите режим_right_hl_mode erhlm Xr T{
Войдите в режим подсветки справа
T} 
Введите режим_top_hl_mode ethlm Xt T{
Войдите в режим подсветки сверху
T} 
введите_vertical_hl_mode evhlm Xv T{
Войдите в режим вертикальной подсветки
T} 
установите_a_attributes sgr1 sA T{
Определите второй набор атрибутов видео #1-#6
T} 
установите длину YI t_glen_inch_inch{
Установите длину страницы равной # 1 сотой части дюйма (в некоторых реализациях sL используется для обозначения termcap).
T}
.TE
.ad
.\"***************************************************************************
.\" Copyright 2018-2019,2020 Thomas E. Dickey                                *
.\" Copyright 1998-2016,2017 Free Software Foundation, Inc.                  *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, to any person obtaining a  *
.\" copy of this software and associated documentation files (the            *
.\" "Software"), to deal in the Software without restriction, including      *
.\" without limitation the rights to use, copy, modify, merge, publish,      *
.\" distribute, distribute with modifications, sublicense, and/or sell       *
.\" copies of the Software, and to permit persons to whom the Software is    *
.\" furnished to do so, subject to the following conditions:                 *
.\"                                                                          *
.\" The above copyright notice and this permission notice shall be included  *
.\" in all copies or substantial portions of the Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained in this notice, the name(s) of the above copyright   *
.\" holders shall not be used in advertising or otherwise to promote the     *
.\" sale, use or other dealings in this Software without prior written       *
.\" authorization.                                                           *
.\"***************************************************************************
.\"
.\" $Id: terminfo.tail,v 1.100 2020/12/19 21:51:22 tom Exp $
.ps +1
.SS User-Defined Capabilities
.
В предыдущем разделе были перечислены возможности \fIpredefined\fP.
Они касаются некоторых специальных функций для терминалов, которые больше не производятся 
(или, возможно, никогда).
Иногда в новых терминалах появляются специальные функции, которые 
неудобно или невозможно представить путем повторного использования предопределенных 
возможностей.
.PP 
\fBncurses\fP устраняет это ограничение, предоставляя определяемые пользователем возможности.
Программы \fBtic\fP и \fBinfocmp\fP предоставляют 
опцию \fB\-x\fP для этой цели.
Если установлен параметр \fB\-x\fP, 
\fBtic\fP рассматривает неизвестные возможности как определенные пользователем.
То есть, если \fBtic \ fP обнаруживает имя возможности 
которое он не распознает, 
он выводит ее тип (логическое значение, число или строку) из синтаксиса 
и создает запись в расширенной таблице для этой возможности.
Функция \fBuse_extended_names\fP(3X) делает эту информацию 
условно доступной для приложений.
Библиотека ncurses предоставляет данные, оставляя большую часть поведения 
приложениям:
.bP 
Определяемые пользователем строки возможностей, имя которых начинается 
с \*(`k\*(", рассматриваются как функциональные клавиши.
.bP 
Типы (логическое значение, число, строка), определенные \fBtic\fP 
могут быть выведены путем успешных вызовов \fBtigetflag \fP и т.д.
.bP 
Если название возможности состоит из двух символов,
эта возможность также доступна через интерфейс termcap.
.PP 
Хотя считается, что termcap является расширяемым, поскольку он не использует заранее определенный набор 
возможностей, 
на практике он был ограничен возможностями, определенными в реализациях 
terminfo.
Как правило, 
определяемые пользователем возможности, предназначенные для использования приложениями termcap, должны 
быть ограничены логическими значениями и числами, чтобы избежать превышения 1023 байт 
ограничение, принятое реализациями termcap и их приложениями.
В частности, предоставление расширенных наборов функциональных клавиш (более 60 
пронумерованных клавиш и нескольких специальных именованных клавиш) лучше всего выполнять с использованием 
более длинных имен, доступных с помощью terminfo.
.
.SS Пример записи
.
Следующая запись, описывающая терминал стандарта ANSI, является репрезентативной 
то, как обычно выглядит запись \fBterminfo \ fR для современного терминала.
.PP 
.nf 
.ft CW 
\s-2ansi|ansi/pc-term совместим с color, 
 am, mc5i, mir, msgr, 
 цвета #8, cols#80, it # 8, линии # 24, ncv #3, пары # 64, 
 acsc=+\\020\\,\\021-\\030.^ Y0 \\333` \\004a \\ 261f \\ 370g \\ 361h \\ 260
 j \\ 331k \\277l \\ 332m \\ 300n \\ 305o ~ p \\ 304q \\304r \\304s_t \\ 303
 u \\ 264v \\ 301w \\ 302x \\ 263y \\ 363z\\362{\\343|\\330}\\234~\\376, 
 bel=^ G, blink=\\E[5 м, bold=\\E[1 м, cbt= \\E[Z, clear=\\E[H\\ E[J, 
 cr=^M, cub=\\E[%p1%dD, cub1=\\E[D, cud=\\E[%p1%dB, cud1=\\E[B, 
 cuf=\\E[%p1%dC, cuf1=\\E[C, cup=\\E[%i%p1%d;%p2%dH, 
 cuu=\\E[%p1%dA, cuu1=\\E[A, dch=\\E[%p1%dP, dch1=\\E[P, 
 dl=\\E[%p1%dM, dl1=\\E[M, ech=\\E[%p1%dX, ed=\\E[J, el=\\E[K, 
 el1=\\E[1K, home=\\E[H, hpa=\\E[%i%p1%dG, ht=\\E[I, hts=\\EH, 
 ich=\\E[%p1%d@, il=\\E[%p1%dL, il1=\\E[L, ind=^J, 
 indn=\\E[%p1%dS, invis=\\E[8m, kbs=^H, kcbt=\\E[Z, kcub1=\\E[D, 
 kcud1=\\E[B, kcuf1=\\E[C, kcuu1=\\E[A, khome=\\E[H, kich1=\\E[L, 
 mc4=\\E[4i, mc5=\\E[5i, nel=\\r\\E[S, op=\\E[39;49m, 
 rep=%p1%c\\E[%p2%{1}%-%db, rev=\\E[7m, rin=\\ E[%p1%dT, 
 rmacs=\\E[10 м, rmpch=\\E[10 м, rmso=\\E[m, rmul=\\ E[m, 
 s0ds=\\E(B, s1ds= \\E)B, s2ds= \\E*B, s3ds= \\E+B, 
 setab=\\E[4%p1%dm, setaf=\\E[3%p1%dm, 
 sgr=\\E[0; 10%?%p1%t;7%;
 %?%p2%t; 4%;
 %?%p3%t;7%;
 %?%p4%t; 5%;
 %?%p6%t; 1%;
 %?%p7%t;8%;
 %?%p9%t;11%;m,
 sgr0=\\E[0; 10 м, smacs=\\E[11 м, smpch=\\E[11 м, smso=\\E[7 м, 
 smul=\\E[4m, tbc=\\E[3g, u6=\\E[%i%d;%dR, u7=\\E[6n, 
 u8=\\E[?%[;0123456789]c, u9=\\E[c, vpa=\\E[%i%p1%dd, 
.fi 
.ft R 
.PP 
Записи могут продолжаться на нескольких строках путем размещения пробела в 
начале каждой строки, кроме первой.
Комментарии могут быть включены в строки, начинающиеся с \*(`#\*(".
Возможности в 
.I terminfo 
бывают трех типов: 
.bP 
Логические возможности, которые указывают на то, что терминал имеет 
какую-то конкретную функцию, 
.bP 
числовые возможности, указывающие размер терминала 
или размер конкретных задержек, и 
.bP 
строка 
возможности, которые задают последовательность, которую можно использовать для выполнения определенных 
терминальных операций.
.PP 
.Разные типы возможностей 
.PP
У всех возможностей есть названия.
Например, тот факт, что
Терминалы стандарта ANSI имеют
.I "автоматические поля" 
(т.е. автоматический возврат и перевод строки 
при достижении конца строки) обозначаются параметром capability \fBam\fR.
Следовательно, описание ansi включает \fBam\fR .
За числовыми возможностями следует символ \*(`#\*(", а затем положительное значение.
Таким образом, \fBcols\fR, который указывает количество столбцов, имеющихся в терминале,
присваивает значение \*(`80\*(" для ansi.
Значения для числовых возможностей могут быть указаны в десятичной, восьмеричной или шестнадцатеричной форме. 
используя соглашения языка программирования C (например, 255, 0377 и 0xff или 0xFF).
.PP 
Наконец, возможности со строковыми значениями, такие как \fBel\fR (очистить до конца строки 
последовательность), задаются двухсимвольным кодом, an \*(`=\*(", и затем строкой 
, заканчивающейся на следующем \*(`,\*(".
.PP 
В возможностях со строковыми значениями предусмотрен ряд управляющих последовательностей 
для упрощения кодирования символов там:
.bP 
Как \fB\eE\fR, так и \fB\ee\fR 
сопоставляются символу \s-1ESCAPE\s0, 
.bP 
\fB ^ x\fR сопоставляется с элементом управления-x для любого подходящего \fIx\fP и 
.bP 
последовательности 
.RS 6
.PP 
\fB\ en\fP, \fB\el\fP, \fB\er\fP, \fB\ et\fP, \fB\eb\fP, \fB\ef\fP и \fB\ es\fR 
.RE 
.IP 
производить 
.Рупий 6
.PP 
\fInewline\fP, \fIline-feed\fP, \fIreturn\fP, \fItab\fP, \fIbackspace\fP, \fIform-feed\fP и \fIspace\fP, 
.RE 
.IP 
соответственно.
.PP
В X /Open Curses не указано, каким может быть \*(`соответствующий \fIx\fP\*(".
На практике это графический символ ASCII для печати.
Особый случай \*(`^?\*(" интерпретируется как DEL (127).
Во всех остальных случаях символьным значением является AND'd с 0x1f,
сопоставление с управляющими кодами ASCII в диапазоне от 0 до 31.
.PP 
Другие экранирования включают 
.bP 
\fB \ e ^\fR для \fB ^\fR, 
.bP 
\fB \ e \ e \ fR для \ fB \ e \ fR, 
.bP 
\fB \e\fR вместо запятой, 
.bP 
\fB\e:\fR вместо \fB:\fR, 
.bP 
и \fB\e0\fR для null.
.IP 
\fB\e0\fR создаст \e200 , который не завершает строку, но ведет себя 
как нулевой символ на большинстве терминалов, при условии, что указан CS7.
Смотрите \fBstty\fP(1).
.IP
Причина этой странности заключается в поддержании двоичной совместимости 
скомпилированных файлов terminfo с другими реализациями, 
например, системами SVr4, которые документируют это.
Скомпилированные файлы terminfo используют строки, заканчивающиеся нулем, без какой-либо длины.
Для изменения этого потребуется новый двоичный формат, 
который не будет работать с другими реализациями.
.PP 
Наконец, символы могут быть заданы в виде трех восьмеричных цифр после a \fB \ e \fR.
.PP
Задержка в миллисекундах может отображаться в любом месте строки, заключенной в 
$<..> квадратные скобки, как в \fBel\fP=\eEK$<5>, 
а символы заполнения предоставляются с помощью \fBtputs\fP(3X) 
для обеспечения этой задержки.
.bP 
Задержка должна быть числом не более чем с одним десятичным знаком. 
Точность; за ней могут следовать суффиксы \*(`*\*(" или \*(`/\*(" или оба.
.bP 
A \*(`*\*("
указывает, что требуемое заполнение пропорционально количеству строк 
, затронутых операцией, и указанное количество соответствует каждой затронутой единице. 
требуется заполнение.
(В случае символа вставки фактором по-прежнему является 
количество затронутых \филиалов\fP.)
.IP 
Обычно добавление носит рекомендательный характер, если устройство имеет функцию \fBxon \fR 
; оно используется для расчета стоимости, но не вызывает задержек.
.bP 
A \*(`/\*(" 
Суффикс указывает, что заполнение является обязательным, и вызывает задержку данного 
количество миллисекунд даже на устройствах, для которых присутствует \fBxon\fR для 
указания управления потоком.
.PP 
Иногда отдельные возможности необходимо закомментировать.
Для этого поставьте точку перед названием возможности.
Например, смотрите второй раздел 
.B 
в примере выше.
.br 
.ne 5 
.PP 
.SS Выборка скомпилированных описаний 
.PP
Библиотека \fBncurses \ fP выполняет поиск описаний терминалов в нескольких местах.
Используется только первое найденное описание.
В библиотеке есть скомпилированный список мест для поиска
который может быть переопределен переменными среды.
Перед началом поиска, 
\fBncurses\fP удаляет дубликаты в своем списке поиска.
.bP 
Если установлена переменная окружения TERMINFO, она интерпретируется как путь 
каталога, содержащего скомпилированное описание, над которым вы работаете.
Выполняется поиск только в этом каталоге.
.bP 
Если параметр TERMINFO не установлен, 
вместо этого \fBncurses\fR будет искать скомпилированное описание в каталоге \fB$HOME/.terminfo\fR 
.
.bP 
Далее, если установлена переменная окружения TERMINFO_DIRS, 
\fBncurses\fR будет интерпретировать содержимое этой переменной 
как список каталогов (или файлов базы данных), разделенных двоеточием, для поиска.
.IP
Пустое имя каталога (т.е. Если переменная начинается или заканчивается 
двоеточием или содержит соседние двоеточия)
интерпретируется как системное местоположение \fI\*d\fR.
.bP 
Наконец, \fBncurses\fP выполняет поиск в этих скомпилированных расположениях:
.RS 
.bP 
список каталогов (@TERMINFO_DIRS@) и 
.bP 
системный каталог terminfo, \fI\*d\fR (скомпилированный по умолчанию).
.RE 
.SS Подготовка описаний 
.PP
Теперь мы расскажем, как подготовить описания терминалов.
Наиболее эффективным способом подготовки описания терминала является имитация 
описания аналогичного терминала в
.I terminfo 
и постепенно создавать описание, используя частичные описания 
с помощью
.I vi 
или какой-либо другой программы, ориентированной на экран, для проверки их правильности.
Имейте в виду, что очень необычный терминал может выявить недостатки в 
способности файла 
.I terminfo 
описывать его 
или ошибки в коде для обработки экрана тестовой программы.
.PP
Для правильного заполнения строки вставки (если производитель терминала 
не задокументировал это) серьезным испытанием является редактирование большого файла с пропускной способностью 9600 бод, 
удалите примерно 16 строк из середины экрана, затем нажмите клавишу \*(`u\*(" 
несколько раз быстро.
Если терминал не работает, обычно требуется дополнительное заполнение.
Аналогичный тест можно использовать для вставки символа.
.PP 
.SS Базовые возможности
.PP
Количество столбцов в каждой строке для терминала определяется числовой возможностью 
\fBcols\fR.
Если терминалом является \s-1CRT \s0, то 
количество строк на экране определяется возможностью \fBlines \fR.
Если терминал переходит к началу следующей строки, когда 
он достигает правого поля, то у него должна быть возможность \fBam \ fR .
Если терминал может очистить свой экран, оставив курсор на главном экране.
позиция, то она задается с помощью возможности \fBclear\fR string .
Если терминал перегружен
(вместо того, чтобы очищать позицию при зачеркивании символа) 
тогда у него должна быть возможность \ FBOs \ fR.
Если терминал является терминалом печати, без устройства для копирования в электронном виде, 
предоставьте ему оба
.B hc 
и 
.BR os .
.RB (os 
применяется к терминалам storage scope, таким как \ s-1TEKTRONIX \ s + 1 серии 4010 
, а также к терминалам hard copy и APL.)
Если есть код для перемещения курсора к левому краю текущей строки 
, укажите это как 
.BR cr .
(Обычно это будет возврат каретки, control/M.)
Если существует код для подачи звукового сигнала (звонок, гудок и т.д.)
укажите это как 
.BR bel .
.PP
Если существует код для перемещения курсора на одну позицию влево 
(например, backspace), эта возможность должна быть указана как 
.BR cub1 .
Аналогично, коды для перемещения вправо, вверх и вниз должны быть 
указаны как 
.BR cuf1 , 
.BR cuu1, 
и 
.BR cud1 .
Эти локальные перемещения курсора не должны изменять текст, по которому они перемещаются, 
например, вы обычно не используете \*(`\fBcuf1\fP=\ \*(" потому что 
пробел сотрет перенесенный символ.
.PP
Очень важным моментом здесь является то, что локальные движения курсора закодированы 
в 
.I terminfo
не определены по левому и верхнему краям терминала \ s-1CRT \ s0.
Программы никогда не должны пытаться использовать пробел в обратном направлении по левому краю, 
если только
.Указан bb bw 
, 
и никогда не пытайтесь перейти локально вверх с самого верха.
Чтобы прокрутить текст вверх, программа перейдет в нижний левый угол 
экрана и отправит сообщение 
.B ind 
(индексная) строка.
.PP
Чтобы прокрутить текст вниз, программа переходит в верхний левый угол 
экрана и отправляет строку 
.B ri
(обратный индексный).
Строки
.B ind 
и 
.B ri 
не определены, если они не расположены в соответствующих углах экрана.
.PP
Параметризованные версии последовательностей прокрутки: 
.B indn 
и 
.B rin 
которые имеют ту же семантику, что и 
.B ind 
и 
.B ri 
за исключением того, что они принимают один параметр и прокручивают столько строк.
Они также не определены, за исключением соответствующего края экрана.
.PP
Функция \fBam\fR указывает, находится ли курсор у правого края экрана 
при выводе текста, но это не обязательно 
применимо к a
.B cuf1 
из последнего столбца.
Единственное локальное движение, которое определяется от левого края, - это если задано значение 
.B bw 
, то a
.B cub1 
от левого края переместится к правому краю предыдущего ряда.
Если значение 
.B bw 
не задано, эффект не определен.
Это полезно, например, для рисования прямоугольника по краю экрана.
Если в терминале есть переключатель, выбирающий автоматические поля, 
то 
.I terminfo 
файл обычно предполагает, что это включено; т.е. \fBam\fR.
Если у терминала есть команда, которая перемещается в первый столбец следующей строки 
, эта команда может быть задана как 
.B nel 
(перевод строки).
Не имеет значения, очищает ли команда оставшуюся часть текущей строки, 
поэтому, если в терминале нет 
.B cr 
и 
.B lf 
все еще может быть возможно создать рабочий файл 
.B nel 
из одного или обоих.
.PP
Этих возможностей достаточно для описания бумажных и \*(`стеклянных\*(" терминалов.
Таким образом, телетайп модели 33 описывается как 
.PP 
.DT 
.nf 
.ft CW 
.\".in -2
телетайп s-133\||\|tty33\||\|tty\||\|модель 33, 
 bel =^ G, cols#72, cr = ^M, cud1 =^ J, hc, ind=^J, os, \ s + 1 
. \".in +2 
.ft R 
.fi 
.PP 
в то время как Lear Siegler \ s-1ADM-3 \ s0 описывается как 
.PP 
.DT 
.nf 
.ft CW 
.\".в -2 
\с-1adm3\||\|3\||\| lsi adm3, 
 am, bel=^G, clear=^Z, cols#80, cr=^M, cub1=^H, cud1=^J, 
 ind=^J, строки №24, \s+1 
.\".in +2 
.ft R 
.fi 
.PP 
.SS Параметризованные строки 
.PP
Адресация курсора и другие строки, требующие параметров 
в терминале описываются
возможность параметризованной строки, 
с \fIprintf\fP-подобными экранирующими элементами, такими как \fI%x\fR в нем.
Например, для обращения к курсору задается функция 
.B cup 
, использующая два параметра:
строку и столбец для обращения.
(Строки и столбцы нумеруются с нуля и относятся к 
физическому экрану, видимому пользователю, а не к какой-либо невидимой памяти.)
Если терминал имеет адресацию курсора относительно памяти, 
это можно указать с помощью 
.mrcup .
.PP
Механизм параметров использует стек и специальные коды \fB%\fP 
для управления им.
Обычно последовательность помещает один из параметров 
в стек, а затем печатает его в некотором формате.
Печать (например, "%d") - это особый случай.
Другие операции, включая "%t", извлекают их операнд из стека.
Следует отметить, что часто необходимы более сложные операции, 
например, в строке \fBsgr\fP.
.PP
Кодировки \fB%\fR имеют следующие значения:
.PP 
.TP 5
\fB%%\fP 
выходы \*(`%\*("
.TP
\fB%\fP\fI[[\fP:\fI]флаги][ширина[.точность]][\fP\fBdoxXs\fP\fI]\fP 
как и в \fBprintf\fP(3), флагами являются \fI[\-+#]\fP и \fIspace\fP.
Используйте \*(`:\*(", чтобы разрешить следующему символу быть \*(`\-\*(" флагом, 
избегая интерпретации \*(`%\-\*(" как оператора.
.TP 
\f(CW%c\fP
выведите \fIpop()\fP как %c в \fBprintf\fP 
.TP
\fB%s\fP 
выведите \fIpop()\fP как %s в \fBprintf\fP 
.TP
\fB%p\fP\fI[1\-9]\fP
нажмите \fIi\fp'й параметр 
.TP 
\fB%P\fP\fI[a\-z]\fP 
установите динамическую переменную \fI[a\-z]\fP в \fIpop()\fP 
.TP
\fB%g\fP\fI[a\-z]/\fP
получаем динамическую переменную \fI[a\-z]\fP и нажимаем на нее 
.TP 
\fB%P\fP\fI[A\-Z]\fP 
установите статическую переменную \fI[a\-z]\fP в \fIpop()\fP 
.TP
\fB%g\fP\fI[A\-Z]\fP 
получаем статическую переменную \fI[a\-z]\fP и нажимаем на нее 
.IP
Термины \*(`статический\*(" и \*(`динамический\*(" вводят в заблуждение.
Исторически это просто два разных набора переменных, 
значения которых не сбрасываются между вызовами \fBtparm\fP(3X).
Однако этот факт не задокументирован в других реализациях.
Использование этого негативно скажется на переносимости для других реализаций.
.TP
\fB%'\fP\fIc\fP\fB'\fP 
константа символа \fIc\fP 
.TP
\fB%{\fP\fInn\fP\fB}\fP 
целочисленная константа \fInn \fP 
.TP
\fB%l\fP 
нажмите кнопку strlen (pop)
.TP
\fB%+\fP, \fB%\-\fP, \fB%*\fP, \fB%/\fP, \fB%m\fP 
арифметика (%m - это \fImod\fP): \fIpush(pop() op pop()) \fP 
.TP
\fB%&\fP, \fB%|\fP, \fB%^\fP 
битовые операции (И, ИЛИ и исключающее-ИЛИ): \fIpush(pop() op pop())\fP 
.TP
\fB%=\fP, \fB%>\fP, \fB%<\fP 
логические операции: \fIpush(pop() op pop())\fP 
.TP
\fB%A\fP, \fB%O\fP 
логические операции AND и OR (для условных выражений)
.TP 
\fB%!\fP, \fB%~\fP 
унарные операции (логическое дополнение и дополнение битов): \fIpush(op pop())\fP 
.TP
\fB%i\fP 
добавьте 1 к первым двум параметрам (для терминалов ANSI)
.TP 
\fB%?\fP \fIexpr\fP \fB%t\fP \fIthenpart\fP \fB%e\fP \fIelsepart\fP \fB%;\fP
Это формирует if-then-else .
\fB%e\fP \fIelsepart\fP является необязательным.
Обычно \fB%?\fP \fIexpr\fP часть помещает значение в стек, 
а \fB%t\fP извлекает его из стека, проверяя, не равно ли оно нулю (true).
Если оно равно нулю (false), управление переходит к части \fB%e\fP (else).
.IP
Можно сформировать else-if в стиле алгола 68:
.RS 
\fB%?\fP c\ d1 \ u \ fB% t\fP b \ d1 \ u \ fB% e\fP c \ d2 \ u \ fB% t\ fP b \ d2 \ u \ fB% e\ fP c \ d3 \ u \ fB% t\ fP b \ d3 \ u \ fB% e \ fP c \ d4\ u \ fB% t \ fP b \ d4 \ u \ fB% e \ fP \ fB%; \ fP 
.RE 
.IP 
где c \di \u - условия, b \ di \u - тела.
.IP
Используйте опцию \fB\-f\fP в \fBtic\fP или \fBinfocmp\fP, чтобы просмотреть 
структуру if-then-else.
Некоторые строки, например, \fBsgr\fP, могут быть очень сложными при написании 
в одной строке.
Опция \fB\-f\fP разбивает строку на строки с отступами.
.PP 
Двоичные операции выполняются в постфиксной форме с операндами в обычном порядке.
То есть, чтобы получить x \-5, нужно было бы использовать "%gx%{5}%-".
\в FB%П\FP и \или FB%г\fP переменные
сохраняются на протяжении побег-строку оценок.
.PP
Рассмотрим HP2645, который, чтобы попасть в строку 3 и столбец 12, должен быть 
отправлен с дополнением \ eE & a12c03Y в течение 6 миллисекунд.
Обратите внимание, что порядок 
строк и столбцов здесь инвертирован, и что строка и столбец 
напечатаны как две цифры.
Таким образом, его возможность \fBcup\fR равна \*(`cup=6\eE&%p2%2dc%p1%2dY\*(".
.PP
Микротерм \ s-1ACT-IV \ s0 требует отправки текущей строки и столбца 
перед ним следует a \ fB ^ T \ fR, при этом строка и столбец просто кодируются двоичным кодом, 
\*(`cup=^T%p1%c%p2%c\*(".
Терминалы, использующие \*(`%c\*(", должны иметь возможность 
перемещать курсор в обратном направлении (\fBcub1\fR), 
и переместить курсор на одну строку вверх по экрану (\fBcuu1\fR).
Это необходимо, поскольку передача \fB\en\fR
\fB^D\fR и \fB\er\fR не всегда безопасна, поскольку система может изменить или отбросить их.
(Библиотечные процедуры, работающие с terminfo, устанавливают режимы tty, так что 
вкладки никогда не раскрываются, поэтому отправка \ et безопасна.
Оказывается, это важно для Ann Arbor 4080.)
.PP
Последним примером является \s-1LSI ADM \s0-3a, который использует строку и столбец
смещается пустым символом, таким образом \*(`cup=\eE=%p1%''%+%c%p2%' '%+%c\*(".
После отправки \*(`\ eE= \*(", это вводит первый параметр, вводит значение 
ASCII для пробела (32), добавляет их (вводит сумму в стек 
вместо двух предыдущих значений) и выводит это значение в виде символа.
Затем то же самое делается для второго параметра.
С помощью стека возможна более сложная арифметика.
.PP 
.SS Движения курсора 
.PP
Если в терминале есть быстрый способ переместить курсор домой 
(в самый верхний левый угол экрана), то это может быть задано как 
\fBhome\fR; аналогично быстрый способ добраться до нижнего левого угла 
может быть задан как \fBll\fR; для этого может потребоваться переход вверх с помощью \fBcuu1\fR 
из начальной позиции, 
но программа никогда не должна делать это сама (если это не делает \fBll \ fR ), потому что она 
не может делать никаких предположений об эффекте перемещения вверх из начальной позиции.
Обратите внимание, что начальная позиция такая же, как при обращении к (0,0): 
в верхний левый угол экрана, а не в память.
(Таким образом, последовательность \eEH на терминалах HP нельзя использовать для 
.Главная страница .)
.PP
Если терминал имеет абсолютную адресацию курсора по строке или столбцу, 
они могут быть заданы как однопараметрические возможности
.B hpa
(абсолютное горизонтальное положение) 
и 
.B vpa 
(абсолютное вертикальное положение).
Иногда они короче, чем более общие два параметра 
последовательность (как в случае с hp2645), и их можно использовать предпочтительнее, чем 
.Чашка BR .
При наличии параметризованных локальных движений (например, переместить
.I n 
пробелы справа) они могут быть заданы как 
.BR cud , 
.BR cub , 
.BR cuf , 
и 
.B cuu 
с одним параметром, указывающим, сколько пробелов нужно переместить.
Они в первую очередь полезны, если в терминале нет
.Чашка, 
такая как \s-1TEKTRONIX\s+1 4025.
.PP
Если терминалу необходимо находиться в специальном режиме при запуске 
программы, которая использует эти возможности, 
коды для входа и выхода из этого режима могут быть указаны как \fBsmcup\fR и \fBrmcup\fR.
Это связано, например, с терминалами, подобными Concept, с более чем 
одной страницей памяти.
Если терминал имеет только адресацию курсора относительно памяти, а не экрана 
относительную адресацию курсора, в терминал должно быть встроено окно размером с один экран. 
чтобы адресация курсора работала должным образом.
Это также используется для \s-1TEKTRONIX \s + 1 4025, 
где
.B smcup 
задает символ команды, который используется terminfo.
Если последовательность \fBsmcup\fP не восстановит экран после
Выводится последовательность \fBrmcup\fP (в состояние, предшествующее выводу
\fBrmcup\fP), укажите \fBnrrmc\fP.
.PP 
.SS Область  очищается 
.PP
Если терминал может очиститься от текущей позиции до конца строки 
, оставив курсор там, где он есть, это должно быть указано как \fBel \fR .
Если терминал может очиститься от начала строки до текущей 
позиции включительно, оставив 
курсор там, где он находится, это должно быть указано как \fBel1 \fP .
Если терминал может перемещаться из текущего положения в конец экрана 
, то это должно быть указано как \fBed \fR .
\fBEd \ fR определяется только из первого столбца строки.
(Таким образом, это может быть смоделировано запросом на удаление большого количества строк, 
если a true 
.B ed 
недоступен.)
.PP 
.SS Insert/delete line and vertical motions 
.PP
Если терминал может открыть новую пустую строку перед строкой, на которой находится курсор 
, это должно быть указано как \fBil1\fR; это делается только с первой 
позиции строки.
Затем курсор должен появиться на вновь появившейся пустой строке.
Если терминал может удалить строку, на которой находится курсор, то это 
должно быть указано как \fBdl1\fR; это делается только с первой позиции на 
строке, подлежащей удалению.
Версии 
.B il1 
и 
.B dl1
которые принимают один параметр и вставляют или удаляют столько строк, сколько могут 
быть заданы как 
.B il 
и 
.BR dl .
.PP
Если терминал имеет настраиваемую область прокрутки (например, vt100)
команда для ее установки может быть описана с помощью функции 
.B csr 
, которая принимает два параметра:
верхняя и нижняя строки области прокрутки.
Положение курсора, увы, не определено после использования этой команды.
.PP
Можно получить эффект вставки или удаления строки с помощью 
.B csr 
в правильно выбранной области; команды 
.B sc 
и 
.B rc 
(сохранить и восстановить курсор) могут быть полезны для обеспечения того, чтобы 
синтезированная вами строка вставки / удаления не перемещала курсор.
(Обратите внимание, что библиотека \fBncurses\fR(3X) выполняет этот синтез 
автоматически, поэтому вам не нужно составлять строки вставки / удаления для 
записи с \fBcsr\fR ) .
.PP
Еще одним способом создания функций insert и delete может быть использование комбинации 
index с функцией блокировки памяти, которая есть на некоторых терминалах (например, в HP \ -700 / 90 
series, которая, однако, также имеет функцию insert / delete).
.PP 
Вставка строк в верхней или нижней части экрана также может быть 
выполнена с помощью
.B ri 
или 
.B ind 
на многих терминалах без правильной строки вставки / удаления,
и часто работает быстрее даже на терминалах с такими функциями.
.PP
Логическое fBnon_dest_scroll_region \\FR должен быть установлен, если каждая прокрутка
окно фактически представляет собой вид на порт на экран-размер холста.
Чтобы протестировать 
эту возможность, создайте область прокрутки в середине экрана, 
напишите что-нибудь в нижней строке, переместите курсор в верхнюю часть области, 
и сделайте \fBri\fR, за которым следует \fBdl1\fR или \fBind\fR.
Если данные, прокрученные 
в нижней части области с помощью \fBri\fR, снова появятся, то прокрутка 
является неразрушающей.
Системные проклятия V и XSI ожидают, что \fBind\fR, \fBri\fR, 
\fBindn\fR и \fBrin\fR будут имитировать деструктивную прокрутку; их 
документация предостерегает вас не определять \fBcsr\fR, если это не верно.
Эта реализация \fBcurses\ fR более либеральна и будет выполнять явное удаление данных 
после прокрутки, если определен \fBndsrc \ fR.
.PP
Если терминал имеет возможность определять окно как часть 
памяти, на которую влияют все команды, 
оно должно быть задано в виде параметризованной строки 
.BR wind .
Четырьмя параметрами являются начальная и конечная строки в памяти 
и начальный и конечный столбцы в памяти, в таком порядке.
.PP
Если терминал может сохранить память дисплея, указанную выше, то
должна быть указана возможность \fBda \ fR; если память дисплея может быть сохранена 
ниже следует указать \fBdb \fR.
Это указывает на 
что удаление строки или прокрутка могут привести к появлению непустых строк снизу вверх 
или что прокрутка назад с помощью \fBri\fR может привести к появлению непустых строк.
.PP 
.SS Вставка / удаление символа 
.PP
Существует два основных типа интеллектуальных терминалов в отношении 
вставки / удаления символа, которые могут быть описаны с помощью
.I terminfo.
Наиболее распространенные операции вставки / удаления символов затрагивают только символы 
в текущей строке и жестко смещают символы от конца строки.
Другие терминалы, такие как Concept 100 и Perkin Elmer Owl, позволяют 
различать напечатанные и нетипизированные пробелы на экране, смещая 
при вставке или удалении отображается только нетипизированный пробел на экране, который 
либо удаляется, либо расширяется до двух нетипизированных пробелов.
.PP
Вы можете определить, какой 
тип терминала у вас есть, очистив экран и затем введя 
текст, разделяемый движениями курсора.
Тип \*(`Азбука\ \ \ \ деф\*(" использование местных
курсор движений (не пробелов) между \*(`азбука\*(" и \*(`деф\*(".
Затем установите курсор перед \*(`abc\*(" и переведите терминал в режим вставки 
.
Если ввод символов приводит к смещению остальной части строки 
жестко и символы выпадают с конца, то ваш терминал не делает 
различия между пробелами и нетипизированными позициями.
Если \*(`abc \ *(" 
переходит в \*(`def \* (", которые затем перемещаются вместе в конце 
текущая строка и на следующую, когда вы вставляете, у вас есть терминал второго типа 
, и он должен предоставлять возможность \ fBin \ fR, что означает
\*(`вставить null\*(".
.PP 
Хотя это два логически отдельных атрибута (однострочный или многострочный 
режим вставки и специальная обработка нетипизированных пробелов), мы не видели никаких 
терминалов, режим вставки которых нельзя описать с помощью единственного атрибута.
.PP 
Terminfo может описывать как терминалы, у которых есть режим вставки, так и терминалы 
, которые отправляют простую последовательность для открытия пустой позиции в текущей строке.
Укажите как \fBsmir\fR последовательность для перехода в режим вставки.
Укажите как \fBrmir\fR последовательность для выхода из режима вставки.
Теперь укажите в виде \fBich1\fR любую последовательность, которую необходимо отправить непосредственно перед отправкой 
символ, который нужно вставить.
Большинство терминалов с истинным режимом вставки 
не выдадут \fBich1 \ fR; терминалы, которые отправляют последовательность для открытия экрана 
позиция должна выдавать ее здесь.
.PP
Если в вашем терминале есть оба варианта, режим вставки обычно предпочтительнее \fBich1 \ fR .
Технически, вы не должны указывать оба варианта, если только терминал действительно не требует 
оба варианта должны использоваться в комбинации.
Соответственно, некоторые не проклинает приложения вам
запутался, если оба присутствуют; симптом удваивается персонажей в обновлении
с помощью команды вставить.
В настоящее время это требование встречается редко; большинство последовательностей \fBich \ fR не требуют 
предыдущего smir, и большинство режимов вставки smir не требуют \fBich1\fR 
перед каждым символом.
Следовательно, новый \fBcurses\fR фактически предполагает, что это 
так и есть, и использует либо \fBrmir\fR/\fBsmir\fR, либо \fBich\fR/\fBich1\fR как 
уместно (но не то и другое вместе).
Если вам нужно написать запись, которая будет использоваться в разделе 
новые проклятия для терминала, достаточно старого, чтобы нуждаться в обоих, включите последовательности 
\fBrmir\fR/\fBsmir\fR в \fBich1\fR .
.PP
Если требуется дополнение после вставки, укажите это в виде количества миллисекунд 
в \fBip \fR (строковый вариант).
Любая другая последовательность, которая может потребоваться. 
отправка после вставки одного символа также может быть задана в \fBip\fR .
Если вашему терминалу необходимо перевести оба параметра в \*(`режим вставки \*(" и 
специальный код, который должен предшествовать каждому вставленному символу, тогда оба 
.BR smir / rmir 
и 
.B ich1
может быть задано, и будут использоваться оба параметра.
Функция 
.B ich 
с одним параметром, 
.IR n , 
повторит эффекты функции 
.B ich1
.I n 
раз.
.PP
Если между введенными символами необходимо заполнение, но его нет 
в режиме вставки укажите это в виде количества миллисекунд для заполнения в \fBrmp\fP .
.PP
Иногда бывает необходимо перемещаться в режиме вставки 
для удаления символов в одной строке (например, если после 
позиции вставки есть табуляция).
Если ваш терминал допускает перемещение в режиме вставки 
вы можете предоставить возможность \fBmir \ fR ускорить вставку 
в этом случае.
Пропуск \fBmir \ fR повлияет только на скорость.
Некоторые терминалы 
(особенно Datamedia) не должны иметь \fBmir\fR из-за способа, которым они работают 
режим вставки.
.PP 
Наконец, вы можете указать
.B dch1 
для удаления одного символа, 
.B dch 
с одним параметром, 
.IR n , 
для удаления
.Введите n символов, 
и режим удаления, указав \fBsmdc\fR и \fBrmdc \fR 
для входа в режим удаления и выхода из него (любой режим, в который необходимо перевести терминал 
для 
.B dch1 
для работы).
.PP 
Команда на стирание
.I n 
символов (эквивалентно выводу
.I n 
пробелы без перемещения курсора) 
может быть задан как 
.B ech 
с одним параметром.
.PP 
.SS "Выделение, подчеркивание и видимые колокольчики" 
.PP
Если ваш терминал имеет один или несколько видов атрибутов отображения, 
они могут быть представлены несколькими различными способами.
Вам следует выбрать одну из форм отображения как 
\f2 режим выделения \ fR, 
представляющий хороший, высококонтрастный, удобный для глаз формат, 
для выделения сообщений об ошибках и других средств привлечения внимания.
(Если у вас есть выбор, подойдет обратное видео плюс полусветлое освещение 
или только обратное видео.)
Последовательности для входа в режим ожидания и выхода из него 
заданы как \fBsmso\fR и \fBrmso\fR соответственно.
Если код для перехода в режим standout или выхода из него 
оставляет одно или даже два пустых места на экране, 
как это делают TVI 912 и Teleray 1061, 
затем следует указать \fBxmc\fR, чтобы указать, сколько пробелов осталось.
.PP
Коды для начала подчеркивания и окончания подчеркивания могут быть заданы как \fBsmul\fR 
и \fBrmul\fR соответственно.
Если в терминале есть код для подчеркивания текущего символа и перемещения 
курсора на один пробел вправо, 
например, микротерм Mime, 
это может быть задано как \fBuc\fR .
.PP 
Другие возможности для перехода в различные режимы подсветки включают
.B blink 
(мигающий)
.B bold 
(жирный или очень яркий)
.B dim 
(тусклый или наполовину яркий)
.B invis 
(заглушающий или невидимый текст)
.B prot 
(защищенный)
.B rev 
(обратное видео)
.B sgr0
(выключить 
.I все режимы атрибутов 
)
.B smacs 
(войти в режим альтернативного набора символов) 
и 
.B rmacs
(выйти из режима альтернативного набора символов).
Включение любого из этих режимов по отдельности может приводить к отключению, а может и не приводить к отключению других режимов.
.PP
Если существует последовательность для установки произвольных комбинаций режимов, 
это должно быть задано как 
.B sgr 
(набор атрибутов), 
принимая 9 параметров.
Каждый параметр равен либо 0, либо отличен от нуля, так как соответствующий атрибут включен или выключен.
Представлены 9 параметров в следующем порядке: 
выделенный, подчеркнутый, обратный, мигающий, затемненный, жирный, пустой, защитный, альтернативный 
набор символов.
Не все режимы должны поддерживаться 
.BR sgr , 
только те, для которых существуют соответствующие отдельные команды атрибутов.
.PP
Например, DEC vt220 поддерживает большинство режимов:
.PP 
.TS 
центр;
l l l 
l l l l 
lw18 lw14 l.
\escape-последовательность атрибута параметра fBtparm\fP

нет, нет \\ E[0m 
p1 выделенный \\ E[0;1; 7m
p2 подчеркнутый \\ E[0; 4m
p3 обратный \\ E[0;7m
p4 мигающий \\ E [0; 5m
p5 затемненный недоступен
p6 выделенный жирным шрифтом \\ E [0; 1m
p7 невидимый \\ E [0; 8m
p8 защита не используется 
p9 набор символов ^ O (выкл.) ^ N (вкл.)
.TE 
.PP
Мы начинаем каждую escape-последовательность с отключения всех существующих режимов, поскольку 
нет быстрого способа определить, активны ли они.
Выделяющийся рисунок создан как комбинация обратного и жирного шрифта.
Терминал vt220 имеет режим защиты, 
хотя он обычно не используется в sgr 
поскольку он защищает символы на экране от стирания хостом.
Режим набора альтернативных символов также отличается тем, что он либо ^ O, либо ^ N, 
в зависимости от того, выключен он или включен.
Если включены все режимы, результирующая последовательность будет \\E[0;1;4;5;7; 8m ^ N.
.PP
Некоторые последовательности являются общими для разных режимов.
Например, ;7 выводится, когда либо p1, либо p3 имеют значение true, то есть, если 
включены либо выделенный, либо обратный режимы.
.PP 
Запись вышеупомянутых последовательностей вместе с их зависимостями дает результат 
.PP 
.ne 11 
.TS 
center;
l l l 
l l ll 
lw18 lw14 l.
\fBsequence, когда выводить перевод terminfo\fP

.ft CW 
\\E[0 always \\E[0 
;1 если p1 или p6 %?%p1%p6%|%t;1%;
;4 если p2 %?%p2%|%t; 4%;
; 5 если p4 %?%p4%|%t; 5%;
;7 если p1 или p3 %?%p1%p3%|%t;7%;
;8 если p7 %?%p7%|%t;8%;
m always m 
^N или ^ O, если p9 ^ N, иначе ^ O %?%p9%t^ N% e ^ O%;
.ft R 
.TE 
.PP
Объединение всего этого в последовательность sgr дает:
.PP 
.ft CW 
.nf 
 sgr=\\E[0%?%p1%p6%|%t; 1%;%?%p2%t; 4%;%?%p4%t;5%;
 %?%p1%p3%|%t;7%;%?%p7%t; 8%; m%?%p9%t\\016%e\\017%;, 
.fi 
.ft R 
.PP
Помните, что если вы указываете sgr, вы также должны указать sgr0.
Кроме того, некоторые реализации полагаются на то, что sgr указывается, если sgr0, 
Однако не все записи terminfo обязательно содержат строку sgr.
Многие записи terminfo являются производными от записей termcap 
в которых нет строки sgr.
Единственным недостатком добавления строки sgr является то, что termcap также 
предполагает, что sgr0 не выходит из режима альтернативного набора символов.
.PP 
Терминалы с ошибкой \*(`magic cookie \*(" 
.RB ( xmc )
храните специальные \*(`cookies \*(", когда они получают последовательности настройки режима, 
которые влияют на алгоритм отображения, а не содержат дополнительных битов для 
каждого символа.
Некоторые терминалы, такие как HP 2621, автоматически выходят из режима standout 
при переходе на новую строку или указании адреса курсора.
Программы, использующие выделенный режим, должны выйти из выделенного режима перед 
перемещением курсора или отправкой новой строки, 
если только не присутствует функция 
.B msgr 
, подтверждающая, что перемещение в выделенном режиме безопасно.
.PP
Если в терминале есть 
способ незаметного мигания экрана для указания ошибки (замена звонка) 
тогда это может быть задано как \fBflash\fR; курсор не должен перемещаться.
.PP
Если курсор нужно сделать более заметным, чем обычно, когда он
не в нижней строке (чтобы превратить, например, немигающее подчеркивание в 
более удобный для поиска блок или мигающее подчеркивание)
укажите эту последовательность как 
.BR cvvis .
Если есть способ сделать курсор полностью невидимым, укажите это как 
.BR civis .
Следует указать возможность
.B cnorm 
, которая отменяет эффекты обоих этих режимов.
.PP
Если ваш терминал правильно генерирует подчеркнутые символы 
(без каких-либо специальных кодов, необходимых)
даже если он не перерисовывает символы, 
тогда вам следует предоставить возможность \fBul\fR .
Если символ, опережающий другой, оставляет оба символа на экране, 
укажите возможность \FBOs \fP.
Если зачеркивания можно стереть пробелом, 
то это следует указать, указав \fBeo\fR.
.PP 
.SS Клавиатура  и функциональные клавиши 
.PP
Если терминал оснащен клавиатурой, которая передает коды при нажатии клавиш, 
эта информация может быть предоставлена.
Обратите внимание, что с терминалами, на которых клавиатура работает только в локальном режиме, невозможно работать 
(это относится, например, 
к клавишам HP 2621 без смещения).
Если клавиатура может быть установлена передавать или не передавать,
дать эти коды как \\fBsmkx FR и fBrmkx \\пт.
Иначе клавиатуры предполагается всегда передают.
.PP
Коды, отправляемые стрелками влево, вправо, вверх, вниз, 
и клавишами home, могут быть указаны в виде 
\fBkcub1, kcuf1, kcuu1, kcud1, \fRand\fB khome\fR соответственно.
Если есть функциональные клавиши, такие как f0, f1, ..., f10, коды, которые они отправляют 
могут быть указаны как \fBkf0, kf1, ..., kf10\fR.
Если у этих клавиш есть метки, отличные от стандартных f0 - f10, метки 
могут быть заданы как \fBlf0, lf1, ..., lf10\fR.
.PP
Могут быть заданы коды, передаваемые некоторыми другими специальными клавишами: 
.bP 
.B kll 
(home down), 
.bP 
.B kbs 
(backspace), 
.bP
.B ktbc 
(очистить все вкладки), 
.bP
.B kctab 
(очистить табуляцию в этом столбце), 
.bP
.B kclr 
(очистить экран или стереть клавишу), 
.bP 
.B kdch1 
(удалить символ), 
.bP 
.B kdl1 
(удалить строку), 
.bP 
.B krmir 
(выход из режима вставки), 
.bP
.B kel 
(очистить до конца строки), 
.bP
.B ked 
(очистить до конца экрана), 
.bP
.B kich1 
(вставить символ или перейти в режим вставки), 
.bP
.B kil1 
(вставить строку), 
.bP 
.B knp 
(следующая страница), 
.bP
.B kpp 
(предыдущая страница), 
.bP
.B вид 
(прокрутка вперед / вниз), 
.bP 
.B kri 
(прокрутка назад / вверх), 
.bP 
.B khts 
(установите табуляцию в этом столбце).
.PP
Кроме того, если на клавиатуре имеется набор клавиш размером 3 на 3, включая четыре клавиши со стрелками 
, остальные пять клавиш могут быть заданы как 
.BR ka1 ,
.BR ka3 ,
.BR kb2 ,
.BR kc1, 
и 
.BR kc3 .
Эти клавиши полезны, когда необходимы эффекты направляющей панели 3 на 3.
.PP
Строки для программных функциональных клавиш могут быть заданы в виде 
.BR pfkey , 
.BR pfloc , 
и 
.BR pfx .
Строка для надписей экрана программирования должна быть указана как \fBpln\fP.
Каждая из этих строк принимает два параметра: номер функциональной клавиши для 
программы (от 0 до 10) и строку для ее программирования.
Номера функциональных клавиш вне этого диапазона могут программировать неопределенные клавиши 
в зависимости от терминала.
Разница между этими способностями заключается в том, что
.Pfkey б 
причины нажатием заданной клавиши, чтобы быть таким же, как на вводе в
учитывая строку;
.B pfloc 
вызывает выполнение строки терминалом на локальном языке; и 
.B pfx 
вызывает передачу строки на компьютер.
.PP
Возможности \fBnlab\fP \fBlw\FP и \fBlh\fP
определить количество программируемых
этикетки на экране и их ширину и высоту.
Если есть команды для включения и выключения надписей, 
введите их в \fBsmln\fP и \fBrmln\fP .
\fBsmln\fP обычно выводится после одной или нескольких последовательностей pln 
чтобы убедиться, что изменение становится видимым.
.PP 
.SS Вкладки и инициализация 
.PP
Некоторые возможности используются только для вкладок:
.bP
Если в терминале есть аппаратные вкладки, команда для перехода к следующей остановке вкладки 
может быть задана как 
.B ht 
(обычно control /I).
.bP 
Команда \*(`back-tab\*(", которая перемещает влево к предыдущей остановке табуляции, может быть 
задана как 
.BR cbt .
.IP
По соглашению, если режимы телетайпа указывают на то, что вкладки 
разворачиваются компьютером, а не отправляются на терминал, 
программам не следует использовать 
.B ht 
или 
.B cbt 
даже если они присутствуют, поскольку у пользователя могут отсутствовать ограничители табуляции 
установлены должным образом.
.bP 
Если в терминале есть аппаратные вкладки, которые изначально устанавливаются каждый
.I n 
пробелы при включении терминала, 
указывается числовой параметр 
.B it 
, показывающий количество пробелов, на которые установлены табуляции.
.IP
Функция \fBit\fP обычно используется командой \fBtset\fP 
для определения, следует ли устанавливать режим аппаратного расширения табуляции, 
и следует ли устанавливать остановки табуляции.
Если в терминале есть ограничители табуляции, которые можно сохранить в энергонезависимой памяти, 
в описании terminfo можно предположить, что они установлены правильно.
.PP 
Другие возможности 
включают 
.bP 
.BR is1 ,
.BR is2 , 
и 
.BR is3 , 
строки инициализации терминала, 
.bP 
.BR iprog , 
имя пути к программе, которая будет запущена для инициализации терминала, 
.bP
и \fBif\fR, имя файла, содержащего длинные строки инициализации.
.PP
Ожидается, что эти строки переведут терминал в режимы, совместимые 
с остальной частью описания terminfo.
Обычно они отправляются на терминал с помощью 
.I init 
опции программы \fBtput \fP при каждом входе пользователя в систему.
Они будут распечатаны в следующем порядке:
.RS 
.TP 
запустите программу
.B iprog 
.TP 
вывод 
.br 
\fBis1 \ fP и 
.br 
\ fBis2 \ fP 
.TP 
установите поля, используя
\fBmgc\fP или 
.br 
\fBsmglp\fP и \fBsmgrp \ fP или 
.br 
\fBsmgl\fP и \fBsmgr \fP 
.TP 
установите вкладки с помощью 
.B tbc 
и 
.B hts 
.TP 
распечатайте файл
\fBif\fP 
.TP 
и, наконец, выводите
\fBis3\fP.
.RE 
.PP
Большая часть инициализации выполняется с помощью 
.BR is2 .
Специальные режимы терминала могут быть настроены без дублирования строк 
путем ввода общих последовательностей в 
.B is2 
и особых случаев в 
.B is1 
и 
.BR is3 .
.PP
Набор последовательностей, которые выполняют более жесткий сброс из совершенно неизвестного состояния 
может быть задан как 
.BR rs1 , 
.BR rs2 ,
.B rf 
и 
.BR rs3 , 
аналогично 
.B равно1 , 
.B равно2 , 
.B, если 
и 
.B равно3 
соответственно.
Эти строки выводятся 
с помощью опции \fIreset\fP в \fBtput\fP, 
или программой \fBreset\fP 
(псевдоним \fBtset\fP),
который используется, когда терминал переходит в заклинивающее состояние.
Команды обычно помещаются в 
.BR rs1 ,
.B rs2
.B rs3 
и 
.B rf 
только в том случае, если они создают раздражающие эффекты на экране и не являются 
необходимыми при входе в систему.
Например, команда для перевода vt100 в режим 80 столбцов 
обычно является частью 
.BR is2 , 
но это вызывает раздражающий сбой экрана и обычно не выполняется. 
необходимо, поскольку терминал обычно уже находится в режиме 80 столбцов.
.PP
Программа \fBreset\fP записывает строки, включая 
.BR iprog , 
и т.д., в том же порядке, что и 
.I init
программа, использующая 
.BR rs1 , 
и т.д. Вместо 
.BR is1, 
и т.д.
Если есть какое-либо из 
.BR rs1 , 
.BR rs2 , 
.BR rs3, 
или 
.B rf 
отсутствуют строки возможности сброса, 
программа \fBreset\fP 
возвращается к соответствующей строке возможности инициализации.
.PP
Если существуют команды для установки и очистки табуляций, они могут быть заданы как 
.B tbc 
(очистить все табуляторы) 
и 
.B hts 
(установите табуляцию в текущем столбце каждой строки).
Если для установки вкладок требуется более сложная последовательность, чем может быть описано здесь 
, последовательность может быть помещена в 
.B is2 
или 
.BR, если .
.PP
Команда \fBtput reset\fP использует те же строки возможностей 
что и команда \fBreset\fP, 
хотя две программы (\fBtput\fP и \fBreset\fP) 
предоставляют различные параметры командной строки.
.PP
На практике эти возможности terminfo не часто используются при 
инициализации вкладок 
(хотя они необходимы для программы \fBtabs\fP): 
.bP 
Почти все аппаратные терминалы (по крайней мере, те, которые поддерживали вкладки)
инициализировал их для каждого столбца \ FIIGHT \ fP:
.IP
Единственным исключением были AT & T серии 2300, 
которые устанавливали вкладки для каждого столбца \ fIfive \ fP.
.bP 
В частности, разработчики аппаратных терминалов, которые обычно используются
в качестве моделей для современных эмуляторов терминала предоставлена документация, демонстрирующая 
что столбцы \fIeight\fP были стандартными.
.bP 
Из-за этого программы инициализации терминала
\fBtput\fP и \fBtset\fP 
используйте команду 
\fBtbc\fP (\fBclear_all_tabs\fP) и 
Возможности \fBhts\fP (\fBset_tab\fP) напрямую 
только при возможности \fBit\fP (\fBinit_tabs\fP) 
имеет значение, отличное от \fIeight\fP.
.SS Задержки и отступы 
.PP
Многие старые и более медленные терминалы не поддерживают ни XON / XOFF, ни DTR 
установление связи, включая терминалы для копирования на бумажных носителях и некоторые очень архаичные ЭЛТ 
(включая, например, DEC VT100s).
Для этого могут потребоваться дополнительные символы 
после определенных движений курсора и изменений экрана.
.PP
Если терминал использует квитирование xon / xoff для управления потоком (то есть 
он автоматически отправляет ^ S обратно хосту, когда его входные буферы 
близки к заполнению), установите 
.xon .
Эта функция подавляет выделение отступов.
Вы также можете установить ее 
эффективно для консольных устройств с отображением памяти, на которых нет ограничения скорости.
Информация о заполнении по-прежнему должна быть включена, чтобы подпрограммы могли 
принимать более обоснованные решения относительно относительных затрат, но фактические символы заполнения 
передаваться не будут.
.PP
Если задано значение \fBpb\fR (padding baud rate), заполнение подавляется при скоростях передачи в бодах 
ниже значения \fBpb\fR.
Если запись не имеет скорости передачи в бодах с заполнением, то 
передается ли заполнение или нет, полностью контролируется \fBxon \fR.
.PP
Если терминалу требуется не нулевой символ в качестве pad, а что-то другое, 
тогда это может быть задано как \fBpad\fR .
Используется только первый символ строки 
.B pad 
.
.PP 
.SS Строки состояния
Некоторые терминалы имеют дополнительную \*(`строку состояния \*(", которая обычно не используется 
программным обеспечением (и, следовательно, не учитывается в возможностях терминала \ fBlines \ fR).
.PP
В простейшем случае в строке статуса, которая находится курсор-адресом, но не
часть основная область прокрутки на экране; Heathkit Н19 имеет
в строке статуса подобного рода, как бы в 24-линия ВТ100 с 23-линия
перечисляя области созданы при инициализации.
На эту ситуацию указывает 
возможность \fBhs \ fR.
.PP
Некоторым терминалам со строками состояния требуются специальные последовательности для доступа к 
строке состояния.
Они могут быть выражены в виде строки с одним параметром
\fBtsl\ fR, который переводит курсор в заданный столбец с нулевым началом в строке состояния 
.
Функция \fBfsl\ fR должна вернуться на главный экран.
положение курсора перед последним \fBtsl\fR.
Возможно, потребуется внедрить 
строковые значения \fBsc\fR (сохранить курсор) и \fBrc\fR (восстановить курсор) 
в \fBtsl\fR и \fBfsl\fR для достижения этого.
.PP
Обычно предполагается, что строка состояния имеет ту же ширину, что и ширина 
терминала.
Если это неверно, вы можете указать это с помощью числового параметра 
capability \fBwsl\fR.
.PP 
Команда для стирания или очистки строки состояния может быть указана как \fBdsl\fR.
.PP
Логическая возможность \fBeslok \fR указывает, что управляющие последовательности, табуляции 
и т.д. Обычно работают в строке состояния.
.PP
Реализация \fBncurses\fR пока не использует ни одну из этих возможностей.
Они задокументированы здесь на случай, если они когда-нибудь станут важными.
.PP 
.SS Линейная графика 
.PP
Многие терминалы имеют альтернативные наборы символов, полезные для рисования форм.
Terminfo и \fBcurses \ fR имеют встроенную поддержку 
для большинства символов рисования 
поддерживаются VT100, с добавлением некоторых символов из AT & T 4410v1.
Этот альтернативный набор символов может быть указан с помощью функции \fBacsc\fR.
.PP 
.TS H 
center;
l l l l l 
l l l l l
_ _ _ _ _ 
lw25 lw10 lw6 lw6 l. 
.\".TH 
\fBGlyph ACS Ascii acsc acsc\fR
\fBName Name Значение символа по умолчанию \fR
стрелка, указывающая вправо ACS_RARROW > + 0x2b 
стрелка, указывающая влево ACS_LARROW < , 0x2c 
стрелка, указывающая вверх ACS_UARROW ^ \- 0x2d 
стрелка, указывающая вниз ACS_DARROW v . 0x2e 
сплошной квадратный блок ACS_BLOCK # 0 0x30
бриллиант ACS_DIAMOND + ` 0x60 
шахматная доска (пунктирная) ACS_CKBOARD: a 0x61 
символ степени ACS_DEGREE \e f 0x66
плюс / минус ACS_PLMINUS # g 0x67
доска квадратов ACS_BOARD # h 0x68
символ фонаря ACS_LANTERN # i 0x69
нижний правый угол ACS_LRCORNER + j 0x6a 
верхний правый угол ACS_URCORNER + k 0x6b 
верхний левый угол ACS_ULCORNER + l 0x6c
нижний левый угол ACS_LLCORNER + m 0x6d 
большой плюс или пересечение ACS_PLUS + n 0x6e 
строка сканирования 1 ACS_S1 ~ o 0x6f 
строка сканирования 3 ACS_S3 \- p 0x70
горизонтальная линия ACS_HLINE \- q 0x71 
строка сканирования 7 ACS_S7 \- r 0x72 
строка сканирования 9 ACS_S9 \&_ s 0x73
тройник направлен вправо ACS_LTEE + t 0x74 
тройник направлен влево ACS_RTEE + u 0x75 
тройник направлен вверх ACS_BTEE + v 0x76 
тройник направлен вниз ACS_TEE + w 0x77
вертикальная линия ACS_VLINE | x 0x78
значение, меньшее или равное ACS_LEQUAL < y 0x79
больше или равно ACS_GEQUAL > z 0x7a 
греческое число pi ACS_PI * { 0x7b 
не равно ACS_NEQUAL ! | 0x7c
Знак фунта стерлингов Великобритании ACS_STERLING f } 0x7d
маркер ACS_BULLET o ~ 0x7e 
.TE 
.PP
К самой таблице относятся несколько замечаний: 
.bP
В X/Open Curses неверно указано, что отображение для \fIlantern\fP имеет значение 
верхний регистр \*(`I\*(" хотя реализации Unix используют 
отображение в нижнем регистре \*(`i\*(".
.bP 
В DEC VT100 реализована графика с использованием альтернативного набора символов 
функция временного переключения \fImodes \fP и отправки символов 
в диапазоне от 0x60 (96) до 0x7e (126)
(столбец \fBacsc Value\fP в таблице).
.bP 
Терминал AT & T добавил графические символы за пределами этого диапазона.
.IP
Некоторые символы в пределах диапазона не соответствуют символу VT100;
предположительно, они использовались в терминале AT & T.:
\Fibboard of squares\fP заменяет символ VT100 \fInewline\fP, в то время как
Символ \fIlantern\fP заменяет символ VT100 \fIvertical tab\fP.
Другие символы VT100 для управляющих символов (\Горизонтальная вкладка\fP, 
\fIcarriage return\fP и \fIline-feed\fP) не используются (повторно) в curses.
.PP
Лучший способ определить графический набор нового устройства - добавить столбец 
в копию этой таблицы для вашего терминала, указав символ, который 
(при передаче между переключателями \fBsmacs \ fR /\fBrmacs \ fR) будет отображаться 
в виде соответствующего графического изображения.
Затем считайте VT100 / ваш терминал 
последовательно пары символов справа налево; они становятся строкой ACSC.
.PP 
. Обработка цвета
.PP
Функции библиотеки curses \fBinit_pair\FP и \fBinit_color\fP
манипулировать пар \fIcolor\FP и \fIcolor значений fP речь в этой
раздел
(см. \fBcurs_color\fP(3х) подробности на эти и связанные с ними функции).
.PP
Большинство цветных терминалов либо \* (`Похожи на Tektronix \*(", либо \* (`Похожи на HP \*(":
.bP 
Терминалы, подобные Tektronix 
, имеют заранее определенный набор цветов \ fIN \ fP 
(где \ fIN \ fP обычно равно 8), 
и могут устанавливать 
символы переднего плана и фона в ячейках символов независимо друг от друга, смешивая их 
в пары цветов \fIN\fP \ * \ \fIN\fP.
.bP 
На терминалах, подобных HP, пользователь должен настроить каждый цвет 
сопряжение отдельно (передний план и фон не настраиваются независимо).
Можно настроить до \fIM\fP цветовых пар из 2 * \fIM \ fP разных цветов.
Терминалы, совместимые с ANSI, похожи на Tektronix.
.PP
Некоторые базовые возможности цветопередачи не зависят от метода цветопередачи.
Числовые параметры 
\fBcolors\fR и \fBpairs\fR определяют максимальное количество цветов 
и цветовых пар, которые могут отображаться одновременно.
The \fBop\fR (оригинал
строка pair) возвращает цвета переднего плана и фона к их значениям по умолчанию 
для терминала.
Строка \fBoc\fR возвращает все цвета или цветовые пары к 
их значениям по умолчанию для терминала.
Некоторые терминалы (в том числе персональные компьютеры
эмуляторы терминалов) стереть областей экрана с текущим цветом фона, а
чем включении питания по умолчанию фон; это должно иметь логическое возможностей
fBbce \\пт.
.PP 
Хотя библиотека curses работает с \fIcolor pairs \ fP
(что отражает неспособность некоторых устройств устанавливать цвета переднего плана 
и фона независимо), 
существуют отдельные возможности для настройки этих функций:
.bP
Чтобы изменить текущий цвет переднего плана или фона на терминале типа Tektronix 
используйте \fBsetaf\fR (установите ANSI для переднего плана) и \fBsetab\fR (установите ANSI 
background) или \fBsetf\fR (установить передний план) и \fBsetb\fR (установить фон).
Они принимают один параметр - номер цвета.
Документация SVr4 описывает 
только \fBsetaf \fR/\fBsetab\fR; в проекте XPG4 говорится, что "Если терминал 
поддерживает управляющие последовательности ANSI для установки фона и переднего плана, они должны быть 
закодированы как \fBsetaf \fR и \fBsetab \fR соответственно.
.bP 
Если терминал
поддерживает другие управляющие последовательности для установки фона и переднего плана, они должны быть 
закодированы как \fBsetf \fR и \fBsetb \fR соответственно.
Функции \fBvidputs\fR и \fBrefresh\fP(3X) 
используйте возможности \fBsetaf\fR и \fBsetab\fR, если они определены.
.PP
Возможности \fBsetaf\fR/\fBsetab\fR и \fBsetf\fR/\fBsetb\fR принимают 
по одному числовому аргументу каждая.
Значения аргументов 0-7 в \fBsetaf\fR/\fBsetab\fR могут быть переносимо определены следующим образом 
(средний столбец - это символический #define, доступный в заголовке для 
библиотеки \fBcurses\fR или \fBncurses\fR).
Аппаратный терминал бесплатно
карты эти, как он любит, но значения RGB показывают нормальную местах в цвет
пространство.
.PP
.TS H
центр;
l c c c
l l n l.
\fBColor #определение значения RGB\fR 
черный \fBCOLOR_BLACK\fR 0 0, 0, 0 
красный \fBCOLOR_RED \ \fR 1 макс, 0,0 
зеленый \fBCOLOR_GREEN\ fR 2 0, макс., 0 
желтый \fBCOLOR_YELLOW\fR 3 макс., макс., 0 
синий \fBCOLOR_BLUE\fR 4 0,0, макс. 
пурпурный \fBCOLOR_MAGENTA\fR 5 макс, 0, макс 
голубой \fBCOLOR_CYAN\fR 6 0, макс, макс
белый \fBCOLOR_WHITE\fR 7 макс,max,max 
.TE 
.PP
Значения аргументов \fBsetf\fR/\fBsetb\fR исторически соответствуют 
другому отображению, т.е.,
.TS H 
center;
l c c c 
l l n l.
\fBColor #определение значения RGB\fR
черный \fBCOLOR_BLACK\fR 0 0, 0, 0 
синий \fBCOLOR_BLUE\fR 1 0,0, макс.
зеленый \fBCOLOR_GREEN\fR 2 0, макс,0 
голубой \fBCOLOR_CYAN\fR 3 0, макс, max
красный \fBCOLOR_RED \ \fR 4 макс., 0,0 
пурпурный \fBCOLOR_MAGENTA\fR 5 макс., 0, макс. 
желтый \fBCOLOR_YELLOW \ fR 6 макс, max, 0 
белый \fBCOLOR_WHITE \fR 7 макс, max, max 
.TE 
.PP
Важно не путать два набора цветовых возможностей;
в противном случае красный / синий цвета будут меняться местами на дисплее.
.PP
На терминале, подобном HP, используйте \fBscp\fR с параметром номера цветовой пары, чтобы установить 
какая цветовая пара является текущей.
.PP
Некоторые терминалы позволяют изменять значения \fIcolor\fP: 
.bP
На терминале, подобном Tektronix, может присутствовать функция \FBCCCC\fR, которая 
указывает, что цвета могут быть изменены.
Если это так, функция \fBinitc\fR будет 
принимать номер цвета (от 0 до \fBcolors\fR \- 1) и еще три параметра, которые 
описывают цвет.
Эти три параметра по умолчанию интерпретируются как значения RGB
(Красный, зеленый, синий).
Если логическое возможность fBhls \\FR-это подарок,
вместо этого они являются как HLS (оттенок, легкость, насыщенность) индексы.
Диапазоны
терминал-зависимой.
.ВР
На терминале, подобном HP, \fBinitp\fR может предоставлять возможность изменения значения пары цветов 
.
Потребуется семь параметров; номер цветовой пары (от 0 до 
\fBmax_pairs\fR \- 1) и две тройки, описывающие сначала цвета фона, а затем 
цвета переднего плана.
Эти параметры должны быть (красный, зеленый, синий) или 
(Оттенок, яркость, насыщенность) в зависимости от \fBhls \ fR.
.PP
На некоторых цветовых терминалах цвета конфликтуют с бликами.
Вы можете зарегистрировать 
эти коллизии с помощью функции \fBncv \ fR.
Это битовая маска 
атрибутов, которые не должны использоваться, когда включены цвета.
Соответствие с 
атрибутами, понятными \fBcurses\fR, выглядит следующим образом:
.PP 
.TS 
центр;
l l l l l 
lw20 lw2 lw10 l.
\Fb атрибут Bit Decimal Устанавливается с помощью\fR
A_STANDOUT 0 1 sgr
A_UNDERLINE 1 2 sgr
A_REVERSE 2 4 sgr
A_BLINK 3 8 sgr
A_DIM 4 16 sgr
A_BOLD 5 32 sgr
A_INVIS 6 64 sgr
A_PROTECT 7 128 sgr
A_ALTCHARSET 8 256 sgr
A_ГОРИЗОНТАЛЬНЫЙ 9 512 sgr1
A_LEFT 10 1024 sgr1
A_LOW 11 2048 sgr1
A_RIGHT 12 4096 sgr1
A_TOP 13 8192 sgr1
A_VERTICAL 14 16384 sgr1
A_ITALIC 15 32768 sitm 
.TE 
.PP
Например, на многих консолях IBM PC атрибут подчеркивания конфликтует с 
цвет переднего плана синий и недоступен в цветовом режиме.
У них должно быть 
значение \fBncv \ fR, равное 2.
.PP 
SVr4 curses ничего не делает с \fBncv\fR, ncurses распознает это и оптимизирует 
вывод в пользу цветов.
.PP 
.SS Разное
Если терминалу требуется не нулевой символ в качестве pad, а что-то другое, то этот символ 
может быть задан как pad .
Используется только первый символ строки pad.
Если в терминале нет символа pad, укажите npc.
Обратите внимание, что ncurses реализует переменную \fBPC\fR, совместимую с termcap.;
хотя приложение может установить для этого значения значение, отличное от 
null, ncurses сначала проверит \fBnpc\fR и использует napms, если в терминале 
нет символа pad.
.PP
Если терминал может перемещаться вверх или вниз на полстроки, 
это может быть обозначено символами 
.B hu 
(на полстроки вверх) 
и 
.B hd 
(на полстроки вниз).
Это в первую очередь полезно для надстрочных и подстрочных индексов на терминалах для бумажного копирования.
Если терминал для копирования на бумажном носителе может перейти на следующую страницу (канал формы), укажите это как 
.B ff 
(обычно control / L).
.PP
Если есть команда повторить данный символ заданное количество раз 
(для экономии времени на передачу большого количества идентичных символов)
это можно указать параметризованной строкой 
.BR rep .
Первый параметр - это символ, который нужно повторить, а второй 
- это количество раз, которое нужно его повторить.
Таким образом, tparm(repeat_char, 'x', 10) - это то же самое, что \*(`xxxxxxxxxxxx\*(".
.PP
Если терминал имеет настраиваемый командный символ, такой как \s-1TEKTRONIX\s+1 4025, 
это может быть обозначено с помощью 
.BR cmdch .
Выбирается прототип командного символа, который используется во всех возможностях.
Этот символ указан в командной строке 
.B cmdch 
возможность его идентификации.
В некоторых системах UNIX поддерживается следующее соглашение:
В среде необходимо выполнить поиск переменной a
.B CC 
, и если она найдена, все 
вхождения символа прототипа заменяются символом 
в переменной среды.
.PP 
Описания терминалов, которые не относятся к определенному типу известных 
терминалов, таких как 
.ИК-переключатель, 
.ИК-коммутируемый доступ, 
. ИК-патч, 
и 
.ИК-сеть, 
должна включать функцию 
.B gn 
(generic), чтобы программы могли жаловаться на то, что они не знают, 
как общаться с терминалом.
(Эта возможность не применяется к 
.I виртуальным 
описаниям терминалов, для которых известны управляющие последовательности.)
.PP
Если на терминале есть \*(`мета-клавиша \*(", которая действует как клавиша shift, 
устанавливающая 8-й бит любого передаваемого символа, этот факт можно 
указать с помощью 
.Br km .
В противном случае программное обеспечение предположит, что 8-й бит равен четности, и это
обычно будет очищен.
Если существуют строки для включения и выключения этого \*(`мета-режима \*(", они 
могут быть заданы как 
.B smm 
и 
.BR rmm .
.PP
Если терминал имеет больше строк памяти, чем может поместиться на экране одновременно 
Количество строк памяти может быть указано с помощью 
.BR lm .
Значение 
.BR lm #0 
указывает, что количество строк не является фиксированным, 
но памяти по-прежнему больше, чем умещается на экране.
.PP
Если терминал является одним из тех, которые поддерживаются протоколом виртуального терминала \ s-1UNIX \ s + 1 
, номер терминала может быть указан как 
.BR vt .
.PP 
Копирование мультимедиа 
строки, управляющие вспомогательным принтером, подключенным к терминалу 
, могут быть заданы как 
.BR mc0 :
распечатайте содержимое экрана, 
.BR mc4 :
выключите принтер и 
.BR mc5 :
включите принтер.
Когда принтер включен, весь текст, отправляемый на терминал, будет отправлен 
на принтер.
Не определено, будет ли текст также отображаться на экране терминала 
при включенном принтере.
Вариант 
.Mc5p б 
принимает один параметр, и выезжает из принтера на столько символов
в качестве значения параметра, а затем включите принтер выключен.
Этот параметр не должен превышать 255.
Все тексты, включая
.BR mc4, 
прозрачно передается на принтер, в то время как
.B mc5p 
действует.
.PP 
.SS Сбои и повреждение мозга 
.PP 
Терминалы Hazeltine, которые не позволяют отображать символы \*(`~\*(", должны 
указывать \fBhz\fR.
.PP 
Терминалы, которые игнорируют перевод строки сразу после переноса \fBam\fR, 
такие как Concept и vt100, 
должны указывать \fBxenl\fR .
.PP
Если
.B el
необходимо избавиться от выступающей части
(вместо того, чтобы просто писать обычным текстом на нем),
\fBxhp\Fr следует.
.PP
Терминалы Teleray, где табуляции превращают все перенесенные символы в пробелы, 
должны указывать \fBxt\fR (разрушающие табуляции).
Примечание: переменная, указывающая на это, теперь \*(`dest_tabs_magic_smso\*("; в 
более старых версиях это был teleray_glitch .
Этот сбой также означает, что невозможно расположить 
курсор поверх \*(`magic cookie \ * (", 
что для удаления выделенного режима вместо этого необходимо использовать 
удалите и вставьте строку.
Реализация ncurses игнорирует этот сбой.
.PP
У Superbee Beehive, которая не может правильно передать escape 
или управляющие символы / C, есть 
.BR xsb , 
указывающий, что клавиша f1 используется для escape, а f2 - для control / C.
(Только некоторые Superbe имеют эту проблему, в зависимости от ПЗУ.)
Обратите внимание, что в более старых версиях terminfo эта возможность называлась
\*(`beehive_glitch\*("; теперь это \*(`no_esc_ctl_c\*(".
.PP 
Другие специфические проблемы терминала могут быть исправлены путем добавления дополнительных возможностей 
формы \fBx \ fR \ fIx \fR.
.PP 
.SS Подводные камни длинных записей 
.PP
Длинные записи, используя базу вряд ли будет проблемой; на сегодняшний день, нет записи, даже
подошел используя базу по 4096 байт строки-максимум стола.
К сожалению, termcap 
переводы гораздо более строго ограничены (до 1023 байт), поэтому переводы termcap 
длинных записей terminfo могут вызвать проблемы.
.PP
Справочные страницы для 4.3BSD и более старых версий \fBtgetent\fP инструктируют пользователя 
выделить буфер размером 1024 байта для записи termcap.
Запись завершается нулем с помощью 
библиотеки termcap, так что максимальная безопасная длина для записи termcap составляет
1k \ -1 (1023) байт.
В зависимости от того, что делает используемое приложение и библиотека termcap 
и где в файле termcap указан тип терминала, который ищет \fBtgetent\fP 
, может произойти несколько неприятных событий.
.PP
Некоторые библиотеки termcap выводят предупреждающее сообщение или завершают работу, если обнаруживают 
запись длиной более 1023 байт; другие этого не делают; третьи усекают 
записи до 1023 байт.
Некоторые прикладные программы выделяют больше, чем 
рекомендуемый 1K для записи termcap; другие этого не делают.
.PP
С каждой записью termcap связаны два важных размера: перед
\*(расширение `tc\*(", а после расширения `\*("tc\*(".
\*(`tc \*(" - это возможность, которая 
прикрепляет другую запись termcap к концу текущей, чтобы добавить 
к ее возможностям.
Если запись termcap не использует возможность \*(`tc \*(" 
, то, конечно, две длины одинаковы.
.PP
Длина \*(`до расширения tc \*(" является наиболее важной, потому что она 
влияет не только на пользователей данного конкретного терминала.
Это 
длина записи в том виде, в каком она существует в /etc/termcap, за вычетом 
пар обратная косая черта-новая строка, которые \fBtgetent\fP удаляет при чтении.
Некоторые библиотеки termcap также удаляют последнюю строку перевода (GNU termcap этого не делает).
Теперь предположим: 
.bP 
запись termcap перед расширением имеет длину более 1023 байт, 
.bP 
и приложение выделило только буфер размером 1 кб, 
.bP 
и библиотека termcap (например, в BSD / OS 1.1 и GNU) считывает 
всю запись в буфер, независимо от ее длины, чтобы увидеть 
та ли это запись, которая ей нужна, 
.bP
и \fBtgetent\fP ищет тип терминала, который либо является 
длинной записью, появляется в файле termcap после длинной записи, либо 
вообще не отображается в файле (так что \fBtgetent\fP должен выполнять поиск 
по всему файлу termcap).
.PP
Затем \fBtgetent\fP перезапишет память, возможно, ее стек и, вероятно, дамп ядра 
программа.
Такие программы, как telnet, особенно уязвимы; современные telnets 
автоматически передают значения, такие как тип терминала.
Результаты почти такие же 
нежелательные с библиотеками termcap, такими как SunOS 4.1.3 и Ultrix 4.4, которые 
печатают предупреждающие сообщения при чтении слишком длинной записи termcap.
Если a 
библиотека termcap обрезает длинные записи, например OSF / 1 3.0, она не подвержена смерти 
здесь, но вернет неверные данные для терминала.
.PP
Длина \*(`после расширения tc \*(" будет иметь эффект, аналогичный приведенному выше 
, но только для людей, которые фактически устанавливают TERM для этого терминала 
введите, поскольку \fBtgetent\fP выполняет расширение \*(`tc\*(" только после того, как найден тип терминала, который он искал, а не во время поиска. 
тип терминала, который он искал.
.PP
Таким образом, запись termcap длиной более 1023 байт может вызвать, 
в различных комбинациях библиотек termcap и приложений, ядро
дамп, предупреждения или неправильная работа.
Если прошло слишком много времени, даже до
\*(расширение `tc \*(", оно будет иметь этот эффект даже для пользователей некоторых других типов терминалов 
и пользователей, у которых переменная TERM не имеет termcap 
запись.
.PP
В режиме \-C (перевод в termcap) реализация \fBncurses\fR 
\fBtic\fR(1M) выдает предупреждающие сообщения при превышении длины termcap, предшествующей tc. 
перевод слишком длинный.
Опция \-c (check) также проверяет разрешенные (после tc 
расширения) длины.
.SS Совместимость с двоичными файлами 
Неразумно рассчитывать на переносимость двоичных записей terminfo между 
коммерческими версиями UNIX.
Проблема в том, что существует как минимум две версии 
terminfo (под HP \-UX и AIX), которые отличались от System V terminfo после
SVr1, и добавили возможности расширения в таблицу строк, которые (в 
двоичном формате) конфликтуют с расширениями System V и XSI Curses.
.SH РАСШИРЕНИЯ 
.PP 
Поиск описаний терминалов в 
\fB$HOME/.terminfo\fR и TERMINFO_DIRS 
не поддерживается более старыми реализациями.
.PP
В некоторых реализациях с svr4 \\fBcurses FR, и все предыдущие svr4 и не
интерпретировать %A и %о операторы в строках параметров.
.PP
SVr4 / XPG4 не указывают, лицензирует ли \fBmsgr\fR перемещение в режиме 
альтернативного набора символов (такие режимы могут, среди прочего, отображать
CR и NL для символов, которые не вызывают локальных перемещений).
Реализация \fBncurses\fR игнорирует \fBmsgr\fR в режиме \fBALTCHARSET\fR 
.
Это повышает вероятность того, что XPG4
реализации, использующей противоположную интерпретацию, может потребоваться terminfo 
записи, сделанные для \fBncurses \ fR, чтобы отключить \fBmsgr \fR .
.PP
Библиотека \fBncurses\fR обрабатывает режимы вставки символов и insert-character 
немного нестандартным способом для повышения эффективности обновления.
Смотрите 
приведенный выше подраздел \fBInsert/Delete Character\fR .
.PP
Замены параметров для \fBset_clock\fR и \fBdisplay_clock\fR 
не задокументированы в SVr4 или стандарте XSI Curses.
Они выведены из 
документации к терминалу AT & T 505.
.PP 
Будьте осторожны при назначении функции \fBkmous\fR.
Библиотека \fBncurses\ fR хочет интерпретировать это как \fBKEY_MOUSE\fR, 
для использования терминалами и эмуляторами, такими как xterm 
это может возвращать информацию об отслеживании мыши в потоке ввода с клавиатуры.
.PP
В X /Open Curses курсив не упоминается.
Переносимые приложения должны предполагать, что числовые возможности представляют собой 
16-разрядные значения со знаком.
Это включает в себя возможность \fIno_color_video\fP (ncv).
Значение маски 32768, используемое для выделения курсивом с ncv, можно спутать с 
отсутствующим или отмененным ncv.
Если курсив должен сочетаться с цветами, 
тогда необходимо указать значение ncv, даже если оно равно нулю.
.PP 
Разные коммерческие порты terminfo и curses поддерживают разные подмножества 
стандарта XSI Curses и (в некоторых случаях) разные наборы расширений.
Здесь 
приведена сводка с точностью до октября 1995 года.:
.bP 
\ fBSVR4, Solaris, ncurses \ fR \-\-
Они поддерживают все возможности SVr4.
.bP 
\ FBSVGI \ fR \-\-
Поддерживает набор SVr4, добавляет одну недокументированную расширенную строку 
возможность (\fBset_pglen\fR).
.bP 
\fBSVr1, Ultrix\fR \-\-
Они поддерживают ограниченное подмножество возможностей terminfo.
Логические значения заканчиваются на \fBxon_xoff\fR; 
цифры - на \fBwidth_status_line\fR; 
а строки - на \fBprtr_non\fR.
.bP 
\fBHP/UX \fR \-\-
Поддерживает подмножество SVr1, плюс SVr[234] numerics \fBnum_labels\fR, 
\fBlabel_height\fR, \fBlabel_width\fR, плюс функциональные клавиши с 11 по 63, плюс
\fBplab_norm\fR, \fBlabel_on \fR и \fBlabel_off\fR, плюс некоторые несовместимые
расширения в таблице строк.
.bP 
\fBAIX\fR \-\-
Поддерживает подмножество SVr1, плюс функциональные клавиши с 11 по 63, плюс ряд 
несовместимых расширений таблицы строк.
.bP 
\fBOSF \fR \-\-
Поддерживает как набор SVr4, так и расширения AIX.
ФАЙЛЫ .SH 
.TP 25
\* d/?/*
файлы, содержащие описания терминалов
.SH СМОТРИТЕ ТАКЖЕ
\fBinfocmp\fR(1M), 
\fBtabs\fR(1), 
\fBtic\fR(1M), 
\fBcurses\fR(3X), 
\fBcurs_color\fR(3X), 
\fBcurs_variables\fR(3X), 
\fBprintf\fR(3), 
\fBterm_variables\fR(3X).
\fBterm\fR(\*n).
\fBuser_caps\fR(5).
.SH AUTHORS
Zeyd M. Ben-Halim, Eric S. Raymond, Thomas E. Dickey.
Based on pcurses by Pavel Curtis.
