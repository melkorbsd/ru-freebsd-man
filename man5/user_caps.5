.\"***************************************************************************
.\" Copyright 2018-2019,2020 Thomas E. Dickey                                *
.\" Copyright 2017 Free Software Foundation, Inc.                            *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, to any person obtaining a  *
.\" copy of this software and associated documentation files (the            *
.\" "Software"), to deal in the Software without restriction, including      *
.\" without limitation the rights to use, copy, modify, merge, publish,      *
.\" distribute, distribute with modifications, sublicense, and/or sell       *
.\" copies of the Software, and to permit persons to whom the Software is    *
.\" furnished to do so, subject to the following conditions:                 *
.\"                                                                          *
.\" The above copyright notice and this permission notice shall be included  *
.\" in all copies or substantial portions of the Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained in this notice, the name(s) of the above copyright   *
.\" holders shall not be used in advertising or otherwise to promote the     *
.\" sale, use or other dealings in this Software without prior written       *
.\" authorization.                                                           *
.\"***************************************************************************
.\"
.\" $Id: user_caps.5,v 1.16 2020/12/19 21:26:11 tom Exp $
.TH user_caps 5
.ie \n(.g .ds `` \(lq
.el       .ds `` ``
.ie \n(.g .ds '' \(rq
.el       .ds '' ''
.de NS
.ie n  .sp
.el    .sp .5
.ie n  .in +4
.el    .in +2
.nf
.ft C			\" Courier
..
.de NE
.fi
.ft R
.ie n  .in -4
.el    .in -2
..
.de bP
.ie n  .IP \(bu 4
.el    .IP \(bu 2
..
.SH ИМЯ
user_caps \- user-defined terminfo capabilities 
.SH КРАТКОЕ ОПИСАНИЕ
.B tic -x, infocmp -x
.SH ОПИСАНИЕ
.СС История
.PP 
До ncurses 5.0, 
базы данных terminfo использовали \fIfixed repertoire\fP терминалов 
возможности, разработанные для базы данных терминалов SVr2 в 1984 году, 
и поэтапно расширенные через SVr4 (1989), 
и стандартизирован в Единой спецификации Unix, начиная с 1995 года.
.PP
Большинство расширений \fIextensions\fP в этом фиксированном наборе были дополнениями 
к таблицам логических, числовых и строковых возможностей.
Вместо того чтобы изменять значение существующей возможности, было добавлено новое название.
База данных terminfo использует двоичный формат; двоичная совместимость была 
обеспечена использованием заголовка, который указывал количество элементов в 
таблицах для каждого типа возможностей.
Стандартизация была неполной: 
.bP 
Сам формат \fIbinary\fP не описан 
в документации X/Open Curses .
Описан только формат \fIsource\fP.
.IP 
Разработчики библиотеки полагаются на документацию SVr4,
и реверс-инжиниринг скомпилированных файлов terminfo в соответствии с двоичным форматом.
.bP 
В большинстве реализаций отсутствует стандарт для двоичного формата. 
копирует двоичный формат SVr2, который использует 16-разрядные целые числа со знаком, 
и ограничен записями размером 4096 байт.
.IP
Формат не может представлять очень большие цифровые возможности, 
также он не может представлять большое количество специальных определений клавиатуры.
.bP 
Таблицы названий возможностей различаются в разных реализациях.
.IP 
Хотя они \fImay \ fP предоставляют все стандартные названия возможностей, 
положение в таблицах отличается, потому что некоторые функции добавлялись по мере необходимости, 
в то время как другие были добавлены (не по порядку) в соответствии с X / Open Curses.
.IP
Хотя набор предопределенных возможностей ncurses наиболее близок к Solaris, 
База данных terminfo Solaris имеет несколько отличий от 
списка, опубликованного X / Open Curses .
Например, ncurses могут быть сконфигурированы с таблицами, которые соответствуют 
терминальным базам данных для AIX, HP-UX или OSF/1, 
а не конфигурации, подобной Solaris по умолчанию.
.bP 
В SVr4 curses и ncurses 
база данных терминала определяется во время компиляции с использованием текстового файла 
в котором перечислены различные возможности терминала.
.IP
В принципе, текстовый файл можно расширить, 
но для этого требуется перекомпиляция и переустановка библиотеки.
Текстовый файл, используемый в ncurses для описания возможностей терминала, включает 
подробную информацию о различных системах, помимо документированных функций X / Open Curses.
Например, ncurses поддерживает эти возможности в каждой конфигурации:
.RS 8
.TP 5 
memory_lock 
(meml)
заблокируйте память над курсором 
.TP 5 
memory_unlock 
(memu)
разблокируйте память 
.TP 5
box_chars_1
(вставка 1) 
Основной набор символов box 
.RE 
.IP
Возможности блокировки / разблокировки памяти были включены, потому что они использовались 
в описании терминала X11R6 для \fBxterm\fP.
Функция \fIbox1\fP используется в tic для облегчения работы с описаниями терминалов 
написана для AIX. 
.PP 
В 1990-х годах некоторые пользователи неохотно использовали terminfo 
несмотря на его преимущества в производительности по сравнению с termcap:
.bP 
Фиксированный набор не позволял пользователям добавлять функции 
для непредвиденных улучшений терминала 
(или требовал от них повторного использования существующих возможностей в качестве обходного пути).
.bP 
Также упоминалось ограничение на 16-разрядные целые числа со знаком.
Поскольку termcap хранит все в виде строки, 
это могло представлять большие числа.
.PP 
Хотя расширяемость termcap использовалась редко.
(на самом деле эту функцию никогда не использовал \fIspeaker\fP), 
в критике был смысл.
на ncurses 5.0 предоставляется способ обнаружения нестандартных возможностей,
определить их
тип и, при необходимости, сохранять и извлекать их таким образом, что не мешали
с другими приложениями.
Они называются \fIuser-defined capabilities\fP потому что нет
необходимые изменения в заранее определенные имена инструментов возможности.
.PP
Утилиты ncurses \fBtic\fP и \fBinfocmp\fP имеют параметр командной строки 
\*(`\-x\*(" для управления тем, используются ли нестандартные возможности 
хранятся или извлекаются.
Библиотечная функция \fBuse_extended_names\fP 
предоставляется для той же цели.
.PP
При составлении базы данных терминалов, если \*(`\-Х\*(" выставляется,
\fBtic\fP для хранения пользовательских возможностей, если имя функции не
одно из предопределенных имен.
.PP 
Поскольку ncurses предоставляет интерфейс библиотеки termcap, 
эти пользовательские возможности могут быть видны приложениям termcap:
.bP 
Интерфейс termcap (как и все реализации termcap)
требуется, чтобы имена возможностей состояли из 2 символов.
.IP
Если функция достаточно проста для использования в приложении termcap, 
она предоставляется в виде имени из 2 символов.
.bP
Существуют и другие 
определяемые пользователем возможности, которые относятся к функциям, недоступным в termcap, 
например, параметризованные строки, которые используют более двух параметров 
или используют больше, чем поддержку тривиальных выражений, предоставляемую termcap.
Для этого в базе данных terminfo должны быть только имена возможностей, состоящие из
3 или более символов.
.bP 
Некоторые терминалы могут отправлять отдельные строки для специальных клавиш (cursor-, 
keypad- или function-keys) в зависимости от клавиш-модификаторов (shift, control и т.д.).
В то время как terminfo и termcap имеют набор из 60 предопределенных имен функциональных клавиш, 
которым может быть назначена серия клавиш, 
этого недостаточно для более чем дюжины клавиш, умноженных более чем на 
пара комбинаций модификаторов.
База данных ncurses использует соглашение, основанное на \fBxterm\fP, для 
предоставления расширенных имен специальных ключей.
.IP 
Вписывать это в ограничение termcap на имена из 2 символов 
было бы бессмысленно.
Эти расширенные ключи доступны только с помощью terminfo.
.SS Распознает возможности 
.PP
Библиотека ncurses использует определяемые пользователем возможности.
Хотя база данных terminfo может иметь другие расширения, 
ncurses выполняет явные проверки для них:
.RS 3
.TP 3
AX
\fIboolean\fP, утверждает, что терминал интерпретирует SGR 39 и SGR 49
путем сброса цвета переднего плана и фона соответственно на значения по умолчанию.
.IP
Эта функция также распознается программой \fBscreen\fP.
.TP 3
E3
\fIstring\fP сообщает, как очистить буфер обратной прокрутки терминала.
При наличии программа \fBclear\fP(1) отправляет это сообщение перед очисткой 
терминал.
.IP
Команда \*(`\fBtput очистить\fP\*(" выполняет то же самое.
.TP 3
RGB 
\fIboolean\fP, \fInumber\fP \fBor\fP \fIstring\fP, 
утверждать, что 
Возможности \fBset_a_foreground\fP и 
\fBset_a_background\fP соответствуют \fIdirect colors\fP, 
использование соглашения RGB (красный / зеленый / синий).
Эта возможность позволяет функции \fBcolor_content\fP 
возвращать соответствующие значения, не требуя от приложения 
инициализировать цвета с помощью \fBinit_color\fP.
.IP
Тип возможности определяет значения, которые видит ncurses:
.RS 3
.TP 3
\fIboolean\fP 
подразумевает, что количество битов для красного, зеленого и синего одинаково.
Используя максимальное количество цветов, 
ncurses добавляет два, делит эту сумму на три и присваивает результат 
красному, зеленому и синему в указанном порядке.
.IP
Если количество битов, необходимых для определения количества цветов, не кратно
из трех компонентов синий (и зеленый) проигрывают красному.
.TP 3
\fInumber\fP 
сообщает ncurses, какой результат добавить к красному, зеленому и синему.
Если в ncurses заканчиваются биты, 
синий (и зеленый) проигрывают так же, как в случае \fIboolean\fP.
.TP 3
\fIstring\fP 
явно укажите количество битов, используемых для красного, зеленого и синего компонентов 
в виде списка целых десятичных чисел, разделенных косой чертой.
.RE 
.IP 
Поскольку используется несколько кодировок RGB, 
приложения, которые делают предположения о количестве битов на цвет 
, вряд ли будут работать надежно.
В качестве тривиального случая, например, можно было бы определить \fBRGB#1\fP 
для представления стандартных восьми цветов ANSI, т. Е. по одному биту на цвет.
.TP 3
U8 
\fInumber \fP, 
утверждает, что ncurses должен использовать значения Unicode для символов линейного рисования, 
и что он должен игнорировать возможности альтернативного набора символов 
когда локаль использует кодировку UTF-8.
Для получения дополнительной информации смотрите Обсуждение 
\fBNCURSES_NO_UTF8_ACS\fP в \fBncurses\fP(3X).
.IP
Установите для этой возможности ненулевое значение, чтобы включить ее.
.TP 3
XM
\fIstring\fP, 
переопределите встроенную строку ncurses, которая 
включает / отключает режим мыши \fBxterm \fP.
.IP 
ncurses отправляет последовательность символов на терминал для инициализации режима мыши,
и когда пользователь нажимает кнопки мыши или (в определенных режимах) перемещает 
мышь, обрабатывает символы, отправленные терминалом обратно, чтобы сообщить ему, что 
было сделано с помощью мыши.
.IP
Протокол мыши включается, когда 
параметр \fImask\fP, передаваемый в функции \fBmousemask\fP, отличен от нуля.
По умолчанию ncurses обрабатывает ответы для протокола мыши X11 xterm.
Он также знает о протоколе мыши \ fISGR 1006 \ fP xterm, 
но ему нужно сказать, чтобы он обращал внимание именно на это.
Он не сможет угадать, какой режим используется, 
поскольку ответы достаточно похожи, что приведет только к путанице.
.IP
Возможность \fBXM \ fP имеет единственный параметр.
Если ненулевое значение, протокол мыши должен быть включен.
Если нулевое значение, протокол мыши должен быть отключен.
ncurses проверяет эту возможность, если она присутствует, 
чтобы увидеть, используется ли протокол 1006.
Если это так, он ожидает, что в ответах будет использоваться протокол xterm mouse \fISGR 1006 \fP.
.IP
Протокол xterm mouse используется другими эмуляторами терминала.
База данных терминала использует строительные блоки для различных xterm mouse 
протоколы, которые могут использоваться в настраиваемых описаниях терминалов.
.IP
Строительные блоки базы данных терминала для этой мыши
функция также имеет экспериментальную возможность \fIxm\fP.
Функция \*(`xm\*(" описывает реакцию мыши.
В настоящее время нет интерпретатора, который использовал бы эту информацию 
чтобы сделать поддержку мыши полностью управляемой данными.
.IP
\fIxm\fP показывает формат ответов мыши.
В этой экспериментальной возможности параметры следующие 
.RS 5
.TP 5
.I p1 
y-ордината 
.TP 5
.I p2
x-ордината 
.TP 5
.I p3 
кнопка 
.TP 5
.I p4 
состояние, например, нажата или отпущена 
.TP 5
.I p5 
начальная область по оси y 
.TP 5
.I p6
начальная область по x-ординате 
.TP 5
.I p7 
конечная область по y-ординате 
.TP 5
.I p8
область окончания x-ординаты 
.RE 
.IP
Вот примеры из базы данных терминала для наиболее часто используемых 
протоколов xterm mouse:
.IP 
.nf 
 протокол мыши xterm+ x11mouse|X11 xterm, 
 kmous=\\E[M, XM=\\E[?1000%?%p1%{1}%=%th%el%;,
 xm=\\E[M 
 %?%p4%t%p3%e%{3}%;%'\ '%+% c 
%p2%'!'%+%c 
 %p1%'!'%+%c,

 xterm+sm+1006|xterm SGR-мышь, 
 kmous=\\E[<, XM=\\E[?1006;1000%?%p1%{1}%=%th%el%;,
 xm=\\E[<%i%p3%d;
 %p1%d;
 %p2%d;
 %?%p4%tM%em%;, 
.fi 
.
.SS Расширенные определения ключей 
.PP
Несколько терминалов предоставляют возможность отправлять отдельные строки для 
комбинаций модифицированных специальных клавиш.
Не существует стандарта для того, что могут отправлять эти клавиши.
.PP 
С 1999 года \fBxterm\fP поддерживает
Модификаторы \fIshift\fP, \fIcontrol\fP, \fIalt\fP и \fImeta\fP, которые создают 
отдельные строки со специальными ключами.
В описании терминала ncurses не имеет специальных знаний об используемых модификаторах 
.
Приложения могут использовать соглашение \fInaming\fP, установленное для \fBxterm\fP 
чтобы найти эти специальные ключи в описании терминала.
.PP 
Исходя из соглашения curses о том, что имена ключей \ fP начинаются с \*(`k \*(" 
и что сдвинутые специальные клавиши - это имена в верхнем регистре, 
база данных терминалов ncurses определяет эти имена, к которым добавляется суффикс:
.RS 5
.TS 
вкладка(/) ;
l l .
\fIName\fR/\fIDescription\fR
_
kDC/специальная форма kdch1 (символ удаления)
kDN/специальная форма kcud1 (курсор вниз)
kEND/специальная форма kend (Конец)
kHOM/специальная форма khome (Дом)
kLFT/специальная форма kcub1 (курсор-влево или курсор-назад)
kNXT/специальная форма knext (следующая или постраничная)
kPRV/специальная форма kprev (Предыдущая или постраничная)
kRIT/ специальная форма kcuf1 (перемещение курсора вправо или вперед)
kUP/специальная форма kcuu1 (курсор вверх)
.TE 
.RE
.PP
Это суффиксы, используемые для обозначения модификаторов:
.RS 5
.TS 
tab(/) ;
l l .
\fIValue\fR/\fIDescription\fR
_
2/Shift
3/Alt
4/Shift + Alt
5/Контроль
6/Shift + Control
7/Alt + Control
8/Shift + Alt + Control
9/Meta
10/Meta + Shift
11/Meta + Alt
12/Meta + Alt + Shift
13/Meta + Ctrl
14/Meta + Ctrl + Shift
15/Meta + Ctrl + Alt
16/Meta + Ctrl + Alt + Shift 
.TE 
.RE 
.PP
Ничто из этого не предопределено; описания терминалов могут относиться к \fInames\fP 
которые ncurses будут выделять во время выполнения в \fIkey-codes\fP .
Чтобы использовать эти ключи в программе ncurses, приложение могло бы сделать это:
.bP 
используя список расширенных ключей \fInames\fP, 
запросите у \fBtigetstr\fP(3X) их значения и 
.bP 
учитывая список значений, 
запросите \fBkey_defined\fP(3X) для получения \fIkey-кода\fP, который 
был бы возвращен для этих ключей с помощью \fBwgetch\fP(3X).
.PP 
.\" 
.SH ПЕРЕНОСИМОСТЬ 
.PP
Функция расширения \*(`\-x\*(" \fBtic\fP и \fBinfocmp\fP 
была принята в NetBSD curses.
Эта реализация хранит пользовательские возможности, 
но сама по себе эти возможности не использует.
.\"
.SH СМОТРИТЕ ТАКЖЕ 
.PP 
\fBinfocmp\fR(1M), 
\fBtic\fR(1M).
.PP
Раздел базы данных терминала
.I "NCURSES ПРЕДОСТАВЛЯЕТ ВОЗМОЖНОСТИ, ОПРЕДЕЛЯЕМЫЕ ПОЛЬЗОВАТЕЛЕМ"
обобщены часто используемые пользовательские возможности 
которые используются в описаниях терминалов.
Некоторые из этих функций упоминаются в \fBscreen\fR(1) или \fBtmux\fR(1).
.PP
.I "Управляющие последовательности XTerm"
предоставляет дополнительную информацию о функциях \fBxterm\fP 
которые используются в этих расширенных возможностях.
.\"
.SH АВТОРЫ
.PP 
Томас Э. Дики 
.br 
начиная с ncurses 5.0 (1999)
