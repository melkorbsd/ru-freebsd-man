.\" Copyright (c) 2016-2017 The FreeBSD Foundation.
.\"
.\" This documentation was created by Ed Maste under sponsorship of
.\" The FreeBSD Foundation.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd April 12, 2023
.Dt ARCH 7
.Os
.Sh Название
.Nm arch
.Nd Специфичные для архитектуры детали
.Sh ОПИСАНИЕ
Различия между CPU архитектурой и платформами,поддерживаемыми
.Fx .
.Ss Вступление
Этот документ представляет собой краткий справочник по ключевым деталям ABI из портов архитектуры
.Fx .
Для получения более подробной информации обратитесь к документации по дополнениям к ABI для конкретного процессора.
.Pp
Если это явно не указано, размеры указаны в байтах.
Сведения об архитектуре, приведенные в этом документе, применимы к
.Fx 12.0
и позже, если не указано иные.
.Pp
.Fx
использует единое адресное пространство.
Переменные типов
.Vt unsigned long ,
.Vt uintptr_t ,
и
.Vt size_t
и все указатели имеют одинаковое представление.
.Pp
Для обеспечения максимальной совместимости с будущими механизмами обеспечения целостности указателей,
манипуляции с указателями в виде целых чисел должны выполняться с помощью
.Vt uintptr_t
или
.Vt intptr_t
и никаких других типов.
В частности,
.Vt long
и
.Vt ptrdiff_t
следует избегать.
.Pp
В некоторых архитектурах, например,
.Dv powerpc
и AIM вариантах
.Dv powerpc64 ,
ядро использует отдельное адресное пространство.
На других архитектурах ядро и процесс пользовательского режима совместно используют
единое адресное пространство.
Ядро расположено по самым высоким адресам.
.Pp
В каждой архитектуре стек основного потока пользовательского режима начинается рядом с
самым высоким адресом пользователя и растет вниз.
.Pp
.Fx
поддержка архитектуры зависит от версии.
В этой таблице показаны поддерживаемые в настоящее время архитектуры процессоров, а также первая
.Fx
выпущенная для поддержки каждой архитектуры
.Bl -column -offset indent "Архитектура" "Первоначальный выпуск"
.It Sy Архитектура Ta Sy Первоначальный выпуск
.It aarch64     Ta 11.0
.It amd64       Ta 5.1
.It armv6       Ta 10.0
.It armv7       Ta 12.0
.It i386        Ta 1.0
.It powerpc     Ta 6.0
.It powerpcspe  Ta 12.0
.It powerpc64   Ta 9.0
.It powerpc64le Ta 13.0
.It riscv64     Ta 12.0
.El
.Pp
Архитектуры, снятые с производства, приведены в следующей таблице.
.Bl -column -offset indent "Architecture" "Первоначальный выпуск" "Окончательный выпуск"
.It Sy Архитектура Ta Sy Первоначальный выпуск Ta Sy Окончательный выпуск
.It alpha       Ta 3.2   Ta 6.4
.It arm         Ta 6.0   Ta 12.x
.It armeb       Ta 8.0   Ta 11.4
.It ia64        Ta 5.0   Ta 10.4
.It mips        Ta 8.0   Ta 13.x
.It mipsel      Ta 9.0   Ta 13.x
.It mipselhf    Ta 12.0  Ta 13.x
.It mipshf      Ta 12.0  Ta 13.x
.It mipsn32     Ta 9.0   Ta 13.x
.It mips64      Ta 9.0   Ta 13.x
.It mips64el    Ta 9.0   Ta 13.x
.It mips64elhf  Ta 12.0  Ta 13.x
.It mips64hf    Ta 12.0  Ta 13.x
.It pc98        Ta 2.2   Ta 11.4
.It riscv64sf   Ta 12.0  Ta 13.x
.It sparc64     Ta 5.0   Ta 12.x
.El
.Ss Типы размеров
Все
.Fx
архитектуры используют некоторый вариант ELF (см.
.Xr elf 5 )
.Sy Бинарный интерфейс приложения
(ABI) для машинного процессора.
Все поддерживаемые ABI можно разделить на две группы:
.Bl -tag -width "Dv ILP32"
.It Dv ILP32
.Vt int ,
.Vt long ,
.Vt void *
все типы машиных представлений имеют размер 4 байта
.It Dv LP64
.Vt int
тип машиного представления используют 4 байта,
когда
.Vt long
и
.Vt void *
это 8 байт.
.El
.Pp
Некоторые машины поддерживают более одного
.Fx
ABI.
Как правило, это 64-разрядные машины, где
.Dq native
.Dv LP64
среда выполнения сопровождается
.Dq legacy
.Dv ILP32
условием, которое был историческим 32-разрядным предшественником для 64-разрядной эволюцией.
Примерами являются:
.Bl -column -offset indent "powerpc64" "ILP32 counterpart"
.It Sy LP64        Ta Sy ILP32 counterpart
.It Dv amd64       Ta Dv i386
.It Dv powerpc64   Ta Dv powerpc
.It Dv aarch64     Ta Dv armv6/armv7
.El
.Pp
.Dv aarch64
будет поддерживать выполнение
.Dv armv6
или
.Dv armv7
двоичные файлы, если центральный процессор реализует
.Dv AArch32
состояние выполнения, каким бы старым оно ни было
.Dv armv4
и
.Dv armv5
двоичные файлы не поддерживаются.
.Pp
На всех поддерживаемых архитектурах:
.Bl -column -offset -indent "long long" "Size"
.It Sy Type Ta Sy Size
.It short Ta 2
.It int Ta 4
.It long Ta sizeof(void*)
.It long long Ta 8
.It float Ta 4
.It double Ta 8
.El
.Pp
Целые числа представлены в дополнении к двум.
Выравнивание целочисленных типов и типов указателей является естественным, то есть,
адрес переменной должен быть равен нулю по типу размера.
Большинство ILP32 ABIs, за исключением
.Dv arm ,
требуется выравнивание только по 4 байтам для 64-разрядных целых чисел.
.Pp
Тип размеров, зависящие от машины:
.Bl -column -offset indent "Архитектура" "void *" "long double" "time_t"
.It Sy Архитектура Ta Sy void * Ta Sy long double Ta Sy time_t
.It aarch64     Ta 8 Ta 16 Ta 8
.It amd64       Ta 8 Ta 16 Ta 8
.It armv6       Ta 4 Ta  8 Ta 8
.It armv7       Ta 4 Ta  8 Ta 8
.It i386        Ta 4 Ta 12 Ta 4
.It powerpc     Ta 4 Ta  8 Ta 8
.It powerpcspe  Ta 4 Ta  8 Ta 8
.It powerpc64   Ta 8 Ta  8 Ta 8
.It powerpc64le Ta 8 Ta  8 Ta 8
.It riscv64     Ta 8 Ta 16 Ta 8
.El
.Pp
.Sy time_t
составляет 8 байт на всех поддерживаемых архитектурах, кроме i386.
.Ss Последовательность и Подписанность
.Bl -column -offset indent "Арихетктура" "Последовательность" "char Подписанность"
.It Sy Арихетктура Ta Sy Последовательность Ta Sy char Подписанность
.It aarch64     Ta Маленькая Ta неподписанный
.It amd64       Ta Маленькая Ta   подписанный
.It armv6       Ta Маленькая Ta неподписанный
.It armv7       Ta Маленькая Ta неподписанный
.It i386        Ta Маленькая Ta   подписанный
.It powerpc     Ta Большая   Ta неподписанный
.It powerpcspe  Ta Большая   Ta неподписанный
.It powerpc64   Ta Большая   Ta неподписанный
.It powerpc64le Ta Маленькая Ta неподписанный
.It riscv64     Ta Маленькая Ta   подписанный
.El
.Ss Размер страницы
.Bl -column -offset indent "Арихетктура" "Размер страницы"
.It Sy Арихетктура Ta Sy Размер страницы
.It aarch64     Ta 4K, 2M, 1G
.It amd64       Ta 4K, 2M, 1G
.It armv6       Ta 4K, 1M
.It armv7       Ta 4K, 1M
.It i386        Ta 4K, 2M (PAE), 4M
.It powerpc     Ta 4K
.It powerpcspe  Ta 4K
.It powerpc64   Ta 4K
.It powerpc64le Ta 4K
.It riscv64     Ta 4K, 2M, 1G
.El
.Ss С плавающей запятой
.Bl -column -offset indent "Архитектура" "float, double" "long double"
.It Sy Architecture Ta Sy float, double Ta Sy long double
.It aarch64     Ta hard Ta soft, quad precision
.It amd64       Ta hard Ta hard, 80 bit
.It armv6       Ta hard Ta hard, double precision
.It armv7       Ta hard Ta hard, double precision
.It i386        Ta hard Ta hard, 80 bit
.It powerpc     Ta hard Ta hard, double precision
.It powerpcspe  Ta hard Ta hard, double precision
.It powerpc64   Ta hard Ta hard, double precision
.It powerpc64le Ta hard Ta hard, double precision
.It riscv64     Ta hard Ta hard, quad precision
.El
.Ss Цепочка инструментов по умолчанию
.Fx
использует
.Xr clang 1
в качестве компилятора по умолчанию на всех поддерживаемых архитектурах процессоров,
LLVM's
.Xr ld.lld 1
как компоновщик по умолчанию, и
ELF инструменты Цепочка бинарных утилит, таких как
.Xr objcopy 1
и
.Xr readelf 1 .
.Ss MACHINE_ARCH vs MACHINE_CPUARCH vs MACHINE
.Dv MACHINE_CPUARCH
должно быть предпочтительным в Makefiles когда общая
архитектура находится в стадии тестирования.
.Dv MACHINE_ARCH
следует отдавать предпочтение, когда есть что-то специфичное для определенного типа
архитектура, в которой есть выбор из многих или мог бы быть выбор из многих.
Используй
.Dv MACHINE
когда речь заходит о ядре, интерфейсы зависят от определенного типа ядра
или подобные вещи, такие как последовательности загрузки.
.Bl -column -offset indent "Dv MACHINE" "Dv MACHINE_CPUARCH" "Dv MACHINE_ARCH"
.It Dv MACHINE Ta Dv MACHINE_CPUARCH Ta Dv MACHINE_ARCH
.It arm64 Ta aarch64 Ta aarch64
.It amd64 Ta amd64 Ta amd64
.It arm Ta arm Ta armv6, armv7
.It i386 Ta i386 Ta i386
.It powerpc Ta powerpc Ta powerpc, powerpcspe, powerpc64, powerpc64le
.It riscv Ta riscv Ta riscv64
.El
.Ss Предопределенные макросы
Компилятор предоставляет ряд предопределенных макросов.
Некоторые из них содержат сведения, относящиеся к конкретной архитектуре, и объясняются ниже.
Другие макросы, включая те, которые требуются в соответствии со стандартом языка, не используются
включенные сюда.
.Pp
С помощью этой команды можно получить полный набор предопределенных макросов:
.Bd -literal -offset indent
cc -x c -dM -E /dev/null
.Ed
.Pp
Общие макросы типа, размера и порядкового номера:
.Bl -column -offset indent "BYTE_ORDER" "Значение"
.It Sy Макрос Ta Sy Значение
.It Dv __LP64__ Ta 64-bit (8-byte) long and pointer, 32-bit (4-byte) int
.It Dv __ILP32__ Ta 32-bit (4-byte) int, long and pointer
.It Dv BYTE_ORDER Ta Either Dv BIG_ENDIAN or Dv LITTLE_ENDIAN .
.Dv PDP11_ENDIAN
не используется на
.Fx .
.El
.Pp
Макросы, зависящие от архитектуры:
.Bl -column -offset indent "Арихетктура" "Предопределенные макросы"
.It Sy Арихетктура Ta Sy Предопределенные макросы
.It aarch64     Ta Dv __aarch64__
.It amd64       Ta Dv __amd64__ , Dv __x86_64__
.It armv6       Ta Dv __arm__ , Dv __ARM_ARCH >= 6
.It armv7       Ta Dv __arm__ , Dv __ARM_ARCH >= 7
.It i386        Ta Dv __i386__
.It powerpc     Ta Dv __powerpc__
.It powerpcspe  Ta Dv __powerpc__ , Dv __SPE__
.It powerpc64   Ta Dv __powerpc__ , Dv __powerpc64__
.It powerpc64le Ta Dv __powerpc__ , Dv __powerpc64__
.It riscv64     Ta Dv __riscv , Dv __riscv_xlen == 64
.El
.Pp
Компиляторы могут определять дополнительные варианты макросов, зависящих от архитектуры.
Приведенные выше макросы предпочтительны для использования в
.Fx .
.Ss Important Xr make 1 variables
Большинство переменных, которые можно настроить извне, определены в
.Xr build 7
справочная страница.
Эти переменные никак иначе не документированы и широко используются
в системе сборки.
.Bl -tag -width "MACHINE_CPUARCH"
.It Dv MACHINE
Представляет аппаратную платформу.
Это то же самое, что и в случае с нативной платформой
.Xr uname 1
.Fl m
выход.
Он определяет как пользовательский интерфейс / интерфейс ядра, так и
интерфейс загрузчика/ ядра.
Его следует использовать только в этих контекстах.
Каждая архитектура процессора может иметь несколько поддерживаемых аппаратных платформ
где
.Dv MACHINE
различается между ними.
Он используется для сбора воедино всех файлов из
.Xr config 8
для сборки ядра.
Это часто то же самое, что
.Dv MACHINE_ARCH
точно так же, как одна архитектура процессора может быть реализована многими различными
аппаратные платформы, одна аппаратная платформа может поддерживать несколько процессоров
члены семейства архитектуры, хотя и с разными двоичными файлами.
Например,
.Dv MACHINE
из i386 поддерживал аппаратную платформу IBM-AT, в то время как
.Dv MACHINE
версия pc98 поддерживала компьютеры японской компании NEC PC-9801 и PC-9821
аппаратные платформы.
Обе эти аппаратные платформы поддерживали только
.Dv MACHINE_ARCH
из i386, где они имели общий ABI, за исключением определенного ядра /
пользовательские интерфейсы, относящиеся к базовой аппаратной платформе
различия в архитектуре шины, перечислении устройств и интерфейсе загрузки.
Обычно,
.Dv MACHINE
следует использовать только в src/sys и src/stand, а также в системах визуализации или
установщики.
.It Dv MACHINE_ARCH
Представляет архитектуру центрального процессора.
Это то же самое, что и на нативных платформах
.Xr uname 1
.Fl p
выход.
Он определяет поддерживаемое семейство команд процессора.
Он также может кодировать изменение порядка байтов в многобайтовых файлах.
целые числа (порядковый номер).
Он также может кодировать изменение размера целого числа или указателя.
Он также может кодировать версию ISA.
Он также может кодировать ABI с жесткой и мягкой плавающей запятой и их использование.
Он также может кодировать вариант ABI, когда другие факторы этого не делают
однозначно определите ABI.
Это, наряду с
.Dv MACHINE ,
определяет ABI, используемый системой.
Как правило, простое имя процессора определяет наиболее распространенный (или, по крайней мере,
первый) вариант центрального процессора.
Вот почему powerpc и powerpc64 подразумевают'big endian' while 'armv6' and 'armv7'
подразумевают маленький конец
Если мы когда-нибудь будем поддерживать так называемый x32 ABI (используя 32-разрядный
указатели на архитектуру amd64), то, скорее всего, он был бы закодирован
как amd64-x32.
К сожалению, amd64 определяет 64-разрядную эволюцию x86
платформа (это соответствует "первому правилу"), поскольку все остальные используют x86_64.
Стандартного названия для процессора не существует: каждая операционная система выбирает свое собственное
соглашение.
.It Dv MACHINE_CPUARCH
Представляет исходное местоположение для данного
.Dv MACHINE_ARCH .
Как правило, это общий префикс для всего MACHINE_ARCH, который
используют одну и ту же реализацию, хотя "riscv" нарушает это правило.
Хотя amd64 и i386 тесно связаны, MACHINE_CPUARCH не является x86
для них.
.Fx
исходная база поддерживает amd64 и i386 с двумя
отдельные базы исходных текстов, находящиеся в подкаталогах с именами amd64 и i386
(хотя за кулисами есть кое-что общее, что вписывается в эти
рамки).
.It Dv CPUTYPE
Задает тон процессу 
.Dv MACHINE_ARCH
строительства.
Он используется для оптимизации сборки для конкретного процессора / ядра, которое
двоичные файлы продолжают работать.
Как правило, это не меняет ABI, хотя может быть тонкой гранью
между оптимизацией для конкретных случаев.
.It Dv TARGET
Используется для установки
.Dv MACHINE
в Makefile верхнего уровня для перекрестного построения.
Неиспользуемый за пределами этой области.
Это не передается в остальную часть сборки.
Makefiles за пределами верхнего уровня вообще не должны его использовать (хотя
у некоторых есть своя личная копия для истеричных случаев).
.It Dv TARGET_ARCH
Используется для установки
.Dv MACHINE_ARCH
с помощью Makefile верхнего уровня для перекрестного построения.
Похожий
.Dv TARGET ,
он не используется за пределами этой области.
.El
.Sh SEE ALSO
.Xr src.conf 5 ,
.Xr build 7
.Sh HISTORY
Одна
.Nm
страница руководства появилась в
.Fx 11.1 .
