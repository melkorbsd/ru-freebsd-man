.\" Copyright (c) 2000
.\"	Mike W. Meyer
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd August 1, 2023
.Dt BUILD 7
.Os
.Sh ИМЯ
.Nm build
.Nd общие инструкции по сборке системы
.Sh ОПИСАНИЕ
Источники для системы
.Fx
и его приложений обычно содержатся в трех разных каталогах
.Pa /usr/src ,
.Pa /usr/doc ,
и
.Pa /usr/ports .
Эти каталоги могут быть изначально пустыми или вообще не существовать, пока не будут обновлены с
помощью Git
.Po устанавливается из пакетов с
.Xr pkg 7
или из
.Xr ports 7 Pc .
Каталог
.Pa /usr/src
содержит исходные тексты
.Dq "базовой системы" ,
которые в общих чертах определяются как то, что требуется для приведения системы в рабочее состояние.
Каталог
.Pa /usr/doc
содержит исходную документацию по системе, за исключением страниц руководства.
Каталог
.Pa /usr/ports
содержит дерево, обеспечивающее согласованный интерфейс для создания и
установки приложений сторонних производителей.
Для получения дополнительных сведений о процессе создания портов, смотрите
.Xr ports 7 .
.Pp
Команда
.Xr make 1
используется в каждом из этих каталогов для создания и установки элементов
из этого каталога.
Выдача команды
.Xr make 1
в любом каталоге рекурсивно выдает команду
.Xr make 1
во всех подкаталогах.
Если цель не указана, элементы в каталогах создаются
и никаких дальнейших действий не предпринимается.
.Pp
Дерево исходных текстов должно быть доступно только для чтения.
Как описано в
.Xr make 1 ,
объекты обычно создаются в отдельной иерархии каталогов объектов,
определяемой переменной окружения
.Va MAKEOBJDIRPREFIX ,
или в
.Pa /usr/obj ,
если переменная 
.Va MAKEOBJDIRPREFIX
не задана.
Каталог канонических объектов описан в документации к целевому объекту
.Cm buildworld
ниже.
.Pp
Сборкой можно управлять, определяя переменные
.Xr make 1
описанные в разделе
.Sx ОКРУЖЕНИЕ
ниже, и переменными, задокументированными в
.Xr make.conf 5 .
.Pp
Компоненты по умолчанию, включаемые в сборку, указаны в файле
.Pa /etc/src.conf
в дереве исходных текстов.
Чтобы переопределить файл по умолчанию, включите параметр SRCCONF в инструкции по созданию,
указывая на пользовательский файл src.conf.
Для получения дополнительной информации смотрите
.Xr src.conf 5 .
.Pp
В следующем списке приведены имена и действия для целевых
объектов, поддерживаемых системой сборки:
.Bl -tag -width ".Cm cleandepend"
.It Cm analyze
Запустите статический анализатор Clang для всех объектов и выведите выходные данные в стандартный вывод.
.It Cm check
Запустите тесты для данного подкаталога.
В качестве каталога по умолчанию используется
.Pa ${.OBJDIR} ,
но контрольный каталог можно изменить с помощью
.Pa ${CHECKDIR} .
.It Cm checkworld
Запустите набор тестов
.Fx
в установленном мире.
.It Cm clean
Удалите все файлы, созданные в процессе сборки.
.It Cm cleandepend
Удалите файлы
.Pa ${.OBJDIR}/${DEPENDFILE}*
генерируется на основе предыдущих шагов
.Dq Li "make"
и
.Dq Li "make depend" .
.It Cm cleandir
Удалите каталог канонических объектов, если он существует, или выполните
действия, эквивалентные
.Dq Li "make clean cleandepend"
если этого не произойдет.
Этот целевой объект также удалит ссылку
.Pa obj
в
.Pa ${.CURDIR}
если таковая существует.
.Pp
Желательно запустить
.Dq Li "make cleandir"
дважды: первый вызов приведет к удалению каталога канонических объектов,
а второй - к очистке
.Pa ${.CURDIR} .
.It Cm depend
Сгенерируйте список зависимостей сборки в файле
.Pa ${.OBJDIR}/${DEPENDFILE} .
Зависимости для каждого объекта генерируются во время сборки и хранятся в
.Pa ${.OBJDIR}/${DEPENDFILE}.${OBJ} .
.It Cm install
Установите результаты сборки в соответствующее расположение в
иерархии каталогов установки, указанное в переменной
.Va DESTDIR .
.It Cm obj
Создайте каталог канонических объектов, связанный с текущим
каталогом.
.It Cm objlink
Создайте символическую ссылку на каталог канонических объектов в
.Pa ${.CURDIR} .
.It Cm tags
Сгенерируйте файл тегов с помощью программы, указанной в переменной
.Xr make 1
.Va CTAGS .
Система сборки поддерживает
.Xr ctags 1
и
.Nm "GNU Global" .
.El
.Pp
Другими поддерживаемыми целевыми объектами в каталоге
.Pa /usr/src
являются:
.Bl -tag -width ".Cm distributeworld"
.It Cm buildenv
Создайте интерактивную оболочку с переменными среды, настроенными для
сборки системы или отдельных компонентов.
Для перекрестной сборки целевую архитектуру необходимо указать с помощью переменных
.Xr make 1
.Va TARGET_ARCH
и
.Va TARGET .
.Pp
Этот целевой объект полезен только после того, как будет собран полный набор инструментов (включая
компилятор, компоновщик, ассемблер, заголовки и библиотеки);
смотрите целевой объект
.Cm toolchain
ниже.
.It Cm buildworld
Соберите все, кроме ядра, сконфигурируйте файлы в
.Pa etc ,
и
.Pa выпустите .
Каталог объектов может быть изменен по сравнению с каталогом по умолчанию
.Pa /usr/obj
установив переменную
.Pa MAKEOBJDIRPREFIX
.Xr make 1 .
Используемый префикс фактического местоположения сборки
зависит от выбранного параметра
.Va WITH_UNIFIED_OBJDIR
из
.Xr src.conf 5 .
Если он включен, то это
.Pa ${MAKEOBJDIRPREFIX}${.CURDIR}/${TARGET}.${TARGET_ARCH}
для всех сборок.
Если он отключен, то это
.Pa ${MAKEOBJDIRPREFIX}${.CURDIR}
для собственных сборок и
.Pa ${MAKEOBJDIRPREFIX}/${TARGET}.${TARGET_ARCH}${.CURDIR}
для кросс-сборок и нативных сборок с установленной переменной
.Va CROSS_BUILD_TESTING .
.It Cm cleankernel
Пытается очистить цели, созданные предыдущим
.Cm buildkernel ,
или аналогичным шагом, созданный из того же исходного каталога и
.Va KERNCONF .
.It Cm cleanworld
Попытайтесь очистить цели, созданные предыдущим
.Cm buildworld ,
или аналогичным шагом, созданный на основе этого исходного каталога.
.It Cm cleanuniverse
Когда
.Va WITH_UNIFIED_OBJDIR
включен, попытайтесь очистить цели, созданные предыдущим
.Cm buildworld ,
.Cm universe ,
или аналогичным шагом для любой архитектуры, построенной на основе этого исходного каталога.
.It Cm distributeworld
Распространяйте все, что было скомпилировано на предыдущем шаге
.Cm buildworld .
Файлы размещаются в иерархии каталогов, заданной переменной
.Xr make 1
.Va DISTDIR .
Этот целевой объект используется при создании выпуска; смотрите
.Xr release 7 .
.It Cm native-xtools
Эта цель создает перекрестную цепочку инструментов для данного
.Sy TARGET
и
.Sy TARGET_ARCH ,
а также список избранных статических пользовательских инструментов для хост-системы.
Это предназначено для использования в jail, где QEMU используется для повышения
производительности за счет исключения двоичных файлов эмуляции, которые не нужно эмулировать.
.Sy TARGET
и
.Sy TARGET_ARCH
должны быть определены.
.It Cm native-xtools-install
Устанавливает результаты в
.Pa ${DESTDIR}/${NXTP}
где
.Va NXTP
по умолчанию использует
.Pa nxb-bin .
.Sy TARGET
и
.Sy TARGET_ARCH
должны быть определены.
.It Cm packageworld
Архивируйте результаты
.Cm distributeworld ,
поместив их в
.Va DISTDIR .
Этот целевой объект используется при создании выпуска; смотрите
.Xr release 7 .
.It Cm installworld
Установите все, что было создано с помощью предыдущего шага
.Cm buildworld
в иерархию каталогов, на которую указывает переменная
.Xr make 1
.Va DESTDIR .
.Pp
При установке в файловую систему NFS и запуске
.Xr make 1
с параметром
.Fl j ,
убедитесь, что
.Xr rpc.lockd 8
выполняется как на клиенте, так и на сервере.
Смотрите
.Xr rc.conf 5
о том, как заставить его запускаться во время загрузки.
.It Cm toolchain
Создайте набор инструментов для сборки, необходимый для сборки остальной части системы.
Для межархитектурных сборок на этом шаге создается набор инструментов для разных архитектур.
.It Cm universe
Для каждой архитектуры
выполните
.Cm buildworld
за которым следует
.Cm buildkernel
для всех ядер для этой архитектуры,
включая
.Pa LINT .
Выполнение этой команды занимает много времени.
.It Cm kernels
Например,
.Cm universe
с
.Va WITHOUT_WORLDS
определен таким образом, что создаются только ядра для каждой архитектуры.
.It Cm worlds
Например,
.Cm universe
с
.Va WITHOUT_KERNELS
определен таким образом, что создаются только миры для каждой архитектуры.
.It Cm targets
Выведите список поддерживаемых
.Va TARGET
/
.Va TARGET_ARCH
пар для глобальных целей и целей ядра.
.It Cm tinderbox
Выполняйте те же задачи, что и
.Cm universe .
Кроме того, в конце выведите сводку по всем неудачным целям и
завершите работу с ошибкой, если таковая была.
.It Cm toolchains
Создайте набор инструментов сборки для каждой архитектуры, поддерживаемой системой сборки.
.It Cm xdev
Создает и устанавливает кросс-цепочку инструментов и системный корень для данного
.Sy TARGET
и
.Sy TARGET_ARCH .
Системный корень содержит целевую библиотеку и заголовки.
Целевой объект  - это псевдоним для
.Cm xdev-build
и
.Cm xdev-install .
Расположением установленных файлов можно управлять с помощью
.Va DESTDIR .
Целевое местоположение в
.Va DESTDIR
это
.Pa ${DESTDIR}/${XDTP}
где
.Va XDTP
по умолчанию использует
.Pa /usr/${XDDIR}
и
.Va XDDIR
по умолчанию использует
.Pa ${TARGET_ARCH}-freebsd .
.It Cm xdev-build
Сборки для целевого
.Cm xdev .
.It Cm xdev-install
Устанавливает файлы для целевого
.Cm xdev .
.It Cm xdev-links
Устанавливает символические ссылки в стиле autoconf на
.Pa ${DESTDIR}/usr/bin
указывая на набор инструментов xdev в
.Pa ${DESTDIR}/${XDTP} .
.El
.Pp
Целями сборки, специфичными для ядра, в
.Pa /usr/src
являются:
.Bl -tag -width ".Cm distributekernel"
.It Cm buildkernel
Перестройте ядро и модули ядра.
Каталог объектов может быть изменен по сравнению с значением по умолчанию
.Pa /usr/obj
установив переменную
.Pa MAKEOBJDIRPREFIX
.Xr make 1 .
.It Cm installkernel
Установите ядро и модули ядра в каталог
.Pa ${DESTDIR}/boot/kernel ,
переименовав любой ранее существовавший каталог с таким именем в
.Pa kernel.old ,
если он содержал запущенное в данный момент ядро.
Целевой каталог под
.Pa ${DESTDIR}
может быть изменен с помощью переменных
.Va INSTKERNNAME
и
.Va KODIR
.Xr make 1 .
.It Cm distributekernel
Установите ядро в каталог
.Pa ${DISTDIR}/kernel/boot/kernel .
Этот целевой объект используется при создании выпуска; смотрите
.Xr release 7 .
.It Cm packagekernel
Архивируйте результаты
.Cm distributekernel ,
разместив их в
.Va DISTDIR .
Этот целевой объект используется при создании выпуска; смотрите
.Xr release 7 .
.It Cm kernel
Эквивалентно
.Cm buildkernel
с последующим
.Cm installkernel
.It Cm kernel-toolchain
Перестройте инструменты, необходимые для компиляции ядра.
Используйте это, если вы не выполняли первым
.Cm buildworld .
.It Cm reinstallkernel
Переустановите ядро и модули ядра, перезаписав содержимое
целевого каталога.
Как и в случае с целевым
.Cm installkernel ,
целевой каталог можно указать с помощью переменной
.Xr make 1
.Va INSTKERNNAME .
.El
.Pp
Удобные целевые значения для очистки каталога назначения установки,
обозначаемого переменной
.Va DESTDIR ,
включают:
.Bl -tag -width ".Cm delete-old-libs"
.It Cm check-old
Распечатайте список старых файлов и каталогов в системе.
.It Cm delete-old
Удаляйте устаревшие базовые системные файлы и каталоги в интерактивном режиме.
Когда
.Li -DBATCH_DELETE_OLD_FILES
указано в командной строке, операция удаления будет
неинтерактивной.
Переменные
.Va DESTDIR ,
.Va TARGET_ARCH
и
.Va TARGET
должен быть установлен как с
.Dq Li "make installworld" .
.It Cm delete-old-libs
Удаляйте устаревшие базовые системные библиотеки в интерактивном режиме.
Этот целевой параметр следует использовать только в том случае, если стороннее программное обеспечение не использует эти
библиотеки.
Когда
.Li -DBATCH_DELETE_OLD_FILES
указано в командной строке, операция удаления будет
неинтерактивной.
Переменные
.Va DESTDIR ,
.Va TARGET_ARCH
и
.Va TARGET
должен быть установлен как с
.Dq Li "make installworld" .
.El
.Sh ОКРУЖЕНИЕ
Переменные, влияющие на все сборки, включают:
.Bl -tag -width ".Va MAKEOBJDIRPREFIX"
.It Va DEBUG_FLAGS
Определяет набор флагов отладки, которые будут использоваться для сборки всех пользовательских
двоичных файлов в соответствии с
.Pa /usr/src .
Когда
.Va DEBUG_FLAGS
определяется, то целевые
.Cm install
и
.Cm installworld
устанавливают двоичные файлы из текущего
.Va MAKEOBJDIRPREFIX
без удаления,
так что отладочная информация сохраняется в установленных двоичных файлах.
.It Va DESTDIR
Префикс иерархии каталогов, в которые будут устанавливаться созданные объекты.
Если не задан,
.Va DESTDIR 
по умолчанию использует пустую строку.
.It Va MAKEOBJDIRPREFIX
Определяет префикс для имен каталогов в дереве построенных объектов.
По умолчанию используется
.Pa /usr/obj
если не определено.
Эта переменная должна быть установлена только в среде или
.Pa /etc/src-env.conf
и не через
.Pa /etc/make.conf
или
.Pa /etc/src.conf
или из командной строки.
.It Va WITHOUT_WERROR
Если они определены, предупреждения компилятора не приведут к остановке сборки,
даже если в makefile указано обратное.
.It Va WITH_CTF
Если это определено, в процессе сборки будут запущены инструменты преобразования DTrace CTF
для созданных объектов.
.El
.Pp
Кроме того, встраиваясь в
.Pa /usr/src
на них влияют следующие переменные
.Xr make 1 :
.Bl -tag -width ".Va LOCAL_MODULES_DIR"
.It Va CROSS_TOOLCHAIN
Запрашивает использование внешнего набора инструментов для создания либо мира, либо ядра.
Значение этой переменной может быть либо полным путем к файлу,
либо базовым именем файла в
.Pa ${LOCALBASE}/share/toolchains .
Файл должен быть makefile, который устанавливает переменные для запроса внешней
цепочки инструментов, такой как
.Va XCC .
.Pp
Внешние цепочки инструментов доступны в портах как для LLVM, так и для GCC/binutils.
Для внешних цепочек инструментов, доступных в портах,
.Va CROSS_TOOLCHAIN
должно быть равно имени пакета.
Пакеты цепочки инструментов LLVM используют имя llvm<major version>.
Цепочки инструментов GCC предоставляют отдельные пакеты для каждой архитектуры и используют
имя ${MACHINE_ARCH}-gcc<major version>.
.It Va KERNCONF
Определяет, какое ядро собирать и устанавливать для различных
целевых компонентов kernel make.
По умолчанию используется
.Cm GENERIC .
.It Va KERNCONFDIR
Переопределяет каталог, в котором
.Va KERNCONF
и любые файлы, включенные
.Va KERNCONF
должны быть найден.
По умолчанию
.Pa sys/${ARCH}/conf .
.It Va KERNFAST
Если задано, для целевого объекта сборки 
.Cm buildkernel
по умолчанию установлены значения
.Va NO_KERNELCLEAN ,
.Va NO_KERNELCONFIG ,
и
.Va NO_KERNELOBJ .
Если установлено значение, отличное от
.Cm 1
тогда
.Va KERNCONF
устанавливается равным значению
.Va KERNFAST .
.It Va LOCAL_DIRS
Если эта переменная задана, она предоставляет список дополнительных каталогов относительно
корня исходного дерева для создания как части целевого
.Cm everything .
Каталоги создаются параллельно друг с другом
и с базовыми системными каталогами.
Вставьте директиву
.Va .WAIT
в начале списка
.Va LOCAL_DIRS
чтобы убедиться, что все базовые системные каталоги созданы в первую очередь.
.Va .WAIT
может также использоваться по мере необходимости в других местах списка.
.It Va LOCAL_ITOOLS
Если эта переменная задана, то она предоставляет список дополнительных инструментов, используемых целевыми объектами
.Cm installworld
и
.Cm distributeworld .
.It Va LOCAL_LIB_DIRS
Если эта переменная задана, она предоставляет список дополнительных каталогов относительно
корня исходного дерева для создания как части целевого
.Cm libraries .
Каталоги создаются параллельно друг с другом
и с базовыми системными библиотеками.
Вставьте директиву
.Va .WAIT
в начале списка
.Va LOCAL_DIRS
чтобы убедиться, что все базовые системные библиотеки собраны в первую очередь.
.Va .WAIT
может также использоваться по мере необходимости в других местах списка.
.It Va LOCAL_MTREE
Если задано, эта переменная предоставляет список дополнительных mtrees относительно
корня исходного дерева для использования в качестве части целевого
.Cm hierarchy .
.It Va LOCAL_LEGACY_DIRS
Если эта переменная задана, она предоставляет список дополнительных каталогов относительно
корня исходного дерева для создания как части целевого
.Cm legacy .
.It Va LOCAL_BSTOOL_DIRS
Если эта переменная задана, она предоставляет список дополнительных каталогов относительно
корня исходного дерева для создания как части целевого
.Cm bootstrap-tools .
.It Va LOCAL_TOOL_DIRS
Если эта переменная задана, она предоставляет список дополнительных каталогов относительно
корня исходного дерева для создания как части целевого
.Cm build-tools .
.It Va LOCAL_XTOOL_DIRS
Если эта переменная задана, она предоставляет список дополнительных каталогов относительно
корня исходного дерева для создания как части целевого
.Cm cross-tools .
.It Va PORTS_MODULES
Список портов с модулями ядра, которые должны быть собраны и установлены
в рамках процесса
.Cm buildkernel
и
.Cm installkernel .
.Bd -literal -offset indent
сделать ядро PORTS_MODULES=emulators/virtualbox-ose-kmod
.Ed
.It Va LOCAL_MODULES
Список внешних модулей ядра, которые должны быть собраны и установлены
в рамках процесса
.Cm buildkernel
и
.Cm installkernel .
По умолчанию используется список подкаталогов
.Va LOCAL_MODULES_DIR .
.It Va LOCAL_MODULES_DIR
Каталог, в котором следует искать модули ядра, указанные
.Va LOCAL_MODULES .
Каждый модуль ядра должен состоять из каталога, содержащего makefile.
По умолчанию используется
.Pa ${LOCALBASE}/sys/modules .
.It Va SRCCONF
Укажите файл, который будет переопределять значение по умолчанию
.Pa /etc/src.conf .
Файл src.conf управляет компонентами для сборки.
Смотрите
.Xr src.conf 5
.It Va STRIPBIN
Команда для использования во время установки при удалении двоичных файлов.
Не забудьте добавить все дополнительные инструменты, необходимые для запуска
.Va STRIPBIN
к переменной
.Va LOCAL_ITOOLS
.Xr make 1
перед запуском целевых объектов
.Cm distributeworld
или
.Cm installworld .
Смотрите
.Xr install 1
для получения более подробной информации.
.It Va SUBDIR_OVERRIDE
Переопределите список подкаталогов по умолчанию и создайте только тот
подкаталог, который указан в этой переменной.
В сочетании с
.Cm buildworld
тогда все библиотеки и includes, а также некоторые инструменты сборки по-прежнему будут выполнять сборку.
Указав
.Cm -DNO_LIBS ,
и
.Cm -DWORLDFAST
будет создавать только указанный каталог, как это делалось исторически.
В сочетании с
.Cm buildworld
это необходимо для переопределения
.Va LOCAL_LIB_DIRS
с любыми пользовательскими каталогами, содержащими библиотеки.
Это позволяет создать подмножество системы таким же образом, как
.Cm buildworld
выполняет обработку с помощью системного корня.
Эта переменная также может быть полезна при отладке сбойных сборок.
.Bd -literal -offset indent
сделать some-target SUBDIR_OVERRIDE=foo/bar
.Ed
.It Va SYSDIR
Укажите расположение исходного кода ядра, чтобы переопределить значение по умолчанию
.Pa /usr/src/sys .
Исходный код ядра находится в подкаталоге
.Pa sys
из исходного дерева, извлеченного из репозитория
.Pa src.git .
.It Va TARGET
Целевой аппаратной платформы.
Это аналогично результату
.Dq Nm uname Fl m .
Это необходимо для перекрестной сборки некоторых целевых архитектур.
Например, для перекрестной сборки для машин с ARM64 требуется
.Va TARGET_ARCH Ns = Ns Li aarch64
и
.Va TARGET Ns = Ns Li arm64 .
Если не установлено,
.Va TARGET
по умолчанию используется текущая аппаратная платформа, если только
.Va TARGET_ARCH
также установлено, и в этом случае по умолчанию используется соответствующее
значение для данной архитектуры.
.It Va TARGET_ARCH
Архитектура процессора целевой машины.
Это аналогично результату
.Dq Nm uname Fl p .
Установите это значение для перекрестной сборки для другой архитектуры.
Если не задано,
.Va TARGET_ARCH
по умолчанию используется текущая архитектура компьютера, если только
.Va TARGET
также устанавливается, и в этом случае по умолчанию используется соответствующее
значение для данной платформы.
Как правило, требуется только установить
.Va TARGET .
.El
.Pp
На сборки в каталоге
.Pa /usr/src
также влияет определение одного или нескольких из следующих символов
с помощью параметра
.Fl D
в
.Xr make 1 :
.Bl -tag -width ".Va LOADER_DEFAULT_INTERP"
.It Va LOADER_DEFAULT_INTERP
Определяет, какой интерпретатор будет использоваться программой-загрузчиком по умолчанию.
Допустимые значения включают
.Dq 4th ,
.Dq lua ,
и
.Dq simp .
При этом создается ссылка по умолчанию для
.Pa /boot/loader
на загрузчик с этим интерпретатором.
Это также определяет, какой интерпретатор будет скомпилирован в
.Pa userboot .
.It Va NO_CLEANDIR
Если этот параметр задан, целевые объекты построения, которые очищают части дерева объектов,
используют эквивалент 
.Dq make clean
вместо
.Dq make cleandir .
.It Va NO_CLEAN
Если этот параметр установлен, файлы дерева объектов вообще не очищаются.
Это значение используется по умолчанию, когда
.Va WITH_META_MODE
используется с загруженным
.Xr filemon 4 .
Смотрите
.Xr src.conf 5
для получения более подробной информации.
Установка
.Va NO_CLEAN
подразумевает
.Va NO_KERNELCLEAN ,
итак, когда
.Va NO_CLEAN
установлено, объекты ядра также не очищаются.
.It Va NO_CTF
Если этот параметр задан, в процессе построения инструменты преобразования DTrace CTF
для построенных объектов не запускаются.
.It Va NO_SHARE
Если этот параметр установлен, то сборка не будет перенесена в подкаталог
.Pa /usr/src/share
(например, страницы руководства, файлы данных о языковых стандартах, файлы данных о часовых поясах и
другие файлы
.Pa /usr/src/share
не будут восстановлены из своих исходных текстов).
.It Va NO_KERNELCLEAN
Если этот параметр установлен, процесс сборки не запускает
.Dq make clean
как часть целевого объекта
.Cm buildkernel .
.It Va NO_KERNELCONFIG
Если этот параметр установлен, процесс сборки не запускает
.Xr config 8
как часть целевого объекта
.Cm buildkernel .
.It Va NO_KERNELOBJ
Если этот параметр установлен, процесс сборки не запускает
.Dq make obj
как часть целевого объекта
.Cm buildkernel .
.It Va NO_LIBS
Если этот параметр установлен, этап просмотра библиотек будет пропущен.
.It Va NO_OBJWALK
Если этот параметр установлен, каталоги объектов создаваться не будут.
Это следует использовать только в том случае, если каталоги объектов были созданы в
предыдущей сборке и новые каталоги не подключены.
.It Va UNIVERSE_TOOLCHAIN
Запрашивает использование цепочки инструментов, созданной как часть целевого
.Cm universe
как внешняя цепочка инструментов.
.It Va WORLDFAST
Если установлен, для целевого объекта сборки
.Cm buildworld
по умолчанию установлены значения 
.Va NO_CLEAN ,
.Va NO_OBJWALK ,
и большинство этапов начальной загрузки будут пропущены.
Это приведет только к загрузке библиотек и сборке всего пользовательского пространства.
Эту опцию следует использовать только в том случае, если известно, что ни один из компонентов начальной загрузки
не нуждается в изменении и что к сборке не были подключены новые каталоги.
.El
.Pp
На сборки в каталоге
.Pa /usr/doc
влияют следующие переменные
.Xr make 1 :
.Bl -tag -width ".Va DOC_LANG"
.It Va DOC_LANG
Если задано, то построение документации ограничивается языковыми подкаталогами,
указанными в качестве ее содержимого.
Действие по умолчанию заключается в создании документации для всех языков.
.El
.Pp
На сборки с использованием
.Cm universe
и связанных с ним целевых объектов влияют следующие переменные 
.Xr make 1 :
.Bl -tag -width ".Va USE_GCC_TOOLCHAINS"
.It Va JFLAG
Передавайте значение этой переменной каждому вызову
.Xr make 1 ,
используемому для создания миров и ядер.
Это может быть использовано для включения нескольких заданий в рамках сборки одной архитектуры,
при этом каждая архитектура будет создаваться последовательно.
.It Va MAKE_JUST_KERNELS
Создавайте ядра только для каждой поддерживаемой архитектуры.
.It Va MAKE_JUST_WORLDS
Создавайте миры только для каждой поддерживаемой архитектуры.
.It Va WITHOUT_WORLDS
Создавайте ядра только для каждой поддерживаемой архитектуры.
.It Va WITHOUT_KERNELS
Создавайте миры только для каждой поддерживаемой архитектуры.
.It Va UNIVERSE_TARGET
Выполните указанную цель
.Xr make 1
для каждой поддерживаемой архитектуры вместо действия по умолчанию - создания мира и одного или нескольких ядер.
Эта переменная подразумевает
.Va WITHOUT_KERNELS .
.It Va USE_GCC_TOOLCHAINS
Используйте внешние цепочки инструментов GCC для создания запрошенных целевых объектов.
Если необходимый пакет цепочки инструментов для поддерживаемой архитектуры не установлен,
сборка для этой архитектуры пропускается.
.It Va TARGETS
Создавайте только перечисленные целевые объекты, а не каждую поддерживаемую архитектуру отдельно.
.It Va EXTRA_TARGETS
В дополнение к поддерживаемым архитектурам, создайте полуподдерживаемые
архитектуры.
Полуподдерживаемая архитектура имеет поддержку сборки в дереве
.Fx ,
но проходит значительно меньше испытаний и, как правило, предназначен для
второстепенного использования, которое не пользуется широкой популярностью.
.El
.Sh ФАЙЛЫ
.Bl -tag -width ".Pa /usr/share/examples/etc/make.conf" -compact
.It Pa /usr/doc/Makefile
.It Pa /usr/doc/share/mk/doc.project.mk
.It Pa /usr/ports/Mk/bsd.port.mk
.It Pa /usr/ports/Mk/bsd.sites.mk
.It Pa /usr/share/examples/etc/make.conf
.It Pa /usr/src/Makefile
.It Pa /usr/src/Makefile.inc1
.El
.Sh ПРИМЕРЫ
Для получения информации о методе обновления
.Dq approved
вашей системы с использованием последних версий, пожалуйста, ознакомьтесь с разделом 
.Sx ОБЩИЕ ЭЛЕМЕНТЫ
в
.Pa src/UPDATING .
.Pp
Следующая последовательность команд может быть использована для перекрестной сборки
системы для архитектуры armv6 на хосте amd64:
.Bd -literal -offset indent
cd /usr/src
make TARGET_ARCH=armv6 buildworld buildkernel
make TARGET_ARCH=armv6 DESTDIR=/clients/arm installworld installkernel
.Ed
.Sh ИСТОРИЯ
Справочная страница
.Nm
впервые появилась в
.Fx 4.3 .
.Sh СМОТРИТЕ ТАКЖЕ
.Xr cc 1 ,
.Xr install 1 ,
.Xr make 1 ,
.Xr make.conf 5 ,
.Xr src.conf 5 ,
.Xr arch 7 ,
.Xr pkg 7 ,
.Xr ports 7 ,
.Xr release 7 ,
.Xr tests 7 ,
.Xr config 8 ,
.Xr etcupdate 8 ,
.Xr reboot 8 ,
.Xr shutdown 8
.Sh АВТОРЫ
.An Майк У. Мейер Aq Mt mwm@mired.org
