.\"	$NetBSD: editline.7,v 1.5 2016/05/09 21:27:55 christos Exp $
.\"	$OpenBSD: editline.7,v 1.1 2016/04/20 01:11:45 schwarze Exp $
.\"
.\" Copyright (c) 2016 Ingo Schwarze <schwarze@openbsd.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd May 7, 2016
.Dt EDITLINE 7
.Os
.Sh ИМЯ
.Nm editline
.Nd пользовательский интерфейс для редактирования строк
.Sh ОПИСАНИЕ
Когда программа, использующая библиотеку
.Xr editline 3 ,
запрашивает ввод строки с помощью функции
.Xr el_wgets 3 ,
она считывает символы с терминала.
Недопустимые входные байты, которые не образуют символов, автоматически
удаляются.
Для каждого считанного символа выполняется одна команда редактора.
Соответствие входных символов командам редактора зависит от режима
редактирования.
Существует три режима редактирования: vi insert mode, vi command mode
и emacs mode.
По умолчанию используется vi insert mode.
Программа может переключить режим по умолчанию на emacs с помощью функций
.Xr el_set 3
или
.Xr el_parse 3 ,
и пользователь может переключиться в режим emacs либо в конфигурационном файле
.Xr editrc 5
или в интерактивном режиме с помощью команды редактора
.Ic ed-command ,
во всех трех случаях выполняется встроенная команда
.Ic bind Fl e .
.Pp
Если попытка чтения из терминала приводит к завершению файла или
ошибке, библиотека сигнализирует программе об окончании файла и не
возвращает строку.
.Ss Input character bindings
Все описанные ниже привязки по умолчанию могут быть переопределены отдельными
программами и изменены с помощью встроенной команды
.Xr editrc 5
.Ic bind .
.Pp
В следующих таблицах,
.Sq Ctrl-
указывает символ с перевернутым битом 0x40, и
.Sq Meta-
указывает символ с установленным разрядом 0x80.
В режиме vi insert и в режиме emacs все метасимволы, которые текущий пользователь считает
пригодными для печати
.Xr locale 1 ,
привязаны к
.Ic ed-insert
вместо приведенной ниже команды редактирования.
Следовательно, в режиме UTF-8 большинство метасимволов недоступны
напрямую, поскольку их кодовые точки заняты
печатаемыми символами Юникода, а метасимволы обычно вводятся
с помощью команды редактирования
.Ic em-meta-next .
Например, для ввода
.Sq Meta-B
для того, чтобы вызвать команду редактора
.Ic ed-prev-word
в режиме emacs вызовите
.Ic em-meta-next
нажав и отпустив клавишу escape (или эквивалентное, Ctrl-[),
затем нажмите и отпустите клавишу
.Sq B .
Если вы настроили мета-клавишу на своей клавиатуре, например,
с помощью
.Ql setxkbmap -option altwin:left_meta_win ,
метасимволы Ctrl доступны непосредственно.
Например, для ввода
.Sq Ctrl-Meta-H
для того, чтобы вызвать команду редактора
.Ic ed-delete-prev-word
в режиме emacs удерживайте одновременно нажатыми клавиши
.Sq Ctrl ,
.Sq Meta ,
и
.Sq H .
В качестве альтернативы нажмите и отпустите клавишу escape, затем нажмите и
отпустите
.Sq Ctrl-H .
.Pp
В режиме ввода vi вводимые символы по умолчанию привязаны к следующим
командам редактора:
.Bl -column -offset indent "Ctrl-Z, TSTP" "ed-search-next-history"
.It Ctrl-D, EOF Ta Ic vi-list-or-eof
.It Ctrl-H, BS Ta Ic vi-delete-prev-char
.It Ctrl-J, LF Ta Ic ed-newline
.It Ctrl-M, CR Ta Ic ed-newline
.It Ctrl-Q Ta Ic ed-tty-start-output
.It Ctrl-S Ta Ic ed-tty-stop-output
.It Ctrl-U Ta Ic vi-kill-line-prev
.It Ctrl-V Ta Ic ed-quoted-insert
.It Ctrl-W Ta Ic ed-delete-prev-word
.It Ctrl-[, ESC Ta Ic vi-command-mode
.It Ctrl-\e, QUIT Ta Ic ed-tty-sigquit
.It Ctrl-?, DEL Ta Ic vi-delete-prev-char
.El
.Pp
Все остальные вводимые символы, кроме символа NUL (Ctrl-@),
привязаны к
.Ic ed-insert .
.Pp
В командном режиме vi вводимые символы по умолчанию привязаны к следующим
командам редактора:
.Bl -column -offset indent "Ctrl-Z, TSTP" "ed-search-next-history"
.It Ctrl-A Ta Ic ed-move-to-beg
.It Ctrl-C, INT Ta Ic ed-tty-sigint
.It Ctrl-E Ta Ic ed-move-to-end
.It Ctrl-H, BS Ta Ic ed-delete-prev-char
.It Ctrl-J, LF Ta Ic ed-newline
.It Ctrl-K Ta Ic ed-kill-line
.It Ctrl-L, FF Ta Ic ed-clear-screen
.It Ctrl-M, CR Ta Ic ed-newline
.It Ctrl-N Ta Ic ed-next-history
.It Ctrl-O Ta Ic ed-tty-flush-output
.It Ctrl-P Ta Ic ed-prev-history
.It Ctrl-Q Ta Ic ed-tty-start-output
.It Ctrl-R Ta Ic ed-redisplay
.It Ctrl-S Ta Ic ed-tty-stop-output
.It Ctrl-U Ta Ic vi-kill-line-prev
.It Ctrl-W Ta Ic ed-delete-prev-word
.It Ctrl-[, ESC Ta Ic em-meta-next
.It Ctrl-\e, QUIT Ta Ic ed-tty-sigquit
.It Space Ta Ic ed-next-char
.It # Ta Ic vi-comment-out
.It $ Ta Ic ed-move-to-end
.It % Ta Ic vi-match
.It + Ta Ic ed-next-history
.It \&, Ta Ic vi-repeat-prev-char
.It - Ta Ic ed-prev-history
.It \&. Ta Ic vi-redo
.It / Ta Ic vi-search-prev
.It 0 Ta Ic vi-zero
.It 1 to 9 Ta Ic ed-argument-digit
.It \&: Ta Ic ed-command
.It \&; Ta Ic vi-repeat-next-char
.It \&? Ta Ic vi-search-next
.It @ Ta Ic vi-alias
.It A Ta Ic vi-add-at-eol
.It B Ta Ic vi-prev-big-word
.It C Ta Ic vi-change-to-eol
.It D Ta Ic ed-kill-line
.It E Ta Ic vi-end-big-word
.It F Ta Ic vi-prev-char
.It G Ta Ic vi-to-history-line
.It I Ta Ic vi-insert-at-bol
.It J Ta Ic ed-search-next-history
.It K Ta Ic ed-search-prev-history
.It N Ta Ic vi-repeat-search-prev
.It O Ta Ic ed-sequence-lead-in
.It P Ta Ic vi-paste-prev
.It R Ta Ic vi-replace-mode
.It S Ta Ic vi-substitute-line
.It T Ta Ic vi-to-prev-char
.It U Ta Ic vi-undo-line
.It W Ta Ic vi-next-big-word
.It X Ta Ic ed-delete-prev-char
.It Y Ta Ic vi-yank-end
.It \&[ Ta Ic ed-sequence-lead-in
.It ^ Ta Ic ed-move-to-beg
.It _ Ta Ic vi-history-word
.It a Ta Ic vi-add
.It b Ta Ic vi-prev-word
.It c Ta Ic vi-change-meta
.It d Ta Ic vi-delete-meta
.It e Ta Ic vi-end-word
.It f Ta Ic vi-next-char
.It h Ta Ic ed-prev-char
.It i Ta Ic vi-insert
.It j Ta Ic ed-next-history
.It k Ta Ic ed-prev-history
.It l Ta Ic ed-next-char
.It n Ta Ic vi-repeat-search-next
.It p Ta Ic vi-paste-next
.It r Ta Ic vi-replace-char
.It s Ta Ic vi-substitute-char
.It t Ta Ic vi-to-next-char
.It u Ta Ic vi-undo
.It v Ta Ic vi-histedit
.It w Ta Ic vi-next-word
.It x Ta Ic ed-delete-next-char
.It y Ta Ic vi-yank
.It \&| Ta Ic vi-to-column
.It ~ Ta Ic vi-change-case
.It Ctrl-?, DEL Ta Ic ed-delete-prev-char
.It Meta-O Ta Ic ed-sequence-lead-in
.It Meta-[ Ta Ic ed-sequence-lead-in
.El
.Pp
В режиме emacs вводимые символы по умолчанию привязаны к следующим
командам редактора:
.Bl -column -offset indent "Ctrl-Z, TSTP" "ed-search-next-history"
.It 0 to 9 Ta Ic ed-digit
.It Ctrl-@, NUL Ta Ic em-set-mark
.It Ctrl-A Ta Ic ed-move-to-beg
.It Ctrl-B Ta Ic ed-prev-char
.It Ctrl-C, INT Ta Ic ed-tty-sigint
.It Ctrl-D, EOF Ta Ic em-delete-or-list
.It Ctrl-E Ta Ic ed-move-to-end
.It Ctrl-F Ta Ic ed-next-char
.It Ctrl-H, BS Ta Ic em-delete-prev-char
.It Ctrl-J, LF Ta Ic ed-newline
.It Ctrl-K Ta Ic ed-kill-line
.It Ctrl-L, FF Ta Ic ed-clear-screen
.It Ctrl-M, CR Ta Ic ed-newline
.It Ctrl-N Ta Ic ed-next-history
.It Ctrl-O Ta Ic ed-tty-flush-output
.It Ctrl-P Ta Ic ed-prev-history
.It Ctrl-Q Ta Ic ed-tty-start-output
.It Ctrl-R Ta Ic ed-redisplay
.It Ctrl-S Ta Ic ed-tty-stop-output
.It Ctrl-T Ta Ic ed-transpose-chars
.It Ctrl-U Ta Ic ed-kill-line
.It Ctrl-V Ta Ic ed-quoted-insert
.It Ctrl-W Ta Ic em-kill-region
.It Ctrl-X Ta Ic ed-sequence-lead-in
.It Ctrl-Y Ta Ic em-yank
.It Ctrl-Z, TSTP Ta Ic ed-tty-sigtstp
.It Ctrl-[, ESC Ta Ic em-meta-next
.It Ctrl-\e, QUIT Ta Ic ed-tty-sigquit
.It Ctrl-] Ta Ic ed-tty-dsusp
.It Ctrl-?, DEL Ta Ic em-delete-prev-char
.It Ctrl-Meta-H Ta Ic ed-delete-prev-word
.It Ctrl-Meta-L Ta Ic ed-clear-screen
.It Ctrl-Meta-_ Ta Ic em-copy-prev-word
.It Meta-0 to 9 Ta Ic ed-argument-digit
.It Meta-B Ta Ic ed-prev-word
.It Meta-C Ta Ic em-capitol-case
.It Meta-D Ta Ic em-delete-next-word
.It Meta-F Ta Ic em-next-word
.It Meta-L Ta Ic em-lower-case
.It Meta-N Ta Ic ed-search-next-history
.It Meta-O Ta Ic ed-sequence-lead-in
.It Meta-P Ta Ic ed-search-prev-history
.It Meta-U Ta Ic em-upper-case
.It Meta-W Ta Ic em-copy-region
.It Meta-X Ta Ic ed-command
.It Meta-[ Ta Ic ed-sequence-lead-in
.It Meta-b Ta Ic ed-prev-word
.It Meta-c Ta Ic em-capitol-case
.It Meta-d Ta Ic em-delete-next-word
.It Meta-f Ta Ic em-next-word
.It Meta-l Ta Ic em-lower-case
.It Meta-n Ta Ic ed-search-next-history
.It Meta-p Ta Ic ed-search-prev-history
.It Meta-u Ta Ic em-upper-case
.It Meta-w Ta Ic em-copy-region
.It Meta-x Ta Ic ed-command
.It Ctrl-Meta-? Ta Ic ed-delete-prev-word
.El
.Pp
Остальные символы
.Xr ascii 7
в диапазоне от 0x20 до 0x7e привязаны к
.Ic ed-insert .
.Pp
Если стандартный выход не подключен к оконечному устройству
или
.Xr el_set 3
был использован для установки
.Dv EL_EDITMODE
на 0, все привязки к вводимым символам отключены, и все
введенные символы добавляются в буфер редактирования.
В этом случае буфер редактирования возвращается программе после
ввода символа новой строки или возврата каретки или после ввода первого
символа, если
.Xr el_set 3
был использован для установки
.Dv EL_UNBUFFERED
до ненулевого значения.
.Ss Editor commands
Большинство команд редактора принимают необязательный аргумент.
Аргумент вводится путем добавления к команде редактора одной
или нескольких команд редактора
.Ic ed-argument-digit ,
.Ic ed-digit ,
.Ic em-universal-argument ,
или
.Ic vi-zero .
Если аргумент не указан, значение по умолчанию равно 1.
Для большинства команд редактора значение аргумента заключается в повторном
выполнении команды определенное количество раз.
.Pp
Когда речь идет о символьной строке от левого символа к
правому, левый символ включается в строку, в то время
как правый символ не включается.
.Pp
Если команда редактора вызывает ошибку, вводимый символ отбрасывается,
никаких действий не выполняется, и подается сигнал вызова терминала.
В случае неустранимой ошибки также подается сигнал вызова терминала,
но команда редактора все равно вступает в силу.
.Pp
В следующем списке привязки клавиш по умолчанию перечислены после
каждой команды редактора.
.Bl -tag -width 4n
.It Ic ed-argument-digit Pq vi command: 1 to 9; emacs: Meta-0 to Meta-9
Если используется режим ввода аргумента, добавьте входную цифру к
считываемому аргументу.
В противном случае переключитесь в режим ввода аргумента и используйте входную цифру
в качестве старшей цифры аргумента.
Это ошибка, если вводимый символ не является цифрой или если
существующий аргумент уже превышает миллион.
.It Ic ed-clear-screen Pq vi command: Ctrl-L; emacs: Ctrl-L, Ctrl-Meta-L
Очистите экран и отобразите буфер редактирования вверху.
Игнорируйте любые аргументы.
.It Ic ed-command Pq vi command: So \&: Sc ; emacs: Meta-X, Meta-x
Считайте строку из терминала, минуя обычную
функцию редактирования строк, и выполняйте эту строку как встроенную команду
.Xr editrc 5 .
Если вы находитесь в командном режиме vi, также переключитесь обратно в режим vi insert.
Игнорируйте любые аргументы.
.It Ic ed-delete-next-char Pq vi command: x
Удалите символ в позиции курсора.
С помощью аргумента удалите указанное количество символов.
В режиме emacs, если курсор находится в конце буфера редактирования, возникает ошибка.
В режиме vi в этом случае последний символ в буфере редактирования удаляется,
и если буфер пуст, это является ошибкой.
.It Ic ed-delete-prev-char Pq vi command: X, Ctrl-H, BS, Ctrl-?, DEL
Удалите символ слева от позиции курсора.
С помощью аргумента удалите это количество символов.
Если курсор находится в начале буфера редактирования, возникает ошибка.
.It Ic ed-delete-prev-word Pq vi: Ctrl-W; emacs: Ctrl-Meta-H, Ctrl-Meta-?
Переместитесь влево к ближайшему началу слова, удалите
строку с этой позиции до курсора и сохраните ее в буфере вырезания.
С аргументом удалите это количество слов.
Если курсор находится в начале буфера редактирования, возникает ошибка.
.It Ic ed-digit Pq emacs: 0 to 9
Если используется режим ввода аргумента, добавьте вводимую цифру к
считываемому аргументу.
В противном случае вызовите
.Ic ed-insert .
Это ошибка, если вводимый символ не является цифрой или если
существующий аргумент уже превышает миллион.
.It Ic ed-end-of-file Pq not bound by default
Удалите буфер редактирования и укажите программе конец файла.
Игнорируйте любые аргументы.
.It Ic ed-ignore Pq various
Удалите введенный символ и ничего не делайте.
.It Ic ed-insert Pq vi input: almost all; emacs: printable characters
В режиме вставки введите вводимый символ слева от позиции курсора.
В режиме замены перепишите символ рядом с курсором и переместите
курсор вправо на одну позицию.
Примите аргумент, чтобы повторить это действие.
Ошибка возникает, если в качестве входного символа используется символ NUL (Ctrl-@).
Ошибка при увеличении буфера редактирования также приводит к ошибке.
.It Ic ed-kill-line Pq vi command: D, Ctrl-K; emacs: Ctrl-K, Ctrl-U
Удалите строку от позиции курсора до конца строки
и сохраните ее в буфере вырезания.
Игнорируйте любые аргументы.
.It Ic ed-move-to-beg Pq vi command: ^, Ctrl-A; emacs: Ctrl-A
В режиме vi переместите курсор на первый символ без пробела в буфере
редактирования.
В режиме emacs переместите курсор в начало буфера редактирования.
Игнорируйте любые аргументы.
Может использоваться как команда перемещения после
.Ic vi_change_meta ,
.Ic vi_delete_meta ,
или
.Ic vi_yank .
.It Ic ed-move-to-end Pq vi command: $, Ctrl-E; emacs: Ctrl-E
Переместите курсор в конец буфера редактирования.
Игнорируйте любые аргументы.
Может использоваться как команда перемещения после
.Ic vi_change_meta ,
.Ic vi_delete_meta ,
или
.Ic vi_yank .
.It Ic ed-newline Pq all modes: Ctrl-J, LF, Ctrl-M, CR
Добавьте символ новой строки в буфер редактирования и верните буфер редактирования
программе.
Игнорируйте любые аргументы.
.It Ic ed-next-char Pq vi command: Space, l; emacs: Ctrl-F
Переместите курсор на одну позицию вправо.
Используя аргумент, переместите курсор на указанное количество символов.
Может использоваться как команда перемещения после
.Ic vi_change_meta ,
.Ic vi_delete_meta ,
или
.Ic vi_yank .
Это ошибка, если курсор уже находится в конце буфера редактирования.
.It Ic ed-next-history Pq vi command: j, +, Ctrl-N; emacs: Ctrl-N
Замените буфер редактирования следующей строкой хронологии.
Эта строка старше текущей строки.
Используя аргумент, перейдите вперед на указанное количество строк хронологии.
Переход на большее количество строк, чем доступно, является неустранимой ошибкой.
.It Ic ed-next-line Pq not bound by default
Переместите курсор вниз на одну строку.
Используя аргумент, переместите его вниз на указанное количество строк.
Ошибка возникает, если в буфере редактирования недостаточно символов
новой строки справа от позиции курсора.
.It Ic ed-prev-char Pq vi command: h; emacs: Ctrl-B
Переместите курсор на одну позицию влево.
Используя аргумент, переместите курсор на указанное количество символов.
Может использоваться как команда перемещения после
.Ic vi_change_meta ,
.Ic vi_delete_meta ,
или
.Ic vi_yank .
Это ошибка, если курсор уже находится в начале буфера
редактирования.
.It Ic ed-prev-history Pq vi command: k, -, Ctrl-P; emacs: Ctrl-P
Замените буфер редактирования предыдущей строкой истории.
Эта строка более новая, чем текущая строка.
Используя аргумент, вернитесь на указанное количество строк.
Создание резервной копии на большее количество строк, чем доступно, является неустранимой ошибкой.
.It Ic ed-prev-line Pq not bound by default
Переместите курсор на одну строку вверх.
Используя аргумент, переместите его на указанное количество строк вверх.
Ошибка возникает, если в буфере редактирования недостаточно символов
новой строки слева от позиции курсора.
.It Ic ed-prev-word Pq emacs: Meta-B, Meta-b
Переместите курсор влево к ближайшему началу слова.
С аргументом повторите это количество раз.
Может использоваться как команда перемещения после
.Ic vi_change_meta ,
.Ic vi_delete_meta ,
или
.Ic vi_yank .
Это ошибка, если курсор уже находится в начале буфера
редактирования.
.It Ic ed-quoted-insert Pq vi insert, emacs: Ctrl-V
Считайте один символ с терминала, минуя обычную
функцию редактирования строк, и вызывайте
.Ic ed-insert
на нем.
Если попытка прочитать символ возвращает конец файла или ошибку,
вызовите вместо этого
.Ic ed-end-of-file .
.It Ic ed-redisplay Pq vi command, emacs: Ctrl-R
Воспроизведите все заново.
Игнорируйте любые аргументы.
.It Ic ed-search-next-history Pq vi command: J; emacs: Meta-N, Meta-n
Замените буфер редактирования следующей соответствующей записью в истории.
.It Ic ed-search-prev-history Pq vi command: K; emacs: Meta-P, Meta-p
Замените буфер редактирования предыдущей соответствующей записью в истории.
.It Ic ed-sequence-lead-in Pq vi cmd: O, \&[; emacs: Ctrl-X;\
 both: Meta-O, Meta-[
Вызов макроса.
Смотрите раздел
.Sx Macros
ниже для получения подробностей.
.It Ic ed-start-over Pq not bound by default
Удалите содержимое буфера редактирования и начните с нуля.
Игнорируйте все аргументы.
.It Ic ed-transpose-chars Pq emacs: Ctrl-T
Замените символ в позиции курсора на символ
слева от него и переместите курсор на символ справа от
двух замененных символов.
Игнорируйте любые аргументы.
Это ошибка, если курсор находится в начале буфера редактирования
или если буфер редактирования содержит менее двух символов.
.It Ic ed-unassigned Pq all characters not listed
Эта команда редактора всегда приводит к ошибке.
.It Ic em-capitol-case Pq emacs: Meta-C, Meta-c
Введите строку от курсора до конца текущего
слова с заглавной буквы.
То есть, если она содержит хотя бы один буквенный символ, преобразуйте
первый буквенный символ в верхний регистр, а все
символы справа от него - в нижний.
В любом случае, переместите курсор на следующий символ после окончания
текущего слова.
.It Ic em-copy-prev-word Pq emacs: Ctrl-Meta-_
Скопируйте строку с начала текущего слова в курсор
и вставьте ее слева от курсора.
Переместите курсор на символ, следующий за вставленной строкой.
Если курсор находится в начале буфера редактирования, возникает ошибка.
.It Ic em-copy-region Pq emacs: Meta-W, Meta-w
Скопируйте строку с курсора на метку в буфер вырезания.
Если метка не установлена, это ошибка.
.It Ic em-delete-next-word Pq emacs: Meta-D, Meta-d
Удалите строку от курсора до конца текущего слова
и сохраните ее в буфере редактирования.
Если курсор находится в конце буфера редактирования, возникает ошибка.
.It Ic em-delete-or-list Pq emacs: Ctrl-D, EOF
Если курсор находится не в конце строки, удалите символ
рядом с курсором.
Если буфер редактирования пуст, укажите программе конец файла.
Если курсор находится не в конце буфера редактирования, а
буфер редактирования не пуст, это означает ошибку.
.It Ic em-delete-prev-char Pq emacs: Ctrl-H, BS, Ctrl-?, DEL
Удалите символ слева от курсора.
Если курсор находится в начале буфера редактирования, возникает ошибка.
.It Ic em-exchange-mark Pq not bound by default
Поменяйте местами курсор и метку.
.It Ic em-gosmacs-transpose Pq not bound by default
Поменяйте местами два символа слева от курсора.
Если курсор находится на первом или втором символе
буфера редактирования, возникает ошибка.
.It Ic em-inc-search-next Pq not bound by default
Emacs выполняет инкрементный следующий поиск.
.It Ic em-inc-search-prev Pq not bound by default
Инкрементальный обратный поиск в Emacs.
.It Ic em-kill-line Pq not bound by default
Удалите все содержимое буфера редактирования и сохраните его в буфере
вырезания.
.It Ic em-kill-region Pq emacs: Ctrl-W
Удалите строку от курсора до метки и сохраните ее в буфере
вырезания.
Если метка не установлена, это ошибка.
.It Ic em-lower-case Pq emacs: Meta-L, Meta-l
Преобразуйте символы от курсора до конца текущего
слова в нижний регистр.
.It Ic em-meta-next Pq vi command, emacs: Ctrl-[, ESC
Установите значение 0x80 для следующего введенного символа.
Если результирующая кодовая точка не предназначена для печати, удерживая нажатой
.Sq мета-клавишу ,
хотя ввод этого символа - более простой способ добиться того
же эффекта.
.It Ic em-next-word Pq Meta-F, Meta-f
Переместите курсор в конец текущего слова.
Может использоваться как команда перемещения после
.Ic vi_change_meta ,
.Ic vi_delete_meta ,
или
.Ic vi_yank .
Это ошибка, если курсор уже находится в конце буфера редактирования.
.It Ic em-set-mark Pq emacs: Ctrl-Q, NUL
Установите метку в текущее положение курсора.
.It Ic em-toggle-overwrite Pq not bound by default
Переключитесь из режима вставки в режим перезаписи или наоборот.
.It Ic em-universal-argument Pq not bound by default
Если используется режим ввода аргумента, умножьте аргумент на 4.
В противном случае переключитесь в режим ввода аргумента и установите значение аргумента равным 4.
Если существующий аргумент уже превышает
миллион, это ошибка.
.It Ic em-upper-case Pq emacs: Meta-U, Meta-u
Преобразуйте символы от курсора до конца текущего
слова в верхний регистр.
.It Ic em-yank Pq emacs: Ctrl-Y
Вставьте вырезанный буфер слева от курсора.
.It Ic vi-add Pq vi command: a
Переключитесь в режим вставки vi.
Если курсор уже не находится в конце буфера редактирования, переместите
его на одну позицию вправо.
.It Ic vi-add-at-eol Pq vi command: A
Переключитесь в режим вставки vi и переместите курсор в конец буфера редактирования.
.It Ic vi-alias Pq vi command: @
Если функция псевдонима была определена путем вызова функции
.Xr el_set 3
или
.Xr el_wset 3
с аргументом
.Dv EL_ALIAS_TEXT ,
считайте один символ из терминала, минуя обычную
функцию редактирования строк, вызывайте функцию псевдонима, передавая аргумент, который был указан с помощью
.Dv EL_ALIAS_TEXT
в качестве первого аргумента и считываемого символа с
добавленным символом подчеркивания в качестве второго аргумента и передайте строку, возвращенную
функцией alias, в
.Xr el_wpush 3 .
Это ошибка, если функция псевдонима не определена или если попытка прочитать
символ приводит к завершению файла или ошибке.
.It Ic vi-change-case Pq vi command: ~
Измените регистр символов у курсора и переместите курсор
на одну позицию вправо.
Ошибка возникает, если курсор уже находится в конце буфера редактирования.
.It Ic vi-change-meta Pq vi command: c
Удалите строку от позиции курсора до положения, указанного
следующей командой перемещения, и сохраните ее копию в буфере вырезания.
Если команда вводится дважды подряд, вместо этого удалите все содержимое буфера
редактирования и сохраните его копию в буфере вырезания.
В любом случае, после этого переключитесь в режим vi insert.
.It Ic vi-change-to-eol Pq vi command: C
Удалите строку от позиции курсора до конца строки
и сохраните ее в буфере вырезания, затем переключитесь в режим вставки vi.
.It Ic vi-command-mode Pq vi insert: Ctrl-[, ESC
Отмените ожидающие действия и аргументы и переключитесь в командный режим vi.
Если курсор уже не находится в начале буфера редактирования,
переместите его влево на один символ.
.It Ic vi-comment-out Pq vi command: #
Вставка символа
.Sq #
в начале буфера редактирования и возврат буфера редактирования
программе.
.It Ic vi-delete-meta Pq vi command: d
Удалите строку от позиции курсора до положения, указанного
следующей командой перемещения, и сохраните ее копию в буфере вырезания.
Если команда вводится дважды подряд, вместо этого удалите все содержимое буфера
редактирования и сохраните его копию в буфере вырезания.
.It Ic vi-delete-prev-char Pq vi insert: Ctrl-H, BS, Ctrl-?, DEL
Удалите символ слева от курсора.
Ошибка возникает, если курсор уже находится в начале буфера
редактирования.
.It Ic vi-end-big-word Pq vi command: E
Переместите курсор в конец текущего слова, разделенного пробелом.
Может использоваться как команда перемещения после
.Ic vi_change_meta ,
.Ic vi_delete_meta ,
или
.Ic vi_yank .
Это ошибка, если курсор уже находится в конце буфера редактирования.
.It Ic vi-end-word Pq vi command: e
Переместите курсор в конец текущего слова.
Может использоваться как команда перемещения после
.Ic vi_change_meta ,
.Ic vi_delete_meta ,
или
.Ic vi_yank .
Это ошибка, если курсор уже находится в конце буфера редактирования.
.It Ic vi-history-word Pq vi command: _
Вставьте первое слово из самой последней записи в истории после
курсора, переместите курсор на символ после вставленного
слова и переключитесь в режим вставки vi.
Если запись в истории отсутствует или самая последняя
запись в истории пуста, возникает ошибка.
.It Ic vi-insert Pq vi command: i
Войдите в режим вставки.
.It Ic vi-insert-at-bol Pq vi command: I
Переместите курсор в начало буфера редактирования и переключитесь в
режим vi вставки.
.It Ic vi-kill-line-prev Pq vi: Ctrl-U
Удалите строку от начала буфера редактирования до
курсора и сохраните ее в буфере вырезания.
.It Ic vi-list-or-eof Pq vi insert: Ctrl-D, EOF
Если буфер редактирования пуст, укажите программе конец файла.
Если буфер редактирования не пуст, это означает ошибку.
.It Ic vi-match Pq vi command: %
В качестве разделителей можно использовать открывающие и закрывающие круглые скобки.
Если курсор не находится на разделителе, переместите его вправо, пока он
не достигнет единицы, затем переместите его на соответствующий разделитель.
Может использоваться как команда перемещения после
.Ic vi_change_meta ,
.Ic vi_delete_meta ,
или
.Ic vi_yank .
Это ошибка, если нет разделителя рядом с курсором или в
строке справа от курсора, или если первый такой разделитель
не имеет соответствующего разделителя.
.It Ic vi-next-big-word Pq vi command: W
Переместите курсор вправо к началу следующего
слова, разделенного пробелом.
Может использоваться как команда перемещения после
.Ic vi_change_meta ,
.Ic vi_delete_meta ,
или
.Ic vi_yank .
Это ошибка, если курсор уже находится в конце буфера редактирования
или на его последнем символе.
.It Ic vi-next-char Pq vi command: f
Считайте один символ с терминала, минуя обычную
функцию редактирования строк, и переместите курсор вправо к следующему
экземпляру этого символа в буфере редактирования.
Может использоваться как команда перемещения после
.Ic vi_change_meta ,
.Ic vi_delete_meta ,
или
.Ic vi_yank .
Если попытка прочитать символ приводит к завершению файла или ошибке,
вызовите вместо этого
.Ic ed-end-of-file .
Это ошибка, если символ не найден при поиске справа
в буфере редактирования.
.It Ic vi-next-word Pq vi command: w
Переместите курсор вправо к началу следующего слова.
Может использоваться как команда перемещения после
.Ic vi_change_meta ,
.Ic vi_delete_meta ,
или
.Ic vi_yank .
Это ошибка, если курсор уже находится в конце буфера редактирования
или на его последнем символе.
.It Ic vi-paste-next Pq vi command: p
Вставьте копию буфера вырезания справа от курсора.
Если буфер вырезания пуст, возникает ошибка.
.It Ic vi-paste-prev Pq vi command: P
Вставьте копию буфера для вырезания слева от курсора.
Если буфер для вырезания пуст, это ошибка.
.It Ic vi-prev-big-word Pq vi command: B
Переместите курсор влево к следующему началу
слова, разделенного пробелом.
Может использоваться как команда перемещения после
.Ic vi_change_meta ,
.Ic vi_delete_meta ,
или
.Ic vi_yank .
Это ошибка, если курсор уже находится в начале буфера
редактирования.
.It Ic vi-prev-char Pq vi command: F
Считайте один символ с терминала, минуя обычную
функцию редактирования строк, и переместите курсор влево к следующему
экземпляру этого символа в буфере редактирования.
Может использоваться как команда перемещения после
.Ic vi_change_meta ,
.Ic vi_delete_meta ,
или
.Ic vi_yank .
Если попытка прочитать символ приводит к завершению файла или ошибке,
вызовите вместо этого
.Ic ed-end-of-file .
Это ошибка, если символ не найден при поиске слева
в буфере редактирования.
.It Ic vi-prev-word Pq vi command: b
Переместите курсор влево к следующему началу слова.
Может использоваться как команда перемещения после
.Ic vi_change_meta ,
.Ic vi_delete_meta ,
или
.Ic vi_yank .
Это ошибка, если курсор уже находится в начале буфера
редактирования.
.It Ic vi-redo Pq vi command: Sq \&.
Повторите последнюю команду без движения.
.It Ic vi-repeat-next-char Pq vi command: Sq \&;
Повторите поиск последнего символа в том же направлении.
Может использоваться как команда перемещения после
.Ic vi_change_meta ,
.Ic vi_delete_meta ,
или
.Ic vi_yank .
.It Ic vi-repeat-prev-char Pq vi command: Sq \&,
Повторите поиск по последнему символу в противоположном
направлении.
Может использоваться как команда перемещения после
.Ic vi_change_meta ,
.Ic vi_delete_meta ,
или
.Ic vi_yank .
.It Ic vi-repeat-search-next Pq vi command: n
Повторите поиск по самой последней истории в том же направлении.
.It Ic vi-repeat-search-prev Pq vi command: N
Повторите поиск по самой последней истории в обратном
направлении.
.It Ic vi-replace-char Pq vi command: r
Переключитесь в режим замены vi и автоматически переключитесь обратно в
командный режим vi после ввода следующего символа.
Смотрите
.Ic ed-insert
для описания режима замены.
Если курсор находится в конце буфера редактирования, возникает ошибка.
.It Ic vi-replace-mode Pq vi command: R
Переключитесь в режим vi-замены.
Это вариант режима vi-вставки; смотрите
.Ic ed-insert
из-за разницы.
.It Ic vi-search-next Pq vi command: \&?
Замените буфер редактирования следующей соответствующей записью в истории.
.It Ic vi-search-prev Pq vi command: /
Замените буфер редактирования предыдущей соответствующей записью в истории.
.It Ic vi-substitute-char Pq vi command: s
Удалите символ рядом с курсором и переключитесь в режим вставки vi.
.It Ic vi-substitute-line Pq vi command: S
Удалите все содержимое буфера редактирования, сохраните его копию
в буфере вырезания и перейдите в режим vi insert.
.It Ic vi-to-column Pq vi command: \&|
Переместите курсор на столбец, указанный в качестве аргумента.
Может использоваться как команда перемещения после
.Ic vi_change_meta ,
.Ic vi_delete_meta ,
или
.Ic vi_yank .
.It Ic vi-to-history-line Pq vi command: G
Замените буфер редактирования указанной записью истории.
.It Ic vi-to-next-char Pq vi command: t
Считайте один символ с терминала, минуя обычную
функцию редактирования строк, и переместите курсор вправо на
символ до следующего появления этого символа в буфере редактирования.
Может использоваться в качестве команды перемещения после
.Ic vi_change_meta ,
.Ic vi_delete_meta ,
или
.Ic vi_yank .
Если попытка прочитать символ приводит к завершению файла или ошибке,
вызовите вместо этого
.Ic ed-end-of-file .
Это ошибка, если символ не найден при поиске справа
в буфере редактирования.
.It Ic vi-to-prev-char Pq vi command: T
Считайте один символ с терминала, минуя обычные
функции редактирования строк, и переместите курсор влево на символ,
следующий за следующим экземпляром этого символа в буфере редактирования.
Может использоваться в качестве команды перемещения после
.Ic vi_change_meta ,
.Ic vi_delete_meta ,
или
.Ic vi_yank .
Если попытка прочитать символ приводит к завершению файла или ошибке,
вызовите вместо этого
.Ic ed-end-of-file .
Это ошибка, если символ не найден при поиске слева
в буфере редактирования.
.It Ic vi-undo Pq vi command: u
Отмените последнее изменение.
.It Ic vi-undo-line Pq vi command: U
Отмените все изменения в буфере редактирования.
.It Ic vi-yank Pq vi command: y
Скопируйте строку из курсора в положение, указанное
следующей командой перемещения, в буфер вырезания.
Если команда вводится дважды подряд, вместо этого скопируйте все содержимое буфера
редактирования в буфер вырезания.
.It Ic vi-yank-end Pq vi command: Y
Скопируйте строку от курсора до конца буфера редактирования
в буфер вырезания.
.It Ic vi-zero Pq vi command: 0
Если используется режим ввода аргумента, умножьте аргумент на десять.
В противном случае переместите курсор в начало буфера редактирования.
Может использоваться как команда перемещения после
.Ic vi_change_meta ,
.Ic vi_delete_meta ,
или
.Ic vi_yank .
.El
.Ss Macros
Если вводимый символ привязан к команде редактора
.Ic ed-sequence-lead-in ,
.Nm
попытается вызвать макрос.
Если вводимый символ сам по себе образует имя макроса, этот
макрос выполняется.
В противном случае дополнительные входные символы считываются до тех пор, пока считанная строка не
сформирует имя макроса, и в этом случае этот макрос не будет выполнен,
или пока считанная строка не совпадет с началом ни одного из существующих
имен макросов, и в этом случае строка, включающая последний, несоответствующий
символ, не будет удалена, а завершающий сигнал не будет включен. прозвенел звонок.
.Pp
Существует два вида макросов.
Командные макросы выполняют одну команду редактора.
Клавиатурные макросы возвращают строку символов, которая добавляется
в качестве новой строки к
.Sx Input Queue .
.Pp
Следующие командные макросы определены по умолчанию в командном
режиме vi и в режиме emacs:
.Bl -column -offset indent "Esc O A, Esc O A" "em-exchange-mark"
.It Esc \&[ A, Esc O A Ta Ic ed-prev-history
.It Esc \&[ B, Esc O B Ta Ic ed-next-history
.It Esc \&[ C, Esc O C Ta Ic ed-next-char
.It Esc \&[ D, Esc O D Ta Ic ed-prev-char
.It Esc \&[ F, Esc O F Ta Ic ed-move-to-end
.It Esc \&[ H, Esc O H Ta Ic ed-move-to-beg
.El
.Pp
В командном режиме vi они также определены по умолчанию без
начального экранирующего символа.
.Pp
Кроме того, библиотека
.Nm
попытается связать строки, сгенерированные клавишами со стрелками,
как сообщает база данных
.Xr terminfo 5
к этим командам редактора, если только это не нарушит
пользовательские настройки.
.Pp
В режиме emacs двухсимвольная строка
.Dq Ctrl-X Ctrl-X
привязана к команде редактора
.Ic em-exchange-mark .
.Ss Input Queue
Библиотека
.Nm
поддерживает очередь ввода, работающую в режиме FIFO.
Всякий раз, когда ему требуется ввести символ, он берет первый символ
из первой строки очереди ввода.
Когда очередь пуста, он считывает данные с терминала.
.Pp
Строка может быть добавлена в конец очереди ввода несколькими способами:
.Bl -dash -offset indent
.It
С помощью вызова одной из клавиш
.Sx Macros .
.It
Вызвав команду редактора
.Ic vi-redo .
.It
Вызвав команду редактора
.Ic vi-alias .
.It
При нажатии клавиши в режиме инкрементального поиска emacs, которая не
имеет особого значения в этом режиме, но возвращает к обычному
режиму emacs.
.It
Если прикладная программа напрямую вызывает функции
.Xr el_push 3
или
.Xr el_wpush 3 ,
это может обеспечить дополнительные, зависящие от конкретной программы способы
добавления во входную очередь.
.El
.Sh СМОТРИТЕ ТАКЖЕ
.Xr mg 1 ,
.Xr vi 1 ,
.Xr editline 3 ,
.Xr el_wgets 3 ,
.Xr el_wpush 3 ,
.Xr el_wset 3 ,
.Xr editrc 5
.Sh ИСТОРИЯ
Эта страница руководства впервые появилась в
.Ox 6.0
и
.Nx 8 .
.Sh АВТОРЫ
.An -nosplit
Эта страница руководства была написана
.An Инго Шварце Aq Mt schwarze@openbsd.org .
