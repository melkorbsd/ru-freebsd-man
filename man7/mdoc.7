.\"	$Id: mdoc.7,v 1.287 2021/07/29 17:32:01 schwarze Exp $
.\"
.\" Copyright (c) 2009, 2010, 2011 Kristaps Dzonsons <kristaps@bsd.lv>
.\" Copyright (c) 2010, 2011, 2013-2020 Ingo Schwarze <schwarze@openbsd.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: July 29 2021 $
.Dt MDOC 7
.Os
.Sh ИМЯ
.Nm mdoc
.Nd язык семантической разметки для форматирования справочных страниц
.Sh ОПИСАНИЕ
Язык
.Nm mdoc
поддерживает создание справочных страниц для утилиты
.Xr man 1 ,
позволяя создавать семантические аннотации к словам, фразам,
разделам страниц и полным страницам руководства.
Такие аннотации используются средствами форматирования для обеспечения единообразного
представления во всех руководствах, написанных на
.Nm ,
и поддерживают гиперссылки, если они поддерживаются носителем вывода.
.Pp
В этом справочном документе описывается структура справочных страниц,
а также синтаксис и использование языка
.Nm .
Эталонной реализацией инструмента синтаксического анализа и форматирования является
.Xr mandoc 1 ;
В разделе
.Sx СОВМЕСТИМОСТЬ
описывается совместимость с другими реализациями.
.Pp
В документе
.Nm
строки, начинающиеся с управляющего символа
.Sq \&. ,
называются
.Dq строками макроса .
Первое слово - это название макроса.
Оно состоит из двух или трех букв.
Большинство названий макросов начинаются с заглавной буквы.
Список доступных макросов приведен в разделе
.Sx ОБЗОР МАКРОСОВ .
Слова, следующие за именем макроса, являются аргументами макроса, необязательно
включать имена других вызываемых макросов; смотрите
.Sx СИНТАКСИС МАКРОСА
для получения подробной информации.
.Pp
Строки, не начинающиеся с управляющего символа, называются
.Dq текстовыми строками .
Они предоставляют текст в произвольной форме для печати; форматирование текста
зависит от соответствующего контекста обработки:
.Bd -literal -offset indent
\&.Sh Строки макроса изменяют состояние элемента управления.
Текстовые строки интерпретируются в рамках текущего состояния.
.Ed
.Pp
Многие аспекты базового синтаксиса языка
.Nm
основаны на языке
.Xr roff 7 ;
смотрите разделы
.Em СИНТАКСИС ЯЗЫКА
и
.Em СИНТАКСИС МАКРОСА
в руководстве
.Xr roff 7
для получения подробной информации, в частности, о
комментариях, экранирующих последовательностях, пробелах и кавычках.
Однако использование запросов
.Xr roff 7
в документах
.Nm
проблематично;
.Xr mandoc 1
поддерживает некоторые из них только для обеспечения обратной совместимости.
.Sh СТРУКТУРА РУКОВОДСТВА
Хорошо сформированный документ
.Nm
состоит из пролога документа, за которым следует один или несколько разделов.
.Pp
Пролог, который состоит из макросов
.Ic \&Dd ,
.Ic \&Dt ,
и
.Ic \&Os
в таком порядке, требуется для каждого документа.
.Pp
Первый раздел (разделы обозначаются символом
.Ic \&Sh )
должен быть разделом ИМЯ, состоящий, по меньшей мере, из одного
.Ic \&Nm
с последующим
.Ic \&Nd .
.Pp
После этого соглашение предписывает указать, по крайней мере, следующие разделы
.Em СИНТАКСИС
и
.Em ОПИСАНИЕ ,
хотя это варьируется в зависимости от разделов руководства.
.Pp
Ниже приведен хорошо сформированный скелет файла
.Nm
для утилиты
.Qq progname :
.Bd -literal -offset indent
\&.Dd $\&Mdocdate$
\&.Dt PROGNAME раздел
\&.Os
\&.Sh ИМЯ
\&.Nm progname
\&.Nd одна строчка о том, что он делает
\&.\e\(dq .Sh БИБЛИОТЕКА
\&.\e\(dq Только для разделов 2, 3 и 9.
\&.\e\(dq Не используется в OpenBSD.
\&.Sh СИНТАКСИС
\&.Nm progname
\&.Op Fl параметры
\&.Ar
\&.Sh ОПИСАНИЕ
Утилита
\&.Nm
обрабатывает файлы ...
\&.\e\(dq .Sh КОНТЕКСТ
\&.\e\(dq Только для функций раздела 9.
\&.\e\(dq .Sh ПРИМЕЧАНИЯ ПО ИСПОЛЬЗОВАНИЮ
\&.\e\(dq Не используется в OpenBSD.
\&.\e\(dq .Sh ВОЗВРАТ ЗНАЧЕНИЙ
\&.\e\(dq Для разделов 2, 3 и 9 функция возвращает только значения.
\&.\e\(dq .Sh ОКРУЖЕНИЕ
\&.\e\(dq Только для разделов 1, 6, 7 и 8.
\&.\e\(dq .Sh ФАЙЛЫ
\&.\e\(dq .Sh ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ
\&.\e\(dq Только для разделов 1, 6 и 8.
\&.\e\(dq .Sh ПРИМЕРЫ
\&.\e\(dq .Sh ДИАГНОСТИКА
\&.\e\(dq Только сообщения printf/stderr для разделов 1, 4, 6, 7, 8, и 9.
\&.\e\(dq .Sh ОШИБКИ
\&.\e\(dq Только настройки без ошибок для разделов 2, 3, 4 и 9.
\&.\e\(dq .Sh СМОТРИТЕ ТАКЖЕ
\&.\e\(dq .Xr foobar 1
\&.\e\(dq .Sh СТАНДАРТЫ
\&.\e\(dq .Sh ИСТОРИЯ
\&.\e\(dq .Sh АВТОРЫ
\&.\e\(dq .Sh ПРЕДУПРЕЖДЕНИЯ
\&.\e\(dq .Sh НЕИСПРОВНОСТИ
\&.\e\(dq .Sh МЕРЫ БЕЗОПАСНОСТИ
\&.\e\(dq Не используется в OpenBSD.
.Ed
.Pp
Разделы в документе
.Nm
расположены в обычном порядке, как указано выше.
Разделы должны быть составлены следующим образом:
.Bl -ohang -offset Ds
.It Em ИМЯ
Название(я) и однострочное описание документированного материала.
Синтаксис для этого следующий:
.Bd -literal -offset indent
\&.Nm name0 ,
\&.Nm name1 ,
\&.Nm name2
\&.Nd описание в одну строку
.Ed
.Pp
Несколько имен
.Sq \&Nm
должны быть разделены запятыми.
.Pp
Макрос(ы)
.Ic \&Nm
должен предшествовать макросу
.Ic \&Nd .
.Pp
Смотрите
.Ic \&Nm
и
.Ic \&Nd .
.It Em БИБЛИОТЕКА
Название библиотеки, содержащей документированный материал, который,
как предполагается, является функцией в руководстве по разделам 2, 3 или 9.
Синтаксис для этого следующий:
.Bd -literal -offset indent
\&.Lb libarm
.Ed
.Pp
Смотрите
.Ic \&Lb .
.It Em СИНТАКСИС
Документирует синтаксис вызова утилиты, синтаксис вызова функции или
конфигурацию устройства.
.Pp
Во-первых, утилиты (разделы 1, 6 и 8),
как правило, структурированы следующим образом:
.Bd -literal -offset indent
\&.Nm bar
\&.Op Fl v
\&.Op Fl o Ar file
\&.Op Ar
\&.Nm foo
\&.Op Fl v
\&.Op Fl o Ar file
\&.Op Ar
.Ed
.Pp
Команды должны быть расположены в алфавитном порядке.
.Pp
Во-вторых, вызовы функций(sразделы 2, 3, 9):
.Bd -literal -offset indent
\&.In header.h
\&.Vt extern const char *global;
\&.Ft "char *"
\&.Fn foo "const char *src"
\&.Ft "char *"
\&.Fn bar "const char *src"
.Ed
.Pp
Порядок расположения макросов
.Ic \&In ,
.Ic \&Vt ,
.Ic \&Fn
и
.Ic \&Fo
должен соответствовать соглашениям о заголовочных файлах языка Си.
.Pp
И в-третьих, конфигурации (раздел 4):
.Bd -literal -offset indent
\&.Cd \(dqit* at isa? port 0x2e\(dq
\&.Cd \(dqit* at isa? port 0x4e\(dq
.Ed
.Pp
Руководства, отсутствующие в этих разделах, как правило, не нуждаются в
.Em СИНТАКСИСЕ .
.Pp
Некоторые макросы отображаются по-разному в разделе
.Em СИНТАКСИС ,
в частности
.Ic \&Nm ,
.Ic \&Cd ,
.Ic \&Fd ,
.Ic \&Fn ,
.Ic \&Fo ,
.Ic \&In ,
.Ic \&Vt ,
и
.Ic \&Ft .
Все эти макросы выводятся в отдельной строке.
Если два таких разных макроса вызываются попарно (за исключением
.Ic \&Ft
до
.Ic \&Fo
или
.Ic \&Fn ) ,
они разделены вертикальным пробелом, за исключением
.Ic \&Fo ,
.Ic \&Fn ,
и
.Ic \&Ft ,
которые всегда разделены вертикальным пробелом.
.Pp
Когда текст и макросы следуют за макросом
.Ic \&Nm
начальная строка ввода охватывает несколько выходных строк,
все выходные строки, кроме первой, будут иметь отступ для выравнивания
с текстом, следующим непосредственно за макросом
.Ic \&Nm ,
вплоть до следующего макроса
.Ic \&Nm ,
.Ic \&Sh ,
или
.Ic \&Ss
или в конце окружающего блока, в зависимости от того, что наступит раньше.
.It Em ОПИСАНИЕ
Начинается с расширения краткого описания в одну строку в разделе
.Em ИМЯ :
.Bd -literal -offset indent
Утилита
\&.Nm
делает это, то и другое.
.Ed
.Pp
Обычно за этим следует разбивка параметров (при документировании
команды), таких как:
.Bd -literal -offset indent
Возможны следующие варианты:
\&.Bl \-tag \-width Ds
\&.It Fl v
Напечатайте подробную информацию.
\&.El
.Ed
.Pp
Перечислите варианты в алфавитном порядке,
прописные буквы перед строчными для каждой буквы,
независимо от того, является ли параметр аргументом.
Перед всеми вариантами букв поставьте цифры в порядке возрастания.
.Pp
Руководства, в которых не описана команда, не будут включать приведенный выше фрагмент.
.Pp
Начиная с раздела
.Em ОПИСАНИЕ
обычно содержит большую часть текста руководства, в более длинных руководствах
часто используется макрос
.Ic \&Ss
для формирования подразделов.
В очень длинных руководствах
.Em ОПИСАНИЕ
может быть разделен на несколько разделов, каждый из которых запускается отдельным макросом
.Ic \&Sh
за ним следует нестандартное название раздела, каждый из которых содержит
несколько подразделов, как в настоящем руководстве
.Nm .
.It Em КОНТЕКСТ
В этом разделе перечислены контексты, в которых могут вызываться функции, описанные в разделе 9.
Это контексты autoconf, process или interrupt.
.It Em ПРИМЕЧАНИЯ ПО ИСПОЛЬЗОВАНИЮ
Примечания, касающиеся конкретной реализации следует сохранять здесь.
Это полезно при реализации стандартных функций, которые могут иметь побочные
эффекты или заметные алгоритмические последствия.
.It Em ВОЗВРАТ ЗНАЧЕНИЙ
В этом разделе описываются
возвращаемые значения функций, описанные в разделах 2, 3 и 9.
.Pp
Смотрите
.Ic \&Rv .
.It Em ОКРУЖЕНИЕ
Содержит список переменных среды, используемых утилитой,
и объясняет синтаксис и семантику их значений.
В руководстве
.Xr environ 7
приведены примеры типичного содержимого и форматирования.
.Pp
Смотрите
.Ic \&Ev .
.It Em ФАЙЛЫ
Документируйте использованные файлы.
Полезно указать как название файла, так и краткое описание того, как
файл используется (создается, изменяется и т.д.).
.Pp
Смотрите
.Ic \&Pa .
.It Em ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ
В этом разделе описывается
статус завершения работы команд для утилит разделов 1, 6 и 8.
Исторически эта информация была описана в
.Em ДИАГНОСТИКЕ ,
практика, которая в настоящее время не поощряется.
.Pp
Смотрите
.Ic \&Ex .
.It Em ПРИМЕРЫ
Примеры использования.
Здесь часто содержатся фрагменты хорошо сформированных, хорошо протестированных вызовов.
Убедитесь, что примеры работают должным образом!
.It Em ДИАГНОСТИКА
Документирует сообщения об ошибках.
В разделах 4 и 9 руководств обычно это сообщения, выводимые
ядром на консоль и в журнал ядра.
В разделах 1, 6, 7 и 8 обычно это сообщения, выводимые
пользовательскими программами для стандартного вывода ошибок.
.Pp
Исторически сложилось так, что этот раздел использовался вместо
.Em ВОЗВРАЩАЕМОГО ЗНАЧЕНИЯ
для руководств в разделах 1, 6 и 8; однако такая практика
не рекомендуется.
.Pp
Смотрите
.Ic \&Bl
.Fl diag .
.It Em ОШИБКИ
Настройки документов
.Xr errno 2
в разделах 2, 3, 4 и 9.
.Pp
Смотрите
.Ic \&Er .
.It Em СМОТРИТЕ ТАКЖЕ
Ссылки на другие руководства по смежным темам.
Этот раздел должен присутствовать в большинстве руководств.
Перекрестные ссылки обычно следует размещать сначала по разделам, а затем
в алфавитном порядке (без учета регистра).
.Pp
В этом разделе также могут быть приведены ссылки на другую документацию, относящуюся к теме страницы руководства,
например, на авторитетные книги или журнальные статьи.
.Pp
Смотрите
.Ic \&Rs
и
.Ic \&Xr .
.It Em СТАНДАРТЫ
Ссылки на любые внедренные или используемые стандарты.
Если вы не придерживаетесь каких-либо стандартов, раздел
.Em ИСТОРИЯ
следует использовать вместо этого.
.Pp
Смотрите
.Ic \&St .
.It Em ИСТОРИЯ
Краткая история объекта, включая то, где он был впервые реализован,
и когда он был перенесен или повторно реализован для данной операционной системы.
.It Em АВТОРЫ
Авторские права принадлежат лицу или лицам, написавшим код и/или документацию.
Как правило, авторы должны быть указаны как по имени, так и по адресу электронной почты.
.Pp
Смотрите
.Ic \&An .
.It Em ПРЕДУПРЕЖДЕНИЯ
В этом разделе следует объяснить распространенные случаи неправильного использования и недопонимания.
.It Em НЕИСПРАВНОСТИ
В этом разделе должны быть описаны известные ошибки, ограничения и способы
их устранения.
.It Em МЕРЫ БЕЗОПАСНОСТИ
Документирует все меры предосторожности, которые следует учитывать операторам.
.El
.Sh ОБЗОР МАКРОСОВ
Этот обзор отсортирован таким образом, что макросы схожего назначения перечислены
вместе, что помогает найти наилучший макрос для любой конкретной цели.
Устаревшие макросы не включены в обзор, но их можно найти ниже
в алфавитном
.Sx СПРАВОЧНИКЕ ПО МАКРОСАМ .
.Ss Макросы преамбулы документа и раздела ИМЯ
.Bl -column "Brq, Bro, Brc" description
.It Ic \&Dd Ta дата документа: Cm $\&Mdocdate$ | Ar month day , year
.It Ic \&Dt Ta название документа: Ar TITLE section Op Ar arch
.It Ic \&Os Ta версия операционной системы: Op Ar system Op Ar version
.It Ic \&Nm Ta имя документа (один аргумент)
.It Ic \&Nd Ta описание документа (одна строка)
.El
.Ss Разделы и перекрестные ссылки
.Bl -column "Brq, Bro, Brc" description
.It Ic \&Sh Ta заголовок раздела (одна строка)
.It Ic \&Ss Ta заголовок подраздела (одна строка)
.It Ic \&Sx Ta внутренняя перекрестная ссылка на раздел или подраздел
.It Ic \&Xr Ta перекрестная ссылка на другую страницу руководства: Ar name section
.It Ic \&Tg Ta тег определение Ar term Pq <= 1 аргумент
.It Ic \&Pp Ta начать текстовый абзац (без аргументов)
.El
.Ss Дисплеи и списки
.Bl -column "Brq, Bro, Brc" description
.It Ic \&Bd , \&Ed Ta блок отображения:
.Fl Ar type
.Op Fl offset Ar width
.Op Fl compact
.It Ic \&D1 Ta отображение с отступом (одна строка)
.It Ic \&Dl Ta отображение букв с отступом (одна строка)
.It Ic \&Ql Ta отображение встроенного литерала: Ql text
.It Ic \&Bl , \&El Ta блок списка:
.Fl Ar type
.Op Fl width Ar val
.Op Fl offset Ar val
.Op Fl compact
.It Ic \&It Ta элемент списка (синтаксис зависит от Fl Ar type )
.It Ic \&Ta Ta разделитель ячеек таблицы вIc \&Bl Fl column No списках
.It Ic \&Rs , \&%* , \&Re Ta библиографический блок (ссылки)
.El
.Ss Управление расстоянием
.Bl -column "Brq, Bro, Brc" description
.It Ic \&Pf Ta префикс, без следующего горизонтального пробела (один аргумент)
.It Ic \&Ns Ta римский шрифт, без предшествующего горизонтального пробела (без аргументов)
.It Ic \&Ap Ta апостроф без окружающего пробела (без аргументов)
.It Ic \&Sm Ta переключите режим горизонтального интервала: Op Cm on | off
.It Ic \&Bk , \&Ek Ta держать блок: Fl words
.El
.Ss Семантическая разметка для утилит командной строки
.Bl -column "Brq, Bro, Brc" description
.It Ic \&Nm Ta запустите блок СИНТАКСИСА с названием утилиты
.It Ic \&Fl Ta параметры командной строки (флаги) (>=0 аргументов)
.It Ic \&Cm Ta модификатор команды (>0 аргументов)
.It Ic \&Ar Ta аргументы команды (>=0 аргументов)
.It Ic \&Op , \&Oo , \&Oc Ta дополнительные синтаксические элементы (вложение)
.It Ic \&Ic Ta внутренняя или интерактивная команда (>0 аргументов)
.It Ic \&Ev Ta переменная окружения (>0 аргументов)
.It Ic \&Pa Ta путь к файловой системе (>=0 аргументов)
.El
.Ss Семантическая разметка для библиотек функций
.Bl -column "Brq, Bro, Brc" description
.It Ic \&Lb Ta библиотека функций (один аргумент)
.It Ic \&In Ta включаемый файл (один аргумент)
.It Ic \&Fd Ta другая директива препроцессора (>0 аргументов)
.It Ic \&Ft Ta тип функции (>0 аргументов)
.It Ic \&Fo , \&Fc Ta блок функции: Ar funcname
.It Ic \&Fn Ta название функции: Ar funcname Op Ar argument ...
.It Ic \&Fa Ta аргумент функции (>0 аргументов)
.It Ic \&Vt Ta тип переменной (>0 аргументов)
.It Ic \&Va Ta имя переменной (>0 аргументов)
.It Ic \&Dv Ta определенная переменная или константа препроцессора (>0 аргументов)
.It Ic \&Er Ta постоянная ошибка (>0 аргументов)
.It Ic \&Ev Ta переменная окружения (>0 аргументов)
.El
.Ss Различная семантическая разметка
.Bl -column "Brq, Bro, Brc" description
.It Ic \&An Ta имя автора (>0 аргументов)
.It Ic \&Lk Ta гиперссылка: Ar uri Op Ar display_name
.It Ic \&Mt Ta Сделать гиперссылку mailto Dc: Ar localpart Ns @ Ns Ar domain
.It Ic \&Cd Ta объявление конфигурации ядра (>0 аргументов)
.It Ic \&Ad Ta адрес памяти (>0 аргументов)
.It Ic \&Ms Ta математический символ (>0 аргументов)
.El
.Ss Физическая разметка
.Bl -column "Brq, Bro, Brc" description
.It Ic \&Em Ta курсивный шрифт или подчеркивание (emphasis) (>0 аргументов)
.It Ic \&Sy Ta жирный шрифт (символьный) (>0 аргументов)
.It Ic \&No Ta вернуться к римскому шрифту (нормальному) (>0 аргументов)
.It Ic \&Bf , \&Ef Ta шрифтовый блок: Fl Ar type | Cm \&Em | \&Li | \&Sy
.El
.Ss Физические ограждения
.Bl -column "Brq, Bro, Brc" description
.It Ic \&Dq , \&Do , \&Dc Ta заключите в типографские двойные кавычки: Dq text
.It Ic \&Qq , \&Qo , \&Qc Ta заключите в печатные двойные кавычки: Qq text
.It Ic \&Sq , \&So , \&Sc Ta заключать в одинарные кавычки: Sq text
.It Ic \&Pq , \&Po , \&Pc Ta заключить в круглые скобки: Pq text
.It Ic \&Bq , \&Bo , \&Bc Ta заключить в квадратные скобки: Bq text
.It Ic \&Brq , \&Bro , \&Brc Ta заключать в фигурные скобки: Brq text
.It Ic \&Aq , \&Ao , \&Ac Ta заключить в угловые скобки: Aq text
.It Ic \&Eo , \&Ec Ta универсальный корпус
.El
.Ss Создание текста
.Bl -column "Brq, Bro, Brc" description
.It Ic \&Ex Fl std Ta стандартные значения выхода из команды: Op Ar utility ...
.It Ic \&Rv Fl std Ta значения, возвращаемые стандартной функцией: Op Ar function ...
.It Ic \&St Ta ссылка на документ о стандартах (один аргумент)
.It Ic \&At Ta At
.It Ic \&Bx Ta Bx
.It Ic \&Bsx Ta Bsx
.It Ic \&Nx Ta Nx
.It Ic \&Fx Ta Fx
.It Ic \&Ox Ta Ox
.It Ic \&Dx Ta Dx
.El
.Sh ССЫЛКА НА МАКРОС
Этот раздел является каноническим справочником по всем макросам, расположенным
в алфавитном порядке.
Для определения области действия отдельных макросов смотрите
.Sx СИНТАКСИС МАКРОСОВ.
.Bl -tag -width 3n
.It Ic \&%A Ar first_name ... last_name
Имя автора блока
.Ic \&Rs .
Нескольким авторам следует предоставить свою собственную строку
.Ic \%%A .
Имена авторов следует указывать сначала полным или сокращенным именем (ами),
а затем полной фамилией.
.It Ic \&%B Ar title
Книжное название блока
.Ic \&Rs .
Этот макрос также может использоваться в небиблиографическом контексте при
ссылке на названия книг.
.It Ic \&%C Ar location
Город публикации или местоположение блока
.Ic \&Rs .
.It Ic \&%D Oo Ar month day , Oc Ar year
Дата публикации блока
.Ic \&Rs .
Укажите полное английское название
.Ar месяца
и все четыре цифры
.Ar года .
.It Ic \&%I Ar name
Имя издателя или эмитента блока
.Ic \&Rs .
.It Ic \&%J Ar name
Название журнала для блока
.Ic \&Rs .
.It Ic \&%N Ar number
Номер выпуска (обычно для журналов) блока
.Ic \&Rs .
.It Ic \&%O Ar line
Дополнительная информация о блоке
.Ic \&Rs .
.It Ic \&%P Ar number
Номер страницы книги или журнала в блоке
.Ic \&Rs .
Обычно аргумент начинается с
.Ql p.\&
для одной страницы или
.Ql pp.\&
для ряда страниц, например:
.Pp
.Dl .%P pp. 42\e(en47
.It Ic \&%Q Ar name
Институциональный автор (школа, правительство и т.д.) блока
.Ic \&Rs .
Нескольким институциональным авторам, каждому из которых должна быть предоставлена своя собственная строка
.Ic \&%Q .
.It Ic \&%R Ar name
Технический отчет название блока
.Ic \&Rs .
.It Ic \&%T Ar title
Название статьи в блоке
.Ic \&Rs .
Этот макрос также может использоваться в небиблиографическом контексте при
ссылке на названия статей.
.It Ic \&%U Ar protocol Ns :// Ns Ar path
URI справочного документа.
.It Ic \&%V Ar number
Номер тома блока
.Ic \&Rs .
.It Ic \&Ac
Закрыть блок
.Ic \&Ao .
Не имеет никаких дополнительных аргументов.
.Tg Ad
.It Ic \&Ad Ar address
Адрес в памяти.
Не используйте это значение для почтовых адресов.
.Pp
Примеры:
.Dl \&.Ad [0,$]
.Dl \&.Ad 0x00000000
.Tg An
.It Ic \&An Fl split | nosplit | Ar first_name ... last_name
Имя автора.
Может использоваться как для обозначения авторов программы, функции или драйвера
, описанных в руководстве, так и для обозначения авторов самого руководства.
Требуется либо имя автора, либо один из следующих аргументов:
.Pp
.Bl -tag -width "-nosplitX" -offset indent -compact
.It Fl split
Запускайте новую строку вывода перед каждым последующим вызовом
.Ic \&An .
.It Fl nosplit
Противоположность
.Fl split .
.El
.Pp
Значение по умолчанию равно
.Fl nosplit .
Эффект от выбора любого из режимов
.Fl split
заканчивается в начале раздела
.Em AUTHORS .
В разделе
.Em AUTHORS
значение по умолчанию равно
.Fl nosplit
для первого списка авторов и
.Fl split
для всех остальных списков авторов.
.Pp
Примеры:
.Dl \&.An -nosplit
.Dl \&.An Kristaps Dzonsons \&Aq \&Mt kristaps@bsd.lv
.It Ic \&Ao Ar block
Начинается блок, заключенный в угловые скобки.
Не содержит аргументов head.
Этот макрос практически никогда не используется.
Смотрите
.Ic \&Aq
для получения более подробной информации.
.Tg Ap
.It Ic \&Ap
Вставляет апостроф без каких-либо окружающих его пробелов.
Обычно используется как грамматический прием при обозначении глагольной
формы функции.
.Pp
Примеры:
.Dl \&.Fn execve \&Ap d
.Tg Aq
.It Ic \&Aq Ar line
Заключите оставшуюся часть строки ввода в угловые скобки.
Единственный важный вариант использования - для адресов электронной почты.
Смотрите
.Ic \&Mt
для получения более подробной информации.
.Pp
Иногда он используется для обозначения символов и клавиш, например:
.Bd -literal -offset indent
Нажмите кнопку
\&.Aq escape ,
чтобы ...
.Ed
.Pp
Для URI используйте вместо этого
.Ic \&Lk ,
и
.Ic \&In
для директив
.Dq #include .
Никогда не заворачивайте
.Ic \&Ar
в
.Ic \&Aq .
.Pp
С
.Ic \&Aq
обычно выводится с использованием символов, отличных от ASCII, в режимах вывода, отличных от ASCII,
не используйте его там, где символы ASCII
.Sq <
и
.Sq >
требуются в качестве синтаксических элементов.
Вместо этого в таких случаях используйте эти символы напрямую, комбинируя их
с макросами
.Ic \&Pf ,
.Ic \&Ns ,
или
.Ic \&Eo
по мере необходимости.
.Pp
Смотрите также
.Ic \&Ao .
.Tg Ar
.It Ic \&Ar Op Ar placeholder ...
Аргументы команды.
Если аргумент не указан, строка
.Dq file ...\&
используется по умолчанию.
.Pp
Примеры:
.Dl ".Fl o Ar file"
.Dl ".Ar"
.Dl ".Ar arg1 , arg2 ."
.Pp
Аргументы для макроса
.Ic \&Ar
это имена и заполнители для аргументов команды;
для дословной передачи фиксированных строк в качестве аргументов используйте
.Ic \&Fl
или
.Ic \&Cm .
.Tg At
.It Ic \&At Op Ar version
Форматирует версию
.At .
Принимает один необязательный аргумент:
.Pp
.Bl -tag -width "v[1-7] | 32vX" -offset indent -compact
.It Cm v[1-7] | 32v
Версия
.At .
.It Cm III
.At III .
.It Cm V | V.[1-4]
Версия
.At V .
.El
.Pp
Обратите внимание, что эти аргументы не начинаются с дефиса.
.Pp
Примеры:
.Dl \&.At
.Dl \&.At III
.Dl \&.At V.1
.Pp
Смотрите также
.Ic \&Bsx ,
.Ic \&Bx ,
.Ic \&Dx ,
.Ic \&Fx ,
.Ic \&Nx ,
и
.Ic \&Ox .
.It Ic \&Bc
Закрыть блок
.Ic \&Bo .
Не имеет никаких дополнительных аргументов.
.Tg Bd
.It Ic \&Bd Fl Ns Ar type Oo Fl offset Ar width Oc Op Fl compact
Начните отображать блок.
Отображаемые блоки используются для выбора отступа и
выравнивания, отличных от тех, которые используются для окружающего текста.
Они могут содержать как макролинии, так и текстовые строки.
По умолчанию перед отображаемым блоком ставится вертикальный пробел.
.Pp
.Ar Тип
должен быть одним из следующих:
.Bl -tag -width 13n -offset indent
.It Fl centered
Создайте по одной выходной строке из каждой входной строки и выровняйте каждую строку по центру.
Использование этого типа отображения не рекомендуется; во многих реализациях
.Nm
отображает его плохо.
.It Fl filled
Измените положение переносов строк, чтобы заполнить каждую строку, и
выровняйте полученный блок по левому и правому краю.
.It Fl literal
Выводите по одной строке из каждой строки ввода
и не выравнивайте размер блока по ширине.
Сохраняйте пробелы в том виде, в каком они отображаются во входных данных.
Всегда используйте шрифт постоянной ширины.
Используйте это для отображения исходного кода.
.It Fl ragged
Измените положение переносов строк, чтобы заполнить каждую строку, и выровняйте
полученный блок по левому краю.
.It Fl unfilled
То же самое, что
.Fl literal ,
но с использованием того же шрифта, что и для обычного текста, который является шрифтом переменной ширины,
если поддерживается устройством вывода.
.El
.Pp
.Ar Тип
должны быть предоставлены в первую очередь.
Могут последовать дополнительные аргументы:
.Bl -tag -width 13n -offset indent
.It Fl offset Ar width
Сделайте отступ от экрана по
.Ar ширине ,
который может быть одним из следующих:
.Bl -item
.It
Одна из предопределенных строк
.Cm indent ,
ширина стандартного отступа (шесть символов постоянной ширины);
.Cm indent-two ,
дважды
.Cm indent ;
.Cm left ,
который не имеет никакого эффекта;
.Cm right ,
который выравнивается по правому краю; или
.Cm center ,
который выравнивается вокруг воображаемой центральной оси.
.It
Вызов макроса, который выбирает предопределенную ширину,
связанную с этим макросом.
Наиболее популярным является воображаемый макрос
.Ar \&Ds ,
который принимает решение о
.Sy 6n .
.It
Ширину масштабирования, как описано в
.Xr roff 7 .
.It
Произвольная строка, отступ которой равен длине этой строки.
.El
.Pp
Когда аргумент отсутствует,
.Fl offset
игнорируется.
.It Fl compact
Не оставляйте вертикального пространства перед дисплеем.
.El
.Pp
Примеры:
.Bd -literal -offset indent
\&.Bd \-literal \-offset indent \-compact
   Hello       world.
\&.Ed
.Ed
.Pp
Смотрит также
.Ic \&D1
и
.Ic \&Dl .
.Tg Bf
.It Ic \&Bf Fl emphasis | literal | symbolic | Cm \&Em | \&Li | \&Sy
Измените режим шрифта для выделенного блока текста.
Аргументы
.Fl emphasis
и
.Cm \&Em
являются эквивалентными, как и
.Fl symbolic
и
.Cm \&Sy ,
и
.Fl literal
и
.Cm \&Li .
Без аргумента этот макрос ничего не делает.
Режим шрифта сохраняется до тех пор, пока не будет изменен новым режимом шрифта во вложенной
области или
.Ic \&Ef
встречается.
.Pp
Смотрите также
.Ic \&Li ,
.Ic \&Ef ,
.Ic \&Em ,
и
.Ic \&Sy .
.Tg Bk
.It Ic \&Bk Fl words
Для каждого макроса сохраняйте его выходные данные в одной и той же строке вывода до тех пор,
пока не будет достигнут конец макроса или конец строки ввода, в зависимости от того,
что наступит раньше.
Переносы строк в текстовых строках не изменяются.
.Pp
Аргумент
.Fl words
является обязательным; дополнительные аргументы игнорируются.
.Pp
Следующий пример не будет прерываться внутри каждой строки макроса
.Ic \&Op :
.Bd -literal -offset indent
\&.Bk \-words
\&.Op Fl f Ar flags
\&.Op Fl o Ar output
\&.Ek
.Ed
.Pp
Будьте осторожны при использовании слишком длинных линий в пределах блока хранения!
Это приведет к увеличению правого поля.
.Tg Bl
.It Xo
.Ic \&Bl
.Fl Ns Ar type
.Op Fl width Ar val
.Op Fl offset Ar val
.Op Fl compact
.Op Ar col ...
.Xc
Begin a list.
Списки состоят из элементов, указанных с помощью макроса
.Ic \&It,
содержащий head, или body, или то и другое вместе.
.Pp
.Ar Тип
списка является обязательным и должен быть указан в первую очередь.
Аргументы
.Fl width
и
.Fl offset
принимают имена макросов, как описано для
.Ic \&Bd
.Fl offset ,
масштабирование ширины, как описано в
.Xr roff 7 ,
или используйте длину заданной строки.
.Fl offset
это глобальный отступ для всего списка, затрагивающий как заголовки,
так и тела элементов.
Для тех типов списков, которые поддерживают это, аргумент
.Fl width
запрашивает дополнительный отступ в текстах элементов,
который должен быть добавлен в
.Fl offset .
Если указывается только аргумент
.Fl compact ,
элементы списка разделяются вертикальным пробелом.
.Pp
В списке должен быть указан один из следующих типов списков:
.Bl -tag -width 12n -offset indent
.It Fl bullet
Заголовки элементов указать нельзя, но в начале каждого элемента будет напечатан маркер.
Он отображает начало в той же строке вывода, что и маркер,
и предназначен в соответствии с аргументом
.Fl width .
.It Fl column
Список с разбивкой по столбцам.
Аргумент
.Fl width
не имеет никакого эффекта; вместо этого длина строки каждого аргумента
определяет ширину одного столбца.
Если первая строка основного текста списка
.Fl column
это не строка макроса
.Ic \&It ,
контексты
.Ic \&It ,
охватывающие по одной строке ввода, подразумеваются до тех пор, пока не обнаруживается строка макроса
.Ic \&It ,
и в этот момент элементы начинают интерпретироваться так, как
описано в документации
.Ic \&It .
.It Fl dash
Как
.Fl bullet ,
за исключением того, что вместо маркеров используются тире.
.It Fl diag
Как
.Fl inset ,
за исключением того, что заголовки элементов не анализируются для вызовов макросов.
Наиболее часто используется в разделе
.Em ДИАГНОСТИКА
с константами ошибок в заголовках элементов.
.It Fl enum
Нумерованный список.
Заголовки элементов указать нельзя.
Отформатированный как
.Fl bullet ,
за исключением того, что вместо маркеров используются количественные числа,
начинающиеся с 1.
.It Fl hang
Как
.Fl tag ,
за исключением того, что первые строки текста элементов не имеют отступов, а следуют
за заголовками элементов, как в списках
.Fl inset .
.It Fl hyphen
Синоним для
.Fl dash .
.It Fl inset
Заголовки элементов следуют за заголовками элементов в одной строке с использованием обычного
интервала между словами.
Заголовки не предназначены, а аргумент
.Fl width
игнорируется.
.It Fl item
Заголовки элементов указать нельзя, и ни один из них не печатается.
Заголовки элементов не предназначены, а аргумент
.Fl width
игнорируется.
.It Fl ohang
Он начинается в строке, следующей за заголовками товаров, и не предназначен для этого.
Аргумент
.Fl width
игнорируется.
.It Fl tag
Тела элементов имеют отступы в соответствии с аргументом
.Fl width .
Когда заголовок элемента помещается в углубление, текст элемента следует
за этим заголовком по той же выходной строке.
В противном случае текст начинается с выходной строки, следующей за заголовком.
.El
.Pp
Списки могут быть вложены в списки и дисплеи.
Вложенность списков
.Fl column
и
.Fl enum
может быть непереносимой.
.Pp
Смотрите также
.Ic \&El
и
.Ic \&It .
.It Ic \&Bo Ar block
Начинается блок, заключенный в квадратные скобки.
Не содержит аргументов head.
.Pp
Примеры:
.Bd -literal -offset indent -compact
\&.Bo 1 ,
\&.Dv BUFSIZ \&Bc
.Ed
.Pp
Смотрите также
.Ic \&Bq .
.Tg Bq
.It Ic \&Bq Ar line
Заключает свои аргументы в квадратные скобки.
.Pp
Примеры:
.Dl \&.Bq 1 , \&Dv BUFSIZ
.Pp
.Em Замечания :
этим макросом иногда злоупотребляют для эмуляции необязательных аргументов
команд; правильными макросами, которые следует использовать для этой цели, являются
.Ic \&Op ,
.Ic \&Oo ,
и
.Ic \&Oc .
.Pp
Смотрите также
.Ic \&Bo .
.It Ic \&Brc
Закрыть блок
.Ic \&Bro .
Не имеет никаких дополнительных аргументов.
.It Ic \&Bro Ar block
Начинается блок, заключенный в фигурные скобки.
Не содержит аргументов head.
.Pp
Примеры:
.Bd -literal -offset indent -compact
\&.Bro 1 , ... ,
\&.Va n \&Brc
.Ed
.Pp
Смотрите также
.Ic \&Brq .
.Tg Brq
.It Ic \&Brq Ar line
Заключает свои аргументы в фигурные скобки.
.Pp
Примеры:
.Dl \&.Brq 1 , ... , \&Va n
.Pp
Смотрите также
.Ic \&Bro .
.Tg Bsx
.It Ic \&Bsx Op Ar version
Отформатирует версию
.Bsx ,
указанную в качестве аргумента или значение по умолчанию, если
аргумент не указан.
.Pp
Примеры:
.Dl \&.Bsx 1.0
.Dl \&.Bsx
.Pp
Смотрите также
.Ic \&At ,
.Ic \&Bx ,
.Ic \&Dx ,
.Ic \&Fx ,
.Ic \&Nx ,
и
.Ic \&Ox .
.It Ic \&Bt
Поддерживается только для обеспечения совместимости, не используйте это в новых руководствах.
Выводит
.Dq в настоящее время находится в стадии бета-тестирования.
.Tg Bx
.It Ic \&Bx Op Ar version Op Ar variant
Отформатирует версию
.Bx ,
указанную в качестве аргумента или значение по умолчанию, если
аргумент не указан.
.Pp
Примеры:
.Dl \&.Bx 4.3 Tahoe
.Dl \&.Bx 4.4
.Dl \&.Bx
.Pp
Смотрите также
.Ic \&At ,
.Ic \&Bsx ,
.Ic \&Dx ,
.Ic \&Fx ,
.Ic \&Nx ,
и
.Ic \&Ox .
.Tg Cd
.It Ic \&Cd Ar line
Объявление конфигурации ядра.
Это обозначает строки, принимаемые
.Xr config 8 .
Чаще всего он используется на страницах руководства по разделу 4.
.Pp
Примеры:
.Dl \&.Cd device le0 at scode?
.Pp
.Em Замечания :
этим макросом обычно злоупотребляют, используя литералы в кавычках для сохранения
пробелов и выравнивания последовательных объявлений
.Ic \&Cd .
Такая практика не поощряется.
.Tg Cm
.It Ic \&Cm Ar keyword ...
Модификаторы команд.
Обычно используется для фиксированных строк, передаваемых в качестве аргументов интерактивным
командам, командам в интерпретируемых скриптах или
директивам конфигурационного файла, если только
.Ic \&Fl
не является более подходящим.
.Pp
Примеры:
.Dl ".Nm mt Fl f Ar device Cm rewind"
.Dl ".Nm ps Fl o Cm pid , Ns Cm command"
.Dl ".Nm dd Cm if= Ns Ar file1 Cm of= Ns Ar file2"
.Dl ".Ic set Fl o Cm vi"
.Dl ".Ic lookup Cm file bind"
.Dl ".Ic permit Ar identity Op Cm as Ar target"
.Tg D1
.It Ic \&D1 Ar line
Отображение с отступом в одну строку.
Этот параметр отформатирован по правилам по умолчанию и полезен для простых
инструкций с отступом.
За ним следует новая строка.
.Pp
Примеры:
.Dl \&.D1 \&Fl abcdefgh
.Pp
Смотрите также
.Ic \&Bd
и
.Ic \&Dl .
.It Ic \&Db
Этот макрос устарел.
Замена не требуется.
Он игнорируется
.Xr mandoc 1
и groff, включая его аргументы.
Ранее он использовался для переключения режима отладки.
.It Ic \&Dc
Закрыть блок
.Ic \&Do .
Не имеет никаких дополнительных аргументов.
.Tg Dd
.It Ic \&Dd Cm $\&Mdocdate$ | Ar month day , year
Данные документа для отображения в нижнем колонтитуле страницы,
обычно это дата последнего изменения.
Это обязательный первый макрос в любом руководстве
.Nm .
.Pp
.Ar Month
это полное английское название месяца,
.Ar day
является целым числом, и значение
.Ar year
это полный четырехзначный год.
.Pp
Другие аргументы не переносимы; утилита
.Xr mandoc 1
обрабатывает их следующим образом:
.Bl -dash -offset 3n -compact
.It
Чтобы дата автоматически заполнялась версией
.Ox
от
.Xr cvs 1 ,
в качестве аргумента может быть указана специальная строка
.Dq $\&Mdocdate$ .
.It
Традиционный, чисто цифровой формат
.Xr man 7
.Ar year Ns \(en Ns Ar month Ns \(en Ns Ar day
тоже принят.
.It
Если строка даты не может быть проанализирована, она используется дословно.
.It
Если строка даты не указана, используется текущая дата.
.El
.Pp
Примеры:
.Dl \&.Dd $\&Mdocdate$
.Dl \&.Dd $\&Mdocdate: July 2 2018$
.Dl \&.Dd July 2, 2018
.Pp
Смотрите также
.Ic \&Dt
и
.Ic \&Os .
.Tg Dl
.It Ic \&Dl Ar line
Отображение с отступом в одну строку.
Это форматируется как буквальный текст и полезно для команд и
вызовов.
За ним следует новая строка.
.Pp
Примеры:
.Dl \&.Dl % mandoc mdoc.7 \e(ba less
.Pp
Смотрите также
.Ic \&Ql ,
.Ic \&Bd Fl literal ,
и
.Ic \&D1 .
.It Ic \&Do Ar block
Начинается блок, заключенный в двойные кавычки.
Не содержит аргументов head.
.Pp
Примеры:
.Bd -literal -offset indent -compact
\&.Do
April is the cruellest month
\&.Dc
\e(em T.S. Eliot
.Ed
.Pp
Смотрите также
.Ic \&Dq .
.Tg Dq
.It Ic \&Dq Ar line
Заключает свои аргументы в
.Dq типографские
двойные кавычки.
.Pp
Примеры:
.Bd -literal -offset indent -compact
\&.Dq April is the cruellest month
\e(em T.S. Eliot
.Ed
.Pp
Смотрите также
.Ic \&Qq ,
.Ic \&Sq ,
и
.Ic \&Do .
.Tg Dt
.It Ic \&Dt Ar TITLE section Op Ar arch
Название документа для отображения в верхнем колонтитуле страницы.
Это обязательный второй макрос для любого файла
.Nm .
.Pp
Его аргументы заключаются в следующем:
.Bl -tag -width section -offset 2n
.It Ar TITLE
Название документа (name), значение по умолчанию
.Dq UNTITLED
если не указано иное.
Чтобы добиться единообразного оформления строк верхнего колонтитула страницы,
по общему правилу все они должны быть заглавными.
.It Ar section
Раздел руководства.
Это может быть один из
.Cm 1
.Pq General Commands ,
.Cm 2
.Pq System Calls ,
.Cm 3
.Pq Library Functions ,
.Cm 3p
.Pq Perl Library ,
.Cm 4
.Pq Device Drivers ,
.Cm 5
.Pq File Formats ,
.Cm 6
.Pq Games ,
.Cm 7
.Pq Miscellaneous Information ,
.Cm 8
.Pq System Manager's Manual ,
или
.Cm 9
.Pq Kernel Developer's Manual .
Он должен соответствовать суффиксу имени файла, указанному в руководстве, и по умолчанию должен
содержать пустую строку, если она не указана.
.It Ar arch
Это определяет архитектуру машины, к которой применяется страница руководства,
где это уместно, например
.Cm alpha ,
.Cm amd64 ,
.Cm i386 ,
или
.Cm sparc64 .
Список допустимых архитектур зависит от операционной системы.
.El
.Pp
Примеры:
.Dl \&.Dt FOO 1
.Dl \&.Dt FOO 9 i386
.Pp
Смотрите также
.Ic \&Dd
и
.Ic \&Os .
.Tg Dv
.It Ic \&Dv Ar identifier ...
Определенные переменные, такие как константы препроцессора, постоянные символы,
значения перечисления и так далее.
.Pp
Примеры:
.Dl \&.Dv NULL
.Dl \&.Dv BUFSIZ
.Dl \&.Dv STDOUT_FILENO
.Pp
Смотрите также
.Ic \&Er
и
.Ic \&Ev
для констант специального назначения,
.Ic \&Va
для переменных символов, и
.Ic \&Fd
для перечисления определений переменных препроцессора в
.Em СИНТАКСИСЕ .
.Tg Dx
.It Ic \&Dx Op Ar version
Отформатирует версию
.Dx ,
указывается в качестве аргумента или
значения по умолчанию, если аргумент не указан.
.Pp
Примеры:
.Dl \&.Dx 2.4.1
.Dl \&.Dx
.Pp
Смотрите также
.Ic \&At ,
.Ic \&Bsx ,
.Ic \&Bx ,
.Ic \&Fx ,
.Ic \&Nx ,
и
.Ic \&Ox .
.It Ic \&Ec Op Ar closing_delimiter
Закройте область, начатую с
.Ic \&Eo .
.Pp
Аргумент
.Ar closing_delimiter
используется в качестве хвостовика корпуса, например, указывая \e(rq
будет подражать
.Ic \&Dc .
.It Ic \&Ed
Завершите контекст отображения, начатый с помощью
.Ic \&Bd .
.It Ic \&Ef
Завершите контекст режима шрифта, запущенный с помощью
.Ic \&Bf .
.It Ic \&Ek
Завершить сохранение контекста, начатого
.Ic \&Bk .
.It Ic \&El
Завершить контекст списка, начатый с
.Ic \&Bl .
Смотрите также
.Ic \&It .
.Tg Em
.It Ic \&Em Ar word ...
Запросите курсивный шрифт.
Если устройство вывода не предоставляет такой возможности, подчеркните.
.Pp
Чаще всего это используется для выделения ударения (не путать с
важностью, смотрите
.Ic \&Sy ) .
В редких случаях, когда ни один из макросов семантической разметки не подходит,
он также может использоваться для технических терминов и заполнителей
, за исключением синтаксических элементов,
.Ic \&Sy
и
.Ic \&Ar
являются предпочтительными, соответственно.
.Pp
Примеры:
.Bd -literal -compact -offset indent
Selected lines are those
\&.Em not
matching any of the specified patterns.
Some of the functions use a
\&.Em hold space
to save the pattern space for subsequent retrieval.
.Ed
.Pp
Смотрите также
.Ic \&No ,
.Ic \&Ql ,
и
.Ic \&Sy .
.It Ic \&En Ar word ...
Этот макрос устарел.
Используйте
.Ic \&Eo
или любой другой макрос приложения.
.Pp
Он заключает свой аргумент в разделители, указанные последним макросом
.Ic \&Es .
.Tg Eo
.It Ic \&Eo Op Ar opening_delimiter
Произвольное вложение.
Аргумент
.Ar opening_delimiter
используется в качестве заголовка приложения, например, при указании \e(lq
будет эмулировать
.Ic \&Do .
.Tg Er
.It Ic \&Er Ar identifier ...
Константы ошибок для определений глобальной переменной 
.Va errno
libc.
Чаще всего это используется на страницах руководства по разделам 2 и 3.
.Pp
Примеры:
.Dl \&.Er EPERM
.Dl \&.Er ENOENT
.Pp
Смотрите также
.Ic \&Dv
для общих констант.
.It Ic \&Es Ar opening_delimiter closing_delimiter
Этот макрос устарел.
Используйте
.Ic \&Eo
или любой другой макрос приложения.
.Pp
Он принимает два аргумента, определяющих разделители, которые будут использоваться последующими макросами
.Ic \&En .
.Tg Ev
.It Ic \&Ev Ar identifier ...
Переменные окружающей среды, такие как те, которые указаны в
.Xr environ 7 .
.Pp
Примеры:
.Dl \&.Ev DISPLAY
.Dl \&.Ev PATH
.Pp
Смотрите также
.Ic \&Dv
для общих констант.
.Tg Ex
.It Ic \&Ex Fl std Op Ar utility ...
Вставьте стандартное предложение, касающееся значений завершения команды, равных 0 в случае успеха
и >0 в случае сбоя.
Чаще всего это используется на страницах руководства в разделах 1, 6 и 8.
.Pp
Если
.Ar утилита
не указана, используется имя документа, заданное с помощью
.Ic \&Nm .
Несколько аргументов
.Ar утилиты
рассматриваются как отдельные утилиты.
.Pp
Смотрите также
.Ic \&Rv .
.Tg Fa
.It Ic \&Fa Ar argument ...
Аргумент функции или параметр.
Каждый аргумент может быть именем и типом (рекомендуется для раздела
.Em СИНТАКСИС ),
только именем (для вызовова функций)
или только типом (для прототипов функций).
Если заданы и тип, и имя или если тип состоит из нескольких
слов, все слова, относящиеся к одному и тому же аргументу функции, должны быть
указаны в одном аргументе макроса
.Ic \&Fa .
.Pp
Этот макрос также используется для указания имени поля структуры.
.Pp
Чаще всего макрос
.Ic \&Fa
используется в
.Em СИНТАКСИСЕ
без блоков
.Ic \&Fo
при документировании прототипов многострочных функций.
При вызове с несколькими аргументами аргументы разделяются
запятой.
Кроме того, если следующий макрос является другим
.Ic \&Fa ,
последний аргумент также будет содержать запятую в конце.
.Pp
Примеры:
.Dl \&.Fa \(dqconst char *p\(dq
.Dl \&.Fa \(dqint a\(dq \(dqint b\(dq \(dqint c\(dq
.Dl \&.Fa \(dqchar *\(dq size_t
.Pp
Смотрите также
.Ic \&Fo .
.It Ic \&Fc
Завершите контекст функции, запущенный с помощью
.Ic \&Fo .
.Tg Fd
.It Ic \&Fd Pf # Ar directive Op Ar argument ...
Директива препроцессора, в частности, для включения ее в
.Em СИНТАКСИС .
Исторически он также использовался для документирования включаемых файлов.
Последнее использование устарело в пользу
.Ic \&In .
.Pp
Примеры:
.Dl \&.Fd #define sa_handler __sigaction_u.__sa_handler
.Dl \&.Fd #define SIO_MAXNFDS
.Dl \&.Fd #ifdef FS_DEBUG
.Dl \&.Ft void
.Dl \&.Fn dbg_open \(dqconst char *\(dq
.Dl \&.Fd #endif
.Pp
Смотрите также
.Sx СТРУКТУРА РАЗДЕЛА ,
.Ic \&In ,
и
.Ic \&Dv .
.Tg Fl
.It Ic \&Fl Op Ar word ...
Флаг или параметр командной строки.
Используется при перечислении аргументов утилит командной строки.
Для каждого аргумента выводится символ ASCII с дефисом и минусом
.Sq \- ,
сразу после аргумента.
Если аргументы не указаны, выводится знак минус-дефис, за которым следует пробел.
Если аргументом является макрос,
то к последующему выводу макроса добавляется знак минус-дефис.
.Pp
Примеры:
.Dl ".Nm du Op Fl H | L | P"
.Dl ".Nm ls Op Fl 1AaCcdFfgHhikLlmnopqRrSsTtux"
.Dl ".Nm route Cm add Fl inet Ar destination gateway"
.Dl ".Nm locate.updatedb Op Fl \e-fcodes Ns = Ns Ar dbfile"
.Dl ".Nm aucat Fl o Fl"
.Dl ".Nm kill Fl Ar signal_number"
.Pp
Для длинных опций в стиле GNU использование дополнительного дефиса с минусом не
является строго обязательным, но может быть более безопасным в будущих версиях GNU troff; смотрите
.Xr mandoc_char 7
для получения подробной информации.
.Pp
Смотрите также
.Ic \&Cm .
.Tg Fn
.It Ic \&Fn Ar funcname Op Ar argument ...
Имя функции.
.Pp
Аргументы функции заключаются в круглые скобки и
разделяются запятыми.
Если аргументы не указаны, выводятся пустые круглые скобки.
В разделе
.Em СИНТАКСИС ,
этот макрос запускает новую строку вывода,
и между определениями функций автоматически вставляется пустая строка.
.Pp
Примеры:
.Dl \&.Fn \(dqint funcname\(dq \(dqint arg0\(dq \(dqint arg1\(dq
.Dl \&.Fn funcname \(dqint arg0\(dq
.Dl \&.Fn funcname arg0
.Bd -literal -offset indent
\&.Ft functype
\&.Fn funcname
.Ed
.Pp
При ссылке на функцию, описанную на другой странице руководства, используйте вместо этого
.Ic \&Xr .
Смотрите также
.Sx СТРУКТУРА РАЗДЕЛА ,
.Ic \&Fo ,
и
.Ic \&Ft .
.Tg Fo
.It Ic \&Fo Ar funcname
Запуск функционального блока.
Это многострочная версия
.Ic \&Fn .
.Pp
Вызовы обычно происходят в следующем контексте:
.Bd -ragged -offset indent
.Pf \. Ic \&Ft Ar functype
.br
.Pf \. Ic \&Fo Ar funcname
.br
.Pf \. Ic \&Fa Qq Ar argtype Ar argname
.br
\&.\.\.
.br
.Pf \. Ic \&Fc
.Ed
.Pp
Область действия
.Ic \&Fo
закрыта с помощью
.Ic \&Fc .
.Pp
Смотрите также
.Sx СТРУКТУРА РАЗДЕЛА ,
.Ic \&Fa ,
.Ic \&Fc ,
и
.Ic \&Ft .
.It Ic \&Fr Ar number
Этот макрос устарел.
Разметка для замены не требуется.
.Pp
Он был использован для отображения числовых значений, возвращаемых функцией, курсивным шрифтом.
.Tg Ft
.It Ic \&Ft Ar functype
Тип функции.
.Pp
В разделе
.Em СИНТАКСИС ,
после этого макроса запускается новая строка вывода.
.Pp
Примеры:
.Dl \&.Ft int
.Bd -literal -offset indent -compact
\&.Ft functype
\&.Fn funcname
.Ed
.Pp
Смотрите также
.Sx СТРУКТУРА РАЗДЕЛА ,
.Ic \&Fn ,
и
.Ic \&Fo .
.Tg Fx
.It Ic \&Fx Op Ar version
Отформатируйте версию
.Fx ,
указывается в качестве аргумента или значения по умолчанию,
если аргумент не указан.
.Pp
Примеры:
.Dl \&.Fx 7.1
.Dl \&.Fx
.Pp
Смотрите также
.Ic \&At ,
.Ic \&Bsx ,
.Ic \&Bx ,
.Ic \&Dx ,
.Ic \&Nx ,
и
.Ic \&Ox .
.It Ic \&Hf Ar filename
Этот макрос не реализован в
.Xr mandoc 1 .
Он был использован для буквального включения содержимого файла (заголовка).
.Tg Ic
.It Ic \&Ic Ar keyword ...
Внутренняя или интерактивная команда или инструкция
по настройке в файле конфигурации.
Смотрите также
.Ic \&Cm .
.Pp
Примеры:
.Dl \&.Ic :wq
.Dl \&.Ic hash
.Dl \&.Ic alias
.Pp
Обратите внимание, что использование
.Ic \&Ql ,
.Ic \&Dl ,
или
.Ic \&Bd Fl literal
предпочтителен для отображения примеров кода; макрос
.Ic \&Ic
используется при обращении к отдельному имени команды.
.Tg In
.It Ic \&In Ar filename
Имя включаемого файла.
Этот макрос чаще всего используется на страницах руководства в разделах 2, 3 и 9.
.Pp
При вызове в качестве первого макроса в строке ввода в разделе
.Em СИНТАКСИС ,
аргумент выводится в угловых скобках
и предваряется
.Qq #include ,
и пустая строка вставляется спереди, если перед
ней указано объявление функции.
В других разделах она заключает свой аргумент только в угловые скобки
и не приводит к разрыву строки.
.Pp
Примеры:
.Dl \&.In sys/types.h
.Pp
Смотрите также
.Sx СТРУКТУРА РАЗДЕЛА .
.Tg It
.It Ic \&It Op Ar head
Элемент списка.
Синтаксис этого макроса зависит от типа списка.
.Pp
Списки
типов
.Fl hang ,
.Fl ohang ,
.Fl inset ,
и
.Fl diag
имеют следующий синтаксис:
.Pp
.D1 Pf \. Ic \&It Ar args
.Pp
Списки типов
.Fl bullet ,
.Fl dash ,
.Fl enum ,
.Fl hyphen
и
.Fl item
имеют следующий синтаксис:
.Pp
.D1 Pf \. Ic \&It
.Pp
с последующими строками , интерпретируемыми в рамках
.Ic \&It ,
 до тех пор , пока не будет закрыто
.Ic \&El ,
или другое
.Ic \&It .
.Pp
Список
.Fl tag
имеет следующий синтаксис:
.Pp
.D1 Pf \. Ic \&It Op Cm args
.Pp
Последующие строки интерпретируются как с
.Fl bullet
и семейством.
Аргументы строки соответствуют левой части
списка; аргументы тела соответствуют содержимому списка.
.Pp
Список
.Fl column
самый сложный.
Его синтаксис выглядит следующим образом:
.Pp
.D1 Pf \. Ic \&It Ar cell Op Ic \&Ta Ar cell ...
.D1 Pf \. Ic \&It Ar cell Op <TAB> Ar cell ...
.Pp
Аргументы состоят из одной или нескольких строк текста и макросов,
представляющих полную строку таблицы.
Ячейки в строке разделяются специальным макросом блока
.Ic \&Ta
или буквенными символами табуляции.
.Pp
Категорически не рекомендуется использовать буквенные табуляции, поскольку их очень
сложно правильно использовать, а код 
.Nm ,
использующий их, очень сложен для чтения.
В частности, синтаксически значимым является пробел
перед буквальным символом табуляции и после него.
Если слово предшествует символу табуляции или следует за ним без промежуточного пробела,
это слово никогда не интерпретируется как вызов макроса, а всегда выводится
буквально.
.Pp
Разделитель ячеек с табуляцией может использоваться только внутри самой
строки
.Ic \&It ;
в следующих строках используется только макрос
.Ic \&Ta ,
может использоваться для разграничения ячеек, а переносимость требует, чтобы
.Ic \&Ta
вызывается другими макросами: некоторые синтаксические анализаторы не распознают его, когда
он появляется в качестве первого макроса в строке.
.Pp
Обратите внимание, что строки, заключенные в кавычки, могут занимать ячейки, разделенные табуляцией, в строке
.Ic \&It .
Например,
.Pp
.Dl .It \(dqcol1 ,\& <TAB> col2 ,\(dq \&;
.Pp
сохранит пробел перед обеими запятыми,
но не перед точкой с запятой.
.Pp
Смотрите также
.Ic \&Bl .
.Tg Lb
.It Ic \&Lb Cm lib Ns Ar name
Укажите библиотеку.
.Pp
Параметром
.Ar name
может быть системная библиотека, такая как
.Cm z
или
.Cm pam ,
в этом случае рядом с вызовом компоновщика печатается небольшое описание библиотеки;
или пользовательской библиотеки, в этом случае имя библиотеки
печатается в кавычках.
Это наиболее часто используется в разделе
.Em СИНТАКСИС
как описано в
.Sx СТРУКТУРЕ РАЗДЕЛА .
.Pp
Примеры:
.Dl \&.Lb libz
.Dl \&.Lb libmandoc
.Tg Li
.It Ic \&Li Ar word ...
Запросите шрифт для пишущей машинки (буквенный).
Не рекомендуется, поскольку на терминальных устройствах вывода он обычно
неотличим от обычного текста.
Для буквального отображения используйте вместо
.Ic \&Ql Pq в строке ,
.Ic \&Dl Pq одиночная строка ,
или
.Ic \&Bd Fl literal Pq многострочный .
.Tg Lk
.It Ic \&Lk Ar uri Op Ar display_name
Отформатируйте гиперссылку.
.Pp
Примеры:
.Dl \&.Lk https://bsd.lv \(dqThe BSD.lv Project\(dq
.Dl \&.Lk https://bsd.lv
.Pp
Смотрите также
.Ic \&Mt .
.It Ic \&Lp
Устаревший синоним для
.Ic \&Pp .
.Tg Ms
.It Ic \&Ms Ar name
Выведите на экран математический символ.
.Pp 
Примеры:
.Dl \&.Ms sigma
.Dl \&.Ms aleph
.Tg Mt
.It Ic \&Mt Ar localpart Ns @ Ns Ar domain
Формат
.Dq почтовый адрес:
гиперссылка.
.Pp
Примеры:
.Dl \&.Mt discuss@manpages.bsd.lv
.Dl \&.An Kristaps Dzonsons \&Aq \&Mt kristaps@bsd.lv
.Tg Nd
.It Ic \&Nd Ar line
Однострочное описание содержания руководства.
Это обязательный последний макрос в разделе
.Em ИМЯ
и не подходит для других разделов.
.Pp
Примеры:
.Dl Pf . Ic \&Nd mdoc language reference
.Dl Pf . Ic \&Nd format and display UNIX manuals
.Pp
Макрос
.Ic \&Nd
технически принимает дочерние макросы и завершает работу с последующим вызовом
.Ic \&Sh .
Не допускайте такого поведения: некоторые генераторы баз данных
.Xr whatis 1
недостаточно умны для анализа большего
количества аргументов, чем строка, и будут отображать макросы дословно.
.Pp
Смотрите также
.Ic \&Nm .
.Tg Nm
.It Ic \&Nm Op Ar name
Название страницы руководства, или \(em в частности, на страницах разделов 1, 6
и 8 \(em о дополнительной команде или функции, описанной на
странице руководства.
При первом вызове макрос
.Ic \&Nm
ожидает единственный аргумент - название страницы руководства.
Обычно первый вызов происходит в разделе
.Em ИМЯ
на странице.
Указанное имя будет запоминаться и использоваться всякий раз, когда макрос будет
вызываться снова без аргументов позже на странице.
Макрос
.Ic \&Nm
использует семантику
.Sx Block full-implicit
при вызове в качестве первого макроса в строке ввода в разделе
.Em СИНТАКСИС ;
в противном случае он использует обычную семантику
.Sx In-line .
.Pp
Примеры:
.Bd -literal -offset indent
\&.Sh SYNOPSIS
\&.Nm cat
\&.Op Fl benstuv
\&.Op Ar
.Ed
.Pp
В
.Em СИНТАКСИСЕ
на страницах руководства в разделах 2, 3 и 9 используйте макрос
.Ic \&Fn ,
а не
.Ic \&Nm ,
чтобы отметить название страницы руководства.
.Tg No
.It Ic \&No Ar word ...
Обычный текст.
Закрывает область действия любого предыдущего встроенного макроса.
При использовании после макросов физического форматирования, таких как
.Ic \&Em
или
.Ic \&Sy ,
переключается обратно на стандартные начертание и вес шрифта.
Также может использоваться для встраивания строк обычного текста в строки макросов
с помощью макросов семантических аннотаций.
.Pp
Примеры:
.Dl ".Em italic , Sy bold , No and roman"
.Bd -literal -offset indent
\&.Sm off
\&.Cm :C No / Ar pattern No / Ar replacement No /
\&.Sm on
.Ed
.Pp
Смотрите также
.Ic \&Em ,
.Ic \&Ql ,
и
.Ic \&Sy .
.Tg Ns
.It Ic \&Ns
Не используйте пробел между выводом предыдущего макроса
и следующим текстом или макрокомандой.
После вызова вводимые данные интерпретируются как обычный текст,
как и после макроса
.Ic \&No .
.Pp
Это не имеет никакого эффекта при вызове в начале строки макроса.
.Pp
Примеры:
.Dl ".Ar name Ns = Ns Ar value"
.Dl ".Cm :M Ns Ar pattern"
.Dl ".Fl o Ns Ar output"
.Pp
Смотрите также
.Ic \&No
и
.Ic \&Sm .
.Tg Nx
.It Ic \&Nx Op Ar version
Отформатируйте версию
.Nx ,
указывается в качестве аргумента или значения по умолчанию, если
аргумент не указан.
.Pp
Примеры:
.Dl \&.Nx 5.01
.Dl \&.Nx
.Pp
Смотрите также
.Ic \&At ,
.Ic \&Bsx ,
.Ic \&Bx ,
.Ic \&Dx ,
.Ic \&Fx ,
и
.Ic \&Ox .
.It Ic \&Oc
Закрыть многострочный контекст
.Ic \&Oo .
.It Ic \&Oo Ar block
Многострочная версия
.Ic \&Op .
.Pp
Примеры:
.Bd -literal -offset indent -compact
\&.Oo
\&.Op Fl flag Ns Ar value
\&.Oc
.Ed
.Tg Op
.It Ic \&Op Ar line
Необязательная часть командной строки.
Выводит аргументы в квадратных скобках.
Чаще всего используется в разделе
.Em СИНТАКСИС
из раздела 1 и 8 страниц руководства.
.Pp
Примеры:
.Dl \&.Op \&Fl a \&Ar b
.Dl \&.Op \&Ar a | b
.Pp
Смотрите также
.Ic \&Oo .
.Tg Os
.It Ic \&Os Op Ar system Op Ar version
Версия операционной системы для отображения в нижнем колонтитуле страницы.
Это обязательный третий макрос
для любого файла
.Nm .
.Pp
Необязательный
.Ar системный
параметр определяет соответствующую операционную систему или среду.
Предлагается оставить его неуказанным, в таком случае
.Xr mandoc 1
использует свой аргумент
.Fl Ios
или, если это тоже не указано,
.Fa sysname
и
.Fa release
как было возвращено
.Xr uname 3 .
.Pp
Примеры:
.Dl \&.Os
.Dl \&.Os KTH/CSC/TCS
.Dl \&.Os BSD 4.3
.Pp
Смотрите также
.Ic \&Dd
и
.Ic \&Dt .
.It Ic \&Ot Ar functype
Этот макрос устарел.
Используйте
.Ic \&Ft
вместо этого; с
.Xr mandoc 1 ,
оба имеют одинаковый эффект.
.Pp
Исторические пакеты 
.Nm
описывали это как
.Dq "старый тип функции (FORTRAN)" .
.Tg Ox
.It Ic \&Ox Op Ar version
Отформатируйте версию
.Ox ,
указанную в качестве аргумента, или значение по умолчанию,
если аргумент не указан.
.Pp
Примеры:
.Dl \&.Ox 4.5
.Dl \&.Ox
.Pp
Смотрите также
.Ic \&At ,
.Ic \&Bsx ,
.Ic \&Bx ,
.Ic \&Dx ,
.Ic \&Fx ,
и
.Ic \&Nx .
.Tg Pa
.It Ic \&Pa Ar name ...
Абсолютный или относительный путь к файловой системе, а также имя файла или каталога.
Если аргумент не указан, то символ
.Sq \(ti
используется по умолчанию.
.Pp
Примеры:
.Dl \&.Pa /usr/bin/mandoc
.Dl \&.Pa /usr/share/man/man7/mdoc.7
.Pp
Смотрите также
.Ic \&Lk .
.It Ic \&Pc
Контекст закрытия круглых скобок, открытый с помощью
.Ic \&Po .
.Tg Pf
.It Ic \&Pf Ar prefix macro Op Ar argument ...
Удаляет пробел между его аргументом и следующим макросом.
Это эквивалентно:
.Pp
.D1 Ic \&No Pf \e& Ar prefix Ic \&Ns Ar macro Op Ar argument ...
.Pp
Аргумент
.Ar prefix
не анализируется на наличие имен макросов или разделителей,
но используется дословно, как если бы он был экранирован.
.Pp
Примеры:
.Dl ".Pf $ Ar variable_name"
.Dl ".Pf . Ar macro_name"
.Dl ".Pf 0x Ar hex_digits"
.Pp
Смотрите также
.Ic \&Ns
и
.Ic \&Sm .
.It Ic \&Po Ar block
Многострочная версия
.Ic \&Pq .
.Tg Pp
.It Ic \&Pp
Разделите абзац.
Это позволит установить вертикальный интервал между предыдущим и последующим макросами
и/или текстом.
.Pp
Разрывы абзацев не нужны ни до, ни после макросов
.Ic \&Sh
или
.Ic \&Ss
или перед показами
.Pq Ic \&Bd Ar line
или списков
.Pq Ic \&Bl
если только флаг
.Fl compact
присвоен.
.Tg Pq
.It Ic \&Pq Ar line
Приложение, заключенное в круглые скобки.
.Pp
Смотрите также
.Ic \&Po .
.It Ic \&Qc
Закрыть заключенный в кавычки контекст, открытый
.Ic \&Qo .
.Tg Ql
.It Ic \&Ql Ar line
Отображение букв в строке.
Это можно использовать для полных вызовов команд и для
примеров кода, состоящего из нескольких слов, когда отображение с отступом нежелательно.
.Pp
Смотрите также
.Ic \&Dl
и
.Ic \&Bd
.Fl literal .
.It Ic \&Qo Ar block
Многострочная версия
.Ic \&Qq .
.Tg Qq
.It Ic \&Qq Ar line
Заключает свои аргументы в двойные кавычки
.Qq typewriter .
Рассмотрите возможность использования
.Ic \&Dq .
.Pp
Смотрите также
.Ic \&Dq ,
.Ic \&Sq ,
и
.Ic \&Qo .
.It Ic \&Re
Закрыть блок
.Ic \&Rs .
Не имеет никаких дополнительных аргументов.
.Tg Rs
.It Ic \&Rs
Начните с библиографического блока
.Pq Dq справка .
Не содержит аргументов head.
Макрос блока может содержать только дочерние макросы
.Ic \&%A ,
.Ic \&%B ,
.Ic \&%C ,
.Ic \&%D ,
.Ic \&%I ,
.Ic \&%J ,
.Ic \&%N ,
.Ic \&%O ,
.Ic \&%P ,
.Ic \&%Q ,
.Ic \&%R ,
.Ic \&%T ,
.Ic \&%U ,
и
.Ic \&%V
(необходимо указать хотя бы один из них).
.Pp
Примеры:
.Bd -literal -offset indent -compact
\&.Rs
\&.%A J. E. Hopcroft
\&.%A J. D. Ullman
\&.%B Introduction to Automata Theory, Languages, and Computation
\&.%I Addison-Wesley
\&.%C Reading, Massachusetts
\&.%D 1979
\&.Re
.Ed
.Pp
Если блок
.Ic \&Rs
используется в разделе СМОТРИТЕ ТАКЖЕ,
перед выводом указывается вертикальный интервал, в противном случае блок продолжается в текущей
строке.
.Tg Rv
.It Ic \&Rv Fl std Op Ar function ...
Вставьте стандартное предложение о том, что возвращаемое вызовом функции значение равно 0
в случае успеха и \-1 в случае ошибки, с глобальной переменной
.Va errno
libc, установленной на ошибку.
.Pp
Если
.Ar функция
не указана, используется название документа, заданное с помощью
.Ic \&Nm .
Несколько аргументов
.Ar функции
обрабатываются как отдельные функции.
.Pp
Смотрите также
.Ic \&Ex .
.It Ic \&Sc
Закрыть контекст, заключенный в одинарные кавычки, открытый
.Ic \&So .
.Tg Sh
.It Ic \&Sh Ar TITLE LINE
Начните новый раздел.
Для получения списка обычных разделов руководства, смотрите
.Sx СТРУКТУРУ РАЗДЕЛА .
Эти разделы следует использовать за исключением
случаев, когда использование пользовательских разделов абсолютно необходимо.
.Pp
Названия разделов должны быть уникальными, чтобы их можно было ввести с помощью
.Ic \&Sx .
Хотя этот макрос анализируется, он не должен состоять из дочернего узла или не
может быть связан с
.Ic \&Sx .
.Pp
Смотрите также
.Ic \&Pp ,
.Ic \&Ss ,
и
.Ic \&Sx .
.Tg Sm
.It Ic \&Sm Op Cm on | off
Переключает режим интервалов для вывода, генерируемого с помощью макросов.
.Pp
По умолчанию интервал равен
.Cm on .
При переключении
.Cm off ,
пробелы не вставляются между аргументами макроса и между
выводами, генерируемыми соседними макросами, но текстовые строки
по-прежнему имеют нормальный интервал между словами и предложениями.
.Pp
При вызове без аргумента макрос
.Ic \&Sm
переключает режим интервалов.
Использовать это не рекомендуется, так как это затрудняет чтение кода.
.It Ic \&So Ar block
Многострочная версия
.Ic \&Sq .
.Tg Sq
.It Ic \&Sq Ar line
Заключает свои аргументы в одинарные кавычки
.Sq typewriter .
.Pp
Смотрите также
.Ic \&Dq ,
.Ic \&Qq ,
и
.Ic \&So .
.Tg Ss
.It Ic \&Ss Ar Title line
Начните новый подраздел.
В отличие от
.Ic \&Sh ,
не существует никакого соглашения о наименовании подразделов.
Кроме
.Em ОПИСАНИЯ ,
обычные разделы, описанные в
.Sx СТРУКТУРЕ РАЗДЕЛА
редко бывают подразделы.
.Pp
Названия подразделов должны быть уникальными, чтобы их можно было ввести с помощью
.Ic \&Sx .
Хотя этот макрос анализируется, он не должен состоять из дочернего узла или не
может быть связан с
.Ic \&Sx .
.Pp
Смотрите также
.Ic \&Pp ,
.Ic \&Sh ,
и
.Ic \&Sx .
.Tg St
.It Ic \&St Fl Ns Ar abbreviation
Замените аббревиатуру стандарта на полную форму.
Признаются следующие стандарты.
Если указано несколько строк без пробела между
ними, все они относятся к одному и тому же стандарту, и рекомендуется использовать первую форму.
.Bl -tag -width 1n
.It Языковые стандарты Cи
.Pp
.Bl -tag -width "-p1003.1g-2000" -compact
.It \-ansiC
.St -ansiC
.It \-ansiC-89
.St -ansiC-89
.It \-isoC
.St -isoC
.It \-isoC-90
.St -isoC-90
.br
Оригинальный стандарт языка Си.
.Pp
.It \-isoC-amd1
.St -isoC-amd1
.Pp
.It \-isoC-tcor1
.St -isoC-tcor1
.Pp
.It \-isoC-tcor2
.St -isoC-tcor2
.Pp
.It \-isoC-99
.St -isoC-99
.br
Вторая основная версия стандарта языка Си.
.Pp
.It \-isoC-2011
.St -isoC-2011
.br
Третья основная версия стандарта языка Си.
.El
.It POSIX.1 до появления единой спецификации UNIX
.Pp
.Bl -tag -width "-p1003.1g-2000" -compact
.It \-p1003.1-88
.St -p1003.1-88
.It \-p1003.1
.St -p1003.1
.br
Оригинальный стандарт POSIX, основанный на ANSI C.
.Pp
.It \-p1003.1-90
.St -p1003.1-90
.It \-iso9945-1-90
.St -iso9945-1-90
.br
Первое обновление POSIX.1.
.Pp
.It \-p1003.1b-93
.St -p1003.1b-93
.It \-p1003.1b
.St -p1003.1b
.br
Расширения в режиме реального времени.
.Pp
.It \-p1003.1c-95
.St -p1003.1c-95
.br
Интерфейсы потоков POSIX.
.Pp
.It \-p1003.1i-95
.St -p1003.1i-95
.br
Техническое исправление.
.Pp
.It \-p1003.1-96
.St -p1003.1-96
.It \-iso9945-1-96
.St -iso9945-1-96
.br
Включает в себя POSIX.1-1990, 1b, 1c и 1i.
.El
.It X/Открытое руководство по переносимости версии 4 и связанные с ним стандарты
.Pp
.Bl -tag -width "-p1003.1g-2000" -compact
.It \-xpg3
.St -xpg3
.br
Предшественник XPG4, опубликованный в 1989 году.
.Pp
.It \-p1003.2
.St -p1003.2
.It \-p1003.2-92
.St -p1003.2-92
.It \-iso9945-2-93
.St -iso9945-2-93
.br
Предшественник XCU4.
.Pp
.It \-p1003.2a-92
.St -p1003.2a-92
.br
Обновления до версии POSIX.2.
.Pp
.It \-xpg4
.St -xpg4
.br
Основан на POSIX.1 и POSIX.2, опубликованных в 1992 году.
.El
.It Единая спецификация UNIX версии 1 и связанные с ней стандарты
.Pp
.Bl -tag -width "-p1003.1g-2000" -compact
.It \-susv1
.St -susv1
.It \-xpg4.2
.St -xpg4.2
.br
Этот стандарт был опубликован в 1994 году.
Он был использован в качестве основы для сертификации UNIX 95.
Следующие три относятся к его частям.
.Pp
.It \-xsh4.2
.St -xsh4.2
.Pp
.It \-xcurses4.2
.St -xcurses4.2
.Pp
.It \-p1003.1g-2000
.St -p1003.1g-2000
.br
Сетевые API, включая сокеты.
.Pp
.It \-svid4
.St -svid4 ,
.br
Опубликовано в 1995 году.
.El
.It Единая спецификация UNIX версии 2 и связанные с ней стандарты
.Pp
.Bl -tag -width "-p1003.1g-2000" -compact
.It \-susv2
.St -susv2
Этот стандарт был опубликован в 1997
году и также называется X/Open Portability Guide версии 5.
Он был использован в качестве основы для сертификации UNIX 98.
Ниже приведены его отдельные части.
.Pp
.It \-xbd5
.St -xbd5
.Pp
.It \-xsh5
.St -xsh5
.Pp
.It \-xcu5
.St -xcu5
.Pp
.It \-xns5
.St -xns5
.It \-xns5.2
.St -xns5.2
.El
.It Единая спецификация UNIX версии 3
.Pp
.Bl -tag -width "-p1003.1-2001" -compact
.It \-p1003.1-2001
.St -p1003.1-2001
.It \-susv3
.St -susv3
.br
Этот стандарт основан на C99, SUSv2, POSIX.1-1996, 1d и 1j.
Он также называется X/Open Portability Guide версии 6.
Он используется в качестве основы для сертификации UNIX 03.
.Pp
.It \-p1003.1-2004
.St -p1003.1-2004
.br
Второе и последнее техническое исправление.
.El
.It Единая спецификация UNIX версии 4
.Pp
.Bl -tag -width "-p1003.1g-2000" -compact
.It \-p1003.1-2008
.St -p1003.1-2008
.It \-susv4
.St -susv4
.br
Этот стандарт также называется
X/Open Portability Guide версии 7.
.El
.It Другие стандарты
.Pp
.Bl -tag -width "-p1003.1g-2000" -compact
.It \-ieee754
.St -ieee754
.br
Арифметика с плавающей запятой.
.Pp
.It \-iso8601
.St -iso8601
.br
Представление дат и времени, опубликованное в 1988 году.
.Pp
.It \-iso8802-3
.St -iso8802-3
.br
Локальные вычислительные сети Ethernet.
.Pp
.It \-ieee1275-94
.St -ieee1275-94
.El
.El
.Tg Sx
.It Ic \&Sx Ar Title line
Укажите ссылку на раздел или подраздел на той же странице руководства.
Название раздела или подраздела, на которые дается ссылка, должно совпадать с
прилагаемым аргументом, включая пробелы.
.Pp
Примеры:
.Dl \&.Sx MANUAL STRUCTURE
.Pp
Смотрите также
.Ic \&Sh
и
.Ic \&Ss .
.Tg Sy
.It Ic \&Sy Ar word ...
Запросите жирный шрифт.
.Pp
Это чаще всего используется для обозначения важности или серьезности (не
путать с подчеркиванием ударения, смотрите
.Ic \&Em ) .
Когда ни один из семантических макросов не подходит, его также достаточно для синтаксических
элементов, которые должны быть приведены или которые отображаются дословно.
.Pp
Примеры:
.Bd -literal -compact -offset indent
\&.Sy Предупреждение :
Если
\&.Sy s
отображается в разрешениях владельца, установлен режим set-user-ID.
Эта утилита заменяет предыдущую
\&.Sy dumpdir
программу.
.Ed
.Pp
Смотрите также
.Ic \&Em ,
.Ic \&No ,
и
.Ic \&Ql .
.Tg Ta
.It Ic \&Ta
Разделитель ячеек таблицы в списках
.Ic \&Bl Fl column ;
может быть использован только ниже
.Ic \&It .
.Tg Tg
.It Ic \&Tg Op Ar term
Объявите, что в следующей строке ввода начинается определение
.Ar term .
Этот макрос должен отображаться отдельно в отдельной строке ввода.
По умолчанию в качестве аргумента используется первый аргумент первого макроса
в следующей строке.
Аргумент не может содержать пробельных символов, даже если он заключен в кавычки.
Этот макрос является расширением
.Xr mandoc 1
и обычно игнорируется другими средствами форматирования.
.Pp
При просмотре выходных данных терминала с
.Xr less 1 ,
интерактивная команда
.Ic :t
может быть использована для перехода к определению
.Ar term
как описано для переменной
.Ev MANPAGER
в
.Xr man 1 ;
при выводе HTML-кода генерируется идентификатор фрагмента
.Pq Ic id No атрибут
для использования для глубокой привязки к этому месту документа.
.Pp
В большинстве случаев добавление макроса
.Ic \&Tg
было бы излишним, потому что
.Xr mandoc 1
способен автоматически помечать тегами большинство определений.
Этот макрос предназначен для случаев, когда автоматическая пометка
.Ar term
является неудовлетворительной, например, если определение не помечено
автоматически (ложноотрицательное значение) или если помечены места,
которые не определяют
.Ar term
(ложные срабатывания).
Когда есть хотя бы один макрос
.Ic \&Tg
для
.Ar term ,
никакие другие места автоматически не помечаются как определения этого
.Ar term .
.It Ic \&Tn Ar word ...
Поддерживается только для обеспечения совместимости, не используйте это в новых руководствах.
Даже несмотря на то, что имя макроса
.Pq Dq торговое название
предполагает семантическую функцию, историческое использование непоследовательно, в основном
используется как макрос уровня представления для запроса шрифта с маленькой буквы.
.It Ic \&Ud
Поддерживается только для обеспечения совместимости, не используйте это в новых руководствах.
Выводит
.Dq в настоящее время находится в стадии разработки.
.It Ic \&Ux
Поддерживается только для обеспечения совместимости, не используйте это в новых руководствах.
Выводит
.Dq Ux .
.Tg Va
.It Ic \&Va Oo Ar type Oc Ar identifier ...
Имя переменной.
.Pp
Примеры:
.Dl \&.Va foo
.Dl \&.Va const char *bar ;
.Pp
Для аргументов и параметров функции используйте вместо
.Ic \&Fa .
Для объявлений глобальных переменных в разделе
.Em СИНТАКСИС ,
используйте
.Ic \&Vt .
.Tg Vt
.It Ic \&Vt Ar type Op Ar identifier
Тип переменной.
.Pp
Это также используется для указания глобальных переменных в разделе
.Em СИНТАКСИС ,
в этом случае также указывается имя переменной.
Обратите
внимание, что он принимает синтаксис
.Sx Block partial-implicit
при вызове в качестве первого макроса в строке ввода в разделе
.Em СИНТАКСИС ,
в противном случае он принимает обычный синтаксис
.Sx In-line .
В первом случае этот макрос запускает новую строку вывода,
и перед ней вставляется пустая строка, если есть предыдущее
определение функции или директива include.
.Pp
Примеры:
.Dl \&.Vt unsigned char
.Dl \&.Vt extern const char * const sys_signame[] \&;
.Pp
Для получения параметров в прототипах функций используйте вместо
.Ic \&Fa ,
для типов возвращаемых функций
.Ic \&Ft ,
и для имен переменных за пределами раздела
.Em СИНТАКСИС
.Ic \&Va ,
даже при включении типа с таким именем.
СМОТРИТЕ ТАКЖЕ
.Sx СТРУКТУРА РАЗДЕЛА .
.It Ic \&Xc
Закройте область, открытую с помощью
.Ic \&Xo .
.It Ic \&Xo Ar block
Расширьте заголовок макроса
.Ic \&It
или текст частично неявного блочного макроса
за пределами конца строки ввода.
Этот макрос изначально существовал для обхода ограничения в 9 аргументов
в исторических
.Xr roff 7 .
.Tg Xr
.It Ic \&Xr Ar name section
Ссылка на другое руководство
.Pq Qq перекрестная ссылка .
.Pp
Укажите перекрестную ссылку на
.Ar название
и номер
.Ar раздела 
другой справочной страницы.
.Pp
Примеры:
.Dl \&.Xr mandoc 1
.Dl \&.Xr mandoc 1 \&;
.Dl \&.Xr mandoc 1 \&Ns s behaviour
.El
.Sh СИНТАКСИС МАКРОСА
Синтаксис макроса зависит от его классификации.
В этом разделе,
.Sq \-arg
относится к аргументам макроса, за которыми могут следовать ноль или более параметров
.Sq parm ;
.Sq \&Yo
открывает область действия макроса; и если указано,
.Sq \&Yc
закрывает его.
.Pp
Столбец 
.Em Callable
указывает на то, что макрос также можно вызвать,
передав его имя в качестве аргумента другому макросу.
Например,
.Sq \&.Op \&Fl O \&Ar file
производит
.Sq Op Fl O Ar file .
Чтобы предотвратить вызов макроса и передать имя макроса буквально,
экранируйте его, добавив пробел нулевой ширины,
.Sq \e& .
Например,
.Sq \&Op \e&Fl O
производит
.Sq Op \&Fl O .
Если макрос недоступен для вызова, но его имя отображается в качестве аргумента
для другого макроса, оно интерпретируется как непрозрачный текст.
Например,
.Sq \&.Fl \&Sh
производит
.Sq Fl \&Sh .
.Pp
Столбец
.Em Parsed
указывает, может ли макрос вызывать другие макросы,
получая их имена в качестве аргументов.
Если макрос не анализируется, но в качестве аргумента отображается имя другого макроса,
он интерпретируется как непрозрачный текст.
.Pp
В столбце
.Em Scope ,
если это применимо, описываются правила закрытия.
.Ss Block full-explicit
Многострочная область, закрываемая явным закрывающим макросом.
Все макросы содержат тела; только
.Ic \&Bf
и
.Pq опционально
.Ic \&Bl
содержат голову.
.Bd -literal -offset indent
\&.Yo \(lB\-arg \(lBparm...\(rB\(rB \(lBhead...\(rB
\(lBbody...\(rB
\&.Yc
.Ed
.Bl -column "MacroX" "CallableX" "ParsedX" "closed by XXX" -offset indent
.It Em Macro Ta Em Callable Ta Em Parsed Ta Em Scope
.It Ic \&Bd  Ta    \&No     Ta    \&No     Ta    closed by Ic \&Ed
.It Ic \&Bf  Ta    \&No     Ta    \&No     Ta    closed by Ic \&Ef
.It Ic \&Bk  Ta    \&No     Ta    \&No     Ta    closed by Ic \&Ek
.It Ic \&Bl  Ta    \&No     Ta    \&No     Ta    closed by Ic \&El
.It Ic \&Ed  Ta    \&No     Ta    \&No     Ta    opened by Ic \&Bd
.It Ic \&Ef  Ta    \&No     Ta    \&No     Ta    opened by Ic \&Bf
.It Ic \&Ek  Ta    \&No     Ta    \&No     Ta    opened by Ic \&Bk
.It Ic \&El  Ta    \&No     Ta    \&No     Ta    opened by Ic \&Bl
.El
.Ss Block full-implicit
Многострочная область, закрываемая с помощью конца файла или неявно с помощью другого макроса.
Все макросы имеют тела; некоторые
.Po
.Ic \&It Fl bullet ,
.Fl hyphen ,
.Fl dash ,
.Fl enum ,
.Fl item
.Pc
у них нет голов; только одна
.Po
.Ic \&It
в
.Ic \&Bl Fl column
.Pc
имеет несколько голов.
.Bd -literal -offset indent
\&.Yo \(lB\-arg \(lBparm...\(rB\(rB \(lBhead... \(lBTa head...\(rB\(rB
\(lBbody...\(rB
.Ed
.Bl -column "MacroX" "CallableX" "ParsedX" "closed by XXXXXXXXXXX" -offset indent
.It Em Macro Ta Em Callable Ta Em Parsed Ta Em Scope
.It Ic \&It Ta \&No Ta Yes  Ta closed by Ic \&It , Ic \&El
.It Ic \&Nd Ta \&No Ta \&No Ta closed by Ic \&Sh
.It Ic \&Nm Ta \&No Ta Yes  Ta closed by Ic \&Nm , Ic \&Sh , Ic \&Ss
.It Ic \&Sh Ta \&No Ta Yes  Ta closed by Ic \&Sh
.It Ic \&Ss Ta \&No Ta Yes  Ta closed by Ic \&Sh , Ic \&Ss
.El
.Pp
Обратите внимание, что макрос
.Ic \&Nm
это макрос
.Sx Block full-implicit
только при вызове в качестве первого макроса
в строке раздела
.Em СИНТАКСИС ,
в противном случае это
.Sx In-line .
.Ss Block partial-explicit
Как и полностью явный блок, но также с однострочной областью действия.
У каждого из них есть, по крайней мере, тело и, в некоторых случаях, голова
.Po
.Ic \&Fo ,
.Ic \&Eo
.Pc
и/или хвост
.Pq Ic \&Ec .
.Bd -literal -offset indent
\&.Yo \(lB\-arg \(lBparm...\(rB\(rB \(lBhead...\(rB
\(lBbody...\(rB
\&.Yc \(lBtail...\(rB

\&.Yo \(lB\-arg \(lBparm...\(rB\(rB \(lBhead...\(rB \
\(lBbody...\(rB \&Yc \(lBtail...\(rB
.Ed
.Bl -column "MacroX" "CallableX" "ParsedX" "closed by XXXX" -offset indent
.It Em Macro Ta Em Callable Ta Em Parsed Ta Em Scope
.It Ic \&Ac  Ta    Yes      Ta    Yes      Ta    opened by Ic \&Ao
.It Ic \&Ao  Ta    Yes      Ta    Yes      Ta    closed by Ic \&Ac
.It Ic \&Bc  Ta    Yes      Ta    Yes      Ta    closed by Ic \&Bo
.It Ic \&Bo  Ta    Yes      Ta    Yes      Ta    opened by Ic \&Bc
.It Ic \&Brc Ta    Yes      Ta    Yes      Ta    opened by Ic \&Bro
.It Ic \&Bro Ta    Yes      Ta    Yes      Ta    closed by Ic \&Brc
.It Ic \&Dc  Ta    Yes      Ta    Yes      Ta    opened by Ic \&Do
.It Ic \&Do  Ta    Yes      Ta    Yes      Ta    closed by Ic \&Dc
.It Ic \&Ec  Ta    Yes      Ta    Yes      Ta    opened by Ic \&Eo
.It Ic \&Eo  Ta    Yes      Ta    Yes      Ta    closed by Ic \&Ec
.It Ic \&Fc  Ta    Yes      Ta    Yes      Ta    opened by Ic \&Fo
.It Ic \&Fo  Ta    \&No     Ta    \&No     Ta    closed by Ic \&Fc
.It Ic \&Oc  Ta    Yes      Ta    Yes      Ta    opened by Ic \&Oo
.It Ic \&Oo  Ta    Yes      Ta    Yes      Ta    opened by Ic \&Oc
.It Ic \&Pc  Ta    Yes      Ta    Yes      Ta    closed by Ic \&Po
.It Ic \&Po  Ta    Yes      Ta    Yes      Ta    opened by Ic \&Pc
.It Ic \&Qc  Ta    Yes      Ta    Yes      Ta    opened by Ic \&Oo
.It Ic \&Qo  Ta    Yes      Ta    Yes      Ta    closed by Ic \&Oc
.It Ic \&Re  Ta    \&No     Ta    \&No     Ta    opened by Ic \&Rs
.It Ic \&Rs  Ta    \&No     Ta    \&No     Ta    closed by Ic \&Re
.It Ic \&Sc  Ta    Yes      Ta    Yes      Ta    opened by Ic \&So
.It Ic \&So  Ta    Yes      Ta    Yes      Ta    closed by Ic \&Sc
.It Ic \&Xc  Ta    Yes      Ta    Yes      Ta    opened by Ic \&Xo
.It Ic \&Xo  Ta    Yes      Ta    Yes      Ta    closed by Ic \&Xc
.El
.Ss Block partial-implicit
Например, блок полностью неявный, но с однострочной областью видимости, закрытой к
концу строки.
.Bd -literal -offset indent
\&.Yo \(lB\-arg \(lBval...\(rB\(rB \(lBbody...\(rB \(lBres...\(rB
.Ed
.Bl -column "MacroX" "CallableX" "ParsedX" -offset indent
.It Em Macro Ta Em Callable Ta Em Parsed
.It Ic \&Aq  Ta    Yes      Ta    Yes
.It Ic \&Bq  Ta    Yes      Ta    Yes
.It Ic \&Brq Ta    Yes      Ta    Yes
.It Ic \&D1  Ta    \&No     Ta    \&Yes
.It Ic \&Dl  Ta    \&No     Ta    Yes
.It Ic \&Dq  Ta    Yes      Ta    Yes
.It Ic \&En  Ta    Yes      Ta    Yes
.It Ic \&Op  Ta    Yes      Ta    Yes
.It Ic \&Pq  Ta    Yes      Ta    Yes
.It Ic \&Ql  Ta    Yes      Ta    Yes
.It Ic \&Qq  Ta    Yes      Ta    Yes
.It Ic \&Sq  Ta    Yes      Ta    Yes
.It Ic \&Vt  Ta    Yes      Ta    Yes
.El
.Pp
Обратите внимание, что макрос
.Ic \&Vt
это
.Sx Block partial-implicit
только при вызове в качестве первого макроса
в строке раздела
.Em СИНТАКСИС ,
в противном случае это
.Sx In-line .
.Ss Special block macro
Макрос
.Ic \&Ta
может быть использован только ниже
.Ic \&It
в списках
.Ic \&Bl Fl column .
Он разделяет блоки, представляющие ячейки таблицы;
у этих блоков есть тела, но нет заголовков.
.Bl -column "MacroX" "CallableX" "ParsedX" "closed by XXXX" -offset indent
.It Em Macro Ta Em Callable Ta Em Parsed Ta Em Scope
.It Ic \&Ta  Ta    Yes      Ta    Yes    Ta closed by Ic \&Ta , Ic \&It
.El
.Ss In-line
Закрывается в конце строки, аргументы фиксированной длины
и/или последующие макросы.
У встроенных макросов есть только текстовые дочерние элементы.
Если число (или неравенство) аргументов равно
.Pq n ,
затем макрос принимает произвольное количество аргументов.
.Bd -literal -offset indent
\&.Yo \(lB\-arg \(lBval...\(rB\(rB \(lBargs...\(rB \(lBres...\(rB

\&.Yo \(lB\-arg \(lBval...\(rB\(rB \(lBargs...\(rB Yc...

\&.Yo \(lB\-arg \(lBval...\(rB\(rB arg0 arg1 argN
.Ed
.Bl -column "MacroX" "CallableX" "ParsedX" "Arguments" -offset indent
.It Em Macro Ta Em Callable Ta Em Parsed Ta Em Arguments
.It Ic \&%A  Ta    \&No     Ta    \&No     Ta    >0
.It Ic \&%B  Ta    \&No     Ta    \&No     Ta    >0
.It Ic \&%C  Ta    \&No     Ta    \&No     Ta    >0
.It Ic \&%D  Ta    \&No     Ta    \&No     Ta    >0
.It Ic \&%I  Ta    \&No     Ta    \&No     Ta    >0
.It Ic \&%J  Ta    \&No     Ta    \&No     Ta    >0
.It Ic \&%N  Ta    \&No     Ta    \&No     Ta    >0
.It Ic \&%O  Ta    \&No     Ta    \&No     Ta    >0
.It Ic \&%P  Ta    \&No     Ta    \&No     Ta    >0
.It Ic \&%Q  Ta    \&No     Ta    \&No     Ta    >0
.It Ic \&%R  Ta    \&No     Ta    \&No     Ta    >0
.It Ic \&%T  Ta    \&No     Ta    \&No     Ta    >0
.It Ic \&%U  Ta    \&No     Ta    \&No     Ta    >0
.It Ic \&%V  Ta    \&No     Ta    \&No     Ta    >0
.It Ic \&Ad  Ta    Yes      Ta    Yes      Ta    >0
.It Ic \&An  Ta    Yes      Ta    Yes      Ta    >0
.It Ic \&Ap  Ta    Yes      Ta    Yes      Ta    0
.It Ic \&Ar  Ta    Yes      Ta    Yes      Ta    n
.It Ic \&At  Ta    Yes      Ta    Yes      Ta    1
.It Ic \&Bsx Ta    Yes      Ta    Yes      Ta    n
.It Ic \&Bt  Ta    \&No     Ta    \&No     Ta    0
.It Ic \&Bx  Ta    Yes      Ta    Yes      Ta    n
.It Ic \&Cd  Ta    Yes      Ta    Yes      Ta    >0
.It Ic \&Cm  Ta    Yes      Ta    Yes      Ta    >0
.It Ic \&Db  Ta    \&No     Ta    \&No     Ta    1
.It Ic \&Dd  Ta    \&No     Ta    \&No     Ta    n
.It Ic \&Dt  Ta    \&No     Ta    \&No     Ta    n
.It Ic \&Dv  Ta    Yes      Ta    Yes      Ta    >0
.It Ic \&Dx  Ta    Yes      Ta    Yes      Ta    n
.It Ic \&Em  Ta    Yes      Ta    Yes      Ta    >0
.It Ic \&Er  Ta    Yes      Ta    Yes      Ta    >0
.It Ic \&Es  Ta    Yes      Ta    Yes      Ta    2
.It Ic \&Ev  Ta    Yes      Ta    Yes      Ta    >0
.It Ic \&Ex  Ta    \&No     Ta    \&No     Ta    n
.It Ic \&Fa  Ta    Yes      Ta    Yes      Ta    >0
.It Ic \&Fd  Ta    \&No     Ta    \&No     Ta    >0
.It Ic \&Fl  Ta    Yes      Ta    Yes      Ta    n
.It Ic \&Fn  Ta    Yes      Ta    Yes      Ta    >0
.It Ic \&Fr  Ta    Yes      Ta    Yes      Ta    >0
.It Ic \&Ft  Ta    Yes      Ta    Yes      Ta    >0
.It Ic \&Fx  Ta    Yes      Ta    Yes      Ta    n
.It Ic \&Hf  Ta    \&No     Ta    \&No     Ta    n
.It Ic \&Ic  Ta    Yes      Ta    Yes      Ta    >0
.It Ic \&In  Ta    \&No     Ta    \&No     Ta    1
.It Ic \&Lb  Ta    \&No     Ta    \&No     Ta    1
.It Ic \&Li  Ta    Yes      Ta    Yes      Ta    >0
.It Ic \&Lk  Ta    Yes      Ta    Yes      Ta    >0
.It Ic \&Lp  Ta    \&No     Ta    \&No     Ta    0
.It Ic \&Ms  Ta    Yes      Ta    Yes      Ta    >0
.It Ic \&Mt  Ta    Yes      Ta    Yes      Ta    >0
.It Ic \&Nm  Ta    Yes      Ta    Yes      Ta    n
.It Ic \&No  Ta    Yes      Ta    Yes      Ta    >0
.It Ic \&Ns  Ta    Yes      Ta    Yes      Ta    0
.It Ic \&Nx  Ta    Yes      Ta    Yes      Ta    n
.It Ic \&Os  Ta    \&No     Ta    \&No     Ta    n
.It Ic \&Ot  Ta    Yes      Ta    Yes      Ta    >0
.It Ic \&Ox  Ta    Yes      Ta    Yes      Ta    n
.It Ic \&Pa  Ta    Yes      Ta    Yes      Ta    n
.It Ic \&Pf  Ta    Yes      Ta    Yes      Ta    1
.It Ic \&Pp  Ta    \&No     Ta    \&No     Ta    0
.It Ic \&Rv  Ta    \&No     Ta    \&No     Ta    n
.It Ic \&Sm  Ta    \&No     Ta    \&No     Ta    <2
.It Ic \&St  Ta    \&No     Ta    Yes      Ta    1
.It Ic \&Sx  Ta    Yes      Ta    Yes      Ta    >0
.It Ic \&Sy  Ta    Yes      Ta    Yes      Ta    >0
.It Ic \&Tg  Ta    \&No     Ta    \&No     Ta    <2
.It Ic \&Tn  Ta    Yes      Ta    Yes      Ta    >0
.It Ic \&Ud  Ta    \&No     Ta    \&No     Ta    0
.It Ic \&Ux  Ta    Yes      Ta    Yes      Ta    n
.It Ic \&Va  Ta    Yes      Ta    Yes      Ta    n
.It Ic \&Vt  Ta    Yes      Ta    Yes      Ta    >0
.It Ic \&Xr  Ta    Yes      Ta    Yes      Ta    2
.El
.Ss Delimiters
Когда аргумент макроса состоит из одного входного символа,
который рассматривается как разделитель, этот аргумент обрабатывается специальным образом.
Это правило не применяется, когда разделители появляются в аргументах, содержащих
более одного символа.
Следовательно, чтобы предотвратить специальную обработку и просто обрабатывать его
как любой другой аргумент, разделитель можно экранировать, добавив перед ним пробел
нулевой ширины
.Pq Sq \e& .
В текстовых строках разделители никогда не нуждаются в экранировании, но могут использоваться
как обычные знаки препинания.
.Pp
Для многих макросов, когда начальные аргументы являются открывающими разделителями,
эти разделители помещаются перед областью действия макроса,
а когда конечные аргументы являются закрывающими разделителями,
эти разделители помещаются после области действия макроса.
Интервал подавляется после открывающих разделителей
и перед закрывающими разделителями.
Yfghbvth,
.Pp
.D1 Pf \. \&Aq "( [ word ] ) ."
.Pp
визуализируется как:
.Pp
.D1 Aq ( [ word ] ) .
.Pp
Открывающими разделителями являются:
.Pp
.Bl -tag -width Ds -offset indent -compact
.It \&(
левая скобка
.It \&[
левая квадратная скобка
.El
.Pp
Закрывающими разделителями являются:
.Pp
.Bl -tag -width Ds -offset indent -compact
.It \&.
период
.It \&,
запятая
.It \&:
двоеточие
.It \&;
точка с запятой
.It \&)
правая скобка
.It \&]
правая квадрвтная скобка
.It \&?
вопросительный знак
.It \&!
восклицательный знак
.El
.Pp
Обратите внимание, что даже точка, которой предшествует обратная косая черта
.Pq Sq \e.\&
получает такую особую обработку; используйте
.Sq \e&.\&
чтобы предотвратить это.
.Pp
Многие встроенные макросы прерывают свою область действия, когда сталкиваются
с разделителями, и возобновляют ее, когда следуют другие аргументы, которые
не являются разделителями.
Например,
.Pp
.D1 Pf \. \&Fl "a ( b | c \e*(Ba d ) e"
.Pp
визуализируется как:
.Pp
.D1 Fl a ( b | c \*(Ba d ) e
.Pp
Это относится как к открывающему, так и к закрывающему разделителям,
а также к среднему разделителю, который не подавляет интервал:
.Pp
.Bl -tag -width Ds -offset indent -compact
.It \&|
вертикальная полоса
.El
.Pp
В качестве особого случая, предопределенная строка \e*(Ba обрабатывается и отображается
таким же образом, как и обычный символ
.Sq \&| .
В новых руководствах не рекомендуется использовать эту предопределенную строку.
.Pp
Добавление пробела нулевой ширины
.Pq Sq \e&
в конце строки ввода также полезно для предотвращения интерпретации
конечной точки, восклицательного или вопросительного знака как конца
предложения, например, когда
в конце строки ввода текста или макроса встречается аббревиатура.
.Ss Font handling
В документах
.Nm ,
рекомендуется использовать семантическую разметку, чтобы
автоматически выбрать подходящие шрифты; только если подходящая семантическая разметка
недоступна, рассмотрите возможность использования макросов
.Sx Physical markup .
Всякий раз, когда какой-либо макрос
.Nm
переключает режим шрифта
.Xr roff 7 ,
он автоматически восстановит предыдущий шрифт при выходе
из своей области видимости.
Ручное переключение шрифта с помощью
.Xr roff 7
.Ql \ef
управляющие последовательности шрифтов никогда не требуются.
.Sh СОВМЕСТИМОСТЬ
В этом разделе представлен неполный список проблем совместимости
между madoc и GNU troff
.Pq Qq groff .
.Pp
В groff обнаруживается следующее проблемное поведение:
.Pp
.Bl -dash -compact
.It
.Ic \&Pa
не форматирует свои аргументы при использовании в разделе ФАЙЛЫ в
определенных типах списков.
.It
.Ic \&Ta
может вызываться только другими макросами, но не в начале строки.
.It
.Sq \ef
.Pq font face
и
.Sq \eF
.Pq font family face
.Sx Text Decoration
экранирующие элементы ведут себя нерегулярно, если они заданы в рамках линейных макросов.
.It
Отрицательные единицы масштабирования возвращаются к предыдущим строкам.
Вместо этого mandoc обнуляет их.
.El
.Pp
В mandoc не реализованы следующие функции:
.Pp
.Bl -dash -compact
.It
.Ic \&Bd Fl file Ar file
не поддерживается по соображениям безопасности.
.It
.Ic \&Bd
.Fl filled
не изменяет правое поле, но является псевдонимом для
.Ic \&Bd
.Fl ragged .
.It
.Ic \&Bd
.Fl literal
не использует буквальный шрифт, но является псевдонимом для
.Ic \&Bd
.Fl unfilled .
.It
.Ic \&Bd
.Fl offset Cm center
и
.Fl offset Cm right
не работает.
Groff также не реализует рендеринг по центру и заподлицо справа,
но создает большие отступы.
.El
.Sh СМОТРИТЕ ТАКЖЕ
.Xr man 1 ,
.Xr mandoc 1 ,
.Xr eqn 7 ,
.Xr man 7 ,
.Xr mandoc_char 7 ,
.Xr roff 7 ,
.Xr tbl 7
.Pp
Веб-страница
.Lk https://mandoc.bsd.lv/mdoc/ "расширенная документация по языку mdoc"
содержит несколько страниц в стиле учебника для начинающих, подробное
руководство по стилю для продвинутых авторов и алфавитный указатель, помогающий выбрать
лучшие макросы для различных видов контента.
.Pp
Страница руководства
.Lk https://man.voidlinux.org/groff_mdoc "groff_mdoc(7)"
содержится в пакете документов
.Dq groff
точно такой же язык, но в несколько ином стиле.
.Sh ИСТОРИЯ
Язык
.Nm
впервые появился как макропакет troff в
.Bx 4.4 .
Позже он был значительно обновлен Вернером Лембергом и Русланом Ермиловым
в groff-1.17.
Автономная реализация, являющаяся частью утилиты
.Xr mandoc 1
автор сценария Кристапс Дзонсонс появился в
.Ox 4.6 .
.Sh АВТОРЫ
Ссылка
.Nm
была написана
.An Кристапсом Дзонсонс Aq Mt kristaps@bsd.lv .
