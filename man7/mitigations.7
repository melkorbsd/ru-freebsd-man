.\" Copyright © 2023 The FreeBSD Foundation
.\"
.\" This documentation was written by Ed Maste <emaste@freebsd.org>, and
.\" Olivier Certner <olce.freebsd@certner.fr> at Kumacom SAS, under
.\" sponsorship of the FreeBSD Foundation.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd October 6, 2023
.Dt MITIGATIONS 7
.Os
.Sh ИМЯ
.Nm mitigations
.Nd Меры по устранению уязвимостей в системе безопасности FreeBSD
.Sh СИНТАКСИС
В
.Fx ,
для ограничения воздействия
уязвимостей и защиты системы от вредоносных атак используются различные средства защиты.
Некоторые из этих средств защиты имеют элементы управления во время выполнения, позволяющие включать их глобально
или для каждого процесса, некоторые из них необязательно включаются или отключаются во время компиляции,
а некоторые являются неотъемлемой частью реализации и не имеют элементов управления.
.Pp
В этом документе рассматриваются следующие способы устранения уязвимостей:
.Bl -bullet -compact
.It
Address Space Layout Randomization (ASLR)
.It
Position Independent Executable (PIE)
.It
Write XOR Execute page protection policy
.It
.Dv PROT_MAX
.It
Relocation Read-Only (RELRO)
.It
Bind Now
.\".It
.\"Stack Smashing Protection (SSP)
.\".It
.\"Supervisor Mode Memory Protection
.It
Hardware Vulnerability Mitigation Controls
.It
Capsicum
.El
.Pp
Пожалуйста, обратите внимание, что эффективность и доступность этих мер может
варьироваться в зависимости от версии
.Fx
и конфигурации системы.
.Sh ОПИСАНИЕ
Методы устранения уязвимостей в системе безопасности - это методы, используемые в
.Fx
чтобы ограничить потенциальное воздействие уязвимостей в программном и
аппаратном обеспечении.
Важно понимать, что меры по устранению уязвимостей не направлены непосредственно на устранение
основных проблем безопасности.
Они не заменяют методы безопасного кодирования.
Меры по смягчению последствий служат дополнительным уровнем защиты, помогая снизить
вероятность успешного использования уязвимостей,
затрудняя злоумышленникам достижение своих целей.
.Pp
На этой странице руководства описаны меры по снижению безопасности, реализованные в
.Fx
для повышения общей безопасности операционной системы.
Каждое средство защиты предназначено для защиты от определенных типов атак
и уязвимостей.
.\"
.Sh МЕРЫ ПО УСТРАНЕНИЮ УЯЗВИМОСТЕЙ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ
.Ss Address Space Layout Randomization (ASLR)
Address Space Layout Randomization (ASLR) это метод снижения уровня безопасности,
который работает путем рандомизации адресов памяти, куда загружаются системный и прикладной
код, данные и библиотеки, что затрудняет злоумышленникам
прогнозирование расположения памяти и использование уязвимостей.
.Pp
ASLR вносит случайность в расположение памяти во время выполнения процесса,
снижая предсказуемость адресов памяти.
ASLR предназначен для того, чтобы усложнить использование в случае,
если злоумышленник обнаружит уязвимость в программном обеспечении, такую как переполнение буфера.
.Pp
ASLR может быть включен как на глобальном уровне, так и для каждого отдельного процесса.
Глобальное управление обеспечивается отдельным набором регуляторов
.Xr sysctl 8
для 32- и 64-разрядных процессов.
Это можно включить или отключить для каждого процесса с помощью
.Xr proccontrol 1 .
Обратите внимание, что изменение режима ASLR вступает в силу при изменении адресного пространства,
т.е. при
.Xr execve 2 .
.Pp
Глобальные элементы управления для 32-разрядных процессов:
.Bl -tag -width kern.elf32.aslr.pie_enable
.It Va kern.elf32.aslr.enable
Включите ASLR для 32-разрядных двоичных файлов ELF, отличных от двоичных файлов Position Independent
Exectutable (PIE).
.It Va kern.elf32.aslr.pie_enable
Включите ASLR для 32-разрядных двоичных файлов Position Independent Executable (PIE) ELF.
.It Va kern.elf32.aslr.honor_sbrk
Зарезервируйте унаследованный регион
.Xr sbrk 2
для совместимости со старыми двоичными файлами.
.It Va kern.elf32.aslr.stack
Определите случайным образом расположение стека для 32-разрядных двоичных файлов ELF.
.El
.Pp
Глобальные элементы управления для 64-разрядных процессов:
.Bl -tag -width kern.elf64.aslr.pie_enable
.It Va kern.elf64.aslr.enable
Включите ASLR для 64-разрядных двоичных файлов ELF, отличных от двоичных файлов Position Independent
Exectutable (PIE).
.It Va kern.elf64.aslr.pie_enable
Включите ASLR для 64-разрядных двоичных файлов Position Independent Executable (PIE) ELF.
.It Va kern.elf64.aslr.honor_sbrk
Зарезервируйте унаследованный регион
.Xr sbrk 2
для совместимости со старыми двоичными файлами.
.It Va kern.elf64.aslr.stack
Измените расположение стека в случайном порядке для 64-разрядных двоичных файлов ELF.
.El
.Pp
Для выполнения команды с включенным или отключенным ASLR:
.Pp
proccontrol
.Fl m Ar aslr
.Op Fl s Ar enable | disable
.Ar command
.\"
.Ss Position Independent Executable (PIE)
Двоичные файлы PIE - это исполняемые файлы, у которых нет фиксированного адреса загрузки.
Они могут быть загружены компоновщиком среды выполнения по произвольному адресу памяти
.Xr rtld .
С помощью ASLR они загружаются по случайному адресу при каждом выполнении.
.\"
.Ss Write XOR Execute page protection policy
Запись XOR Execute (W^X) - это стратегия устранения уязвимостей, которая повышает
безопасность системы за счет контроля разрешений на доступ к памяти.
.Pp
В соответствии с ограничением W^X страницы памяти могут быть доступны для записи (W) или для выполнения (E), но не для того и другого одновременно.
Это означает, что выполнение кода запрещено в областях памяти, которые
обозначены как доступные для записи, а запись или модификация памяти ограничена в
областях, помеченных для выполнения.
Приложения, которые выполняют Just In Time (JIT) компиляцию должны быть адаптированы
для обеспечения совместимости с W^X.
.Pp
Есть отдельные ручки
.Xr sysctl 8
для управления применением политики W^ X для 32- и 64-разрядных процессов.
Политика W^X включается путем установки соответствующего системного кода
.Dv allow_wx
на 0.
.Bl -tag -width kern.elf64.allow_wx
.It Va kern.elf32.allow_wx
Разрешите 32-разрядным процессам отображать страницы, одновременно доступные для записи и исполняемые.
.It Va kern.elf64.allow_wx
Разрешите 64-разрядным процессам отображать страницы, одновременно доступные для записи и исполняемые.
.El
.\"
.Ss PROT_MAX
.Dv PROT_MAX
это специфичное для FreeBSD расширение для
.Xr mmap 2 .
.Dv PROT_MAX
предоставляет возможность установить максимальную защиту для области, выделенной
.Xr mmap
и позже измененный
.Xr mprotect .
Например, память, первоначально выделенная с аргументом mmap prot, от
PROT_MAX(PROT_READ | PROT_WRITE) | PROT_READ
может быть доступна для записи в будущем вызове
.Xr mprotect ,
но не может быть сделан исполняемым.
.\"
.Ss Relocation Read-Only (RELRO)
Relocation Read-Only (RELRO) это инструмент смягчения последствий, который делает определенные части
адресного пространства программы, содержащие метаданные ELF, доступными только для чтения, после
обработки перемещения с помощью
.Xr rtld 1 .
.Pp
Если опция RELRO включена изолированно, она обеспечивает
.Em частичную поддержку RELRO .
В этом случае Procedure Linkage Table (PLT) - связанная с этим часть
Global Offset Table (GOT) (в разделе, который обычно называется .got.plt) остается
доступным для записи.
.Pp
RELRO включена по умолчанию.
Параметр времени сборки
.Xr src.conf 5
.Va WITHOUT_RELRO
может быть использован для его отключения.
.Ss BIND_NOW
Параметр времени сборки
.Va WITH_BIND_NOW
.Xr src.conf 5
приводит к созданию двоичных файлов с установленым флагом
.Dv DF_BIND_NOW .
Затем загрузчик 
.Xr rtld 1
во время выполнения выполнит всю обработку перемещения при запуске процесса, а
не по требованию (при первом доступе к каждому символу).
.Pp
При включении в сочетании с
.Dv RELRO
(которая включена по умолчанию) это обеспечивает
.Em полную RELRO .
Все файлы GOT (.got и .got.plt) доступны только для чтения при запуске программы,
что предотвращает атаки на таблицу перемещения.
Обратите внимание, что в результате создается нестандартный двоичный интерфейс приложения (ABI),
и возможно, что некоторые приложения могут работать некорректно.
.\"
.\".Ss Stack Smashing Protection (SSP)
.\"
.\".Ss Supervisor mode memory protection
.\"
.Ss Hardware vulnerability controls
Смотрите
.Xr security 7
для получения дополнительной информации.
.\"
.Ss Capsicum
Capsicum - это облегченная операционная система с возможностями песочницы.
Смотрите
.Xr capsicum 4
для получения дополнительной информации.
.Pp
.Sh МЕРЫ ПО УСТРАНЕНИЮ АППАРАТНЫХ УЯЗВИМОСТЕЙ
В последние годы наблюдается нескончаемый поток новых аппаратных уязвимостей, в частности уязвимостей процессора, обычно вызываемых обнаруживаемыми
микроархитектурными побочными эффектами спекулятивного выполнения, которые приводят к утечке личных данных из какого-либо другого потока или процесса, а иногда
даже из внутреннего состояния процессора, которое обычно недоступно.  Поставщики оборудования обычно
устраняют эти уязвимости по мере их обнаружения, выпуская обновления микрокода, 
которые затем могут быть включены в обновления встроенного по платформы 
.Pq исторически называемые обновлениями BIOS для ПК .
.Pp
Наилучшей защитой от аппаратных уязвимостей в целом является своевременное применение
этих обновлений, когда они доступны, и отключение проблемных
функций уязвимого оборудования, когда это возможно (например, одновременная многопоточность процессора).
Программные средства устранения неполадок лишь частично заменяют их, но они могут быть
полезны при работе с оборудованием, которое не поддерживается, или в качестве дополнения к только что обнаруженным
уязвимостям, которые еще не устранены поставщиками.
Некоторые программные средства устранения неполадок зависят от аппаратных возможностей, предоставляемых
обновлением микрокода.
.Pp
Обычная политика FreeBSD заключается в применении по умолчанию всех средств защиты на уровне операционной
системы, которые не требуют перекомпиляции, за исключением тех, для которых известно, что конкретное оборудование, на котором она запущена,
не уязвимо
.Pq что иногда требует обновления встроенного ПО ,
или те, которые оказывают крайне негативное влияние на производительность пропорционально степени
защиты, которую они фактически обеспечивают.
Меры по снижению уровня операционной системы, как правило, могут оказать заметное влияние на производительность
при определенных рабочих нагрузках.
Если ваша модель угроз позволяет это, вы можете попробовать отключить некоторые из них,
чтобы, возможно, повысить производительность.
И наоборот, для минимизации рисков может потребоваться явное включение наиболее
дорогостоящих из них.
В описании каждой уязвимости/средства ее устранения указано, включена ли она
по умолчанию или отключена и при каких условиях.
В нем также перечислены кнопки, которые нужно настроить, чтобы принудительно установить определенный статус.
.Ss Zenbleed
Уязвимость
.Dq Zenbleed
затрагивает исключительно процессоры AMD, основанные на микроархитектуре Zen2.
В отличие, например, от Meltdown и других вариантов Spectre, которые
приводят к утечке данных, оставляя микроархитектурные следы, Zenbleed - это настоящая аппаратная
ошибка, влияющая на архитектурное состояние процессора.
С помощью определенных последовательностей команд, последние из которых неверно интерпретируются
в результате спекулятивного выполнения, можно добиться появления в регистре XMM данных,
ранее помещенных в какой-либо регистр XMM какой-либо предыдущей или параллельной задачей,
выполняющейся на том же физическом ядре
.Po таким образом, отключение Simultaneous Muti-Threading
.Pq SMT
является недостаточной защитой
.Pc .
.Pp
По словам того, кто обнаружил уязвимость, уязвимы все процессоры на базе Zen2
.Po смотрите
.Lk https://lock.cmpxchg8b.com/zenbleed.html
.Pc .
По состоянию на август 2023 года AMD не публиковала никаких соответствующих исправлений, но
выпустила бюллетень по безопасности
.Pq AMD-SB-7008 ,
озаглавленный
.Dq Cross-Process Information Leak
указывающий на то, что прошивка платформы, исправляющая уязвимость, будет распространена
среди производителей не ранее конца 2023 года, за исключением процессоров Rome, для
которых она уже доступна.
На данный момент не было анонсировано ни одного отдельного микрокода процессора.
Единственное легкодоступное исправление, упомянутое discoverer, - это установка небольшого количества
недокументированных MSR, которые, как сообщается, полностью предотвращают утечки регистров XMM.
.Pp
.Fx
в настоящее время устанавливает этот бит по умолчанию на всех процессорах Zen2.
В будущем он может быть установлен по умолчанию только на тех процессорах Zen2,
микрокод которых не был обновлен до версий, устраняющих уязвимость, как только такие
обновления микрокода будут выпущены и протестированы сообществом.
С этим смягчением связаны следующие нобы:
.Bl -tag -width indent
.It Va machdep.mitigations.zenbleed.enable
Настраиваемое целое число для чтения и записи и sysctl, указывающий,
следует ли принудительно отключить смягчение (0), включить (1) или оставить его на
.Fx
чтобы выборочно применить его (2).
Любое другое целочисленное значение автоматически преобразуется в значение 2.
Обратите внимание, что этот параметр автоматически игнорируется при работе на процессорах,
отличных от Zen2, для упрощения применения общей конфигурации к разнородным компьютерам.
.It Va machdep.mitigations.zenbleed.state
Строка, доступная только для чтения, указывающая текущее состояние защиты.
Это может быть либо
.Dq Not applicable ,
если процессор не основан на Zen2,
.Dq Mitigation enabled
или
.Dq Mitigation disabled .
Это состояние автоматически обновляется каждый раз, когда системный код
.Va machdep.mitigations.zenbleed.enable
записывается в него.
Обратите внимание, что это может привести к неточностям, если задать или очистить бит курицы непосредственно с помощью
.Xr cpuctl 4
.Po который включает в себя утилиту
.Xr cpucontrol 8
.Pc .
.El
.Pp
Влияние на производительность и модели угроз, связанные с этими мерами по снижению
риска, следует учитывать при их настройке и развертывании в системе
.Fx .
.Pp
.Sh СМОТРИТЕ ТАКЖЕ
.Xr elfctl 1 ,
.Xr proccontrol 1 ,
.Xr rtld 1 ,
.Xr mmap 2 ,
.Xr src.conf 5 ,
.Xr sysctl.conf 5 ,
.Xr security 7 ,
.Xr cpucontrol 8 ,
.Xr sysctl 8
