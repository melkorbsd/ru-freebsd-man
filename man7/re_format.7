.\" Copyright (c) 1992, 1993, 1994 Henry Spencer.
.\" Copyright (c) 1992, 1993, 1994
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Henry Spencer.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)re_format.7	8.3 (Berkeley) 3/20/94
.\"
.Dd June 30, 2014
.Dt RE_FORMAT 7
.Os
.Sh ИМЯ
.Nm re_format
.Nd регулярные выражения POSIX 1003.2
.Sh ОПИСАНИЕ
Регулярные выражения
.Pq Dq RE Ns s ,
как определено в
.St -p1003.2 ,
бывают двух видов:
современные регулярные выражения (примерно такие же, как
.Xr egrep 1 ;
1003.2 вызывает эти
.Dq расширенные
регулярные выражения)
и устаревшие регулярные выражения (примерно те же, что и
.Xr ed 1 ;
1003.2
.Dq основные
регулярные выражения).
Устаревшие регулярные выражения в основном существуют для обеспечения обратной совместимости в некоторых старых программах;
они будут рассмотрены в конце.
.St -p1003.2
оставляет открытыми некоторые аспекты синтаксиса и семантики регулярных выражений;
`\(dd' отмечает решения по этим аспектам, которые
могут быть не полностью перенесены в другие
.St -p1003.2
реализации.
.Pp
Регулярное выражение (современное) - это один\(dd или более непустых\(dd
.Em ветвей ,
разделенных
.Ql \&| .
Он соответствует всему, что соответствует одной из ветвей.
.Pp
Ветвь - это один\(dd или более объединенных
.Em фрагментов .
Это соответствует совпадению для первого, за которым следует совпадение для второго и т.д.
.Pp
Фрагмент - это 
.Em атом ,
за которым, возможно, следует
одиночный\(dd
.Ql \&* ,
.Ql \&+ ,
.Ql \&? ,
или
.Em рамки .
Атом, за которым следует
.Ql \&*
соответствует последовательности из 0 или более совпадений атома.
Атом, за которым следует
.Ql \&+
соответствует последовательности из 1 или более совпадений атома.
Атом, за которым следует
.Ql ?\&
соответствует последовательности из 0 или 1 совпадений атома.
.Pp
.Em Рамки
это
.Ql \&{
за ними следует десятичное целое число без знака, за которым,
возможно, следует
.Ql \&,
возможно, за ним следует другое десятичное целое число без знака,
за которым всегда следует
.Ql \&} .
Целые числа должны находиться в диапазоне от 0 до
.Dv RE_DUP_MAX
(255\(dd) включительно,
и если их два, то первое не может превышать второго.
Атом, за которым следуют рамки, содержащие одно целое число
.Em i
и ни одна запятая не соответствует
последовательности точных
.Em i
совпадений атома.
Атом, за которым следуют рамки,
содержащие два целых числа
.Em i
и запятая соответствует
последовательности
.Em i
или больше совпадений с атомом.
Атом, за которым следует рамка
, содержащая два целых числа
.Em i
и
.Em j
соответствует
последовательности
.Em i
через
.Em j
(включительно) совпадений атома.
.Pp
Атом - это регулярное выражение, заключенное в
.Ql ()
(сопоставление совпадения с
регулярным выражением),
пустой набор
.Ql ()
(соответствует нулевой строке)\(dd,
.Em выражение в скобках
(смотрите ниже),
.Ql .\&
(соответствует любому отдельному символу),
.Ql \&^
(соответствует нулевой строке в начале строки),
.Ql \&$
(сопоставление с пустой строкой в конце строки), за
.Ql \e
следует один из символов
.Ql ^.[$()|*+?{\e
(соответствующий этому символу, принятому за обычный символ),
за
.Ql \e
следует любой другой символ\(dd
(соответствует этому символу, принятому за обычный символ,
как если бы
.Ql \e
не присутствовал при этом\(dd),
или один символ, не имеющий другого значения (соответствующий этому символу).
.Ql \&{
за символом, отличным от цифры, следует обычный
символ, а не начало рамки\(dd.
Запрещено завершать регулярное выражение с помощью
.Ql \e .
.Pp
.Em Выражение в скобках
представляет собой список символов, заключенных в
.Ql [] .
Обычно он соответствует любому отдельному символу из списка (но смотрите ниже).
Если список начинается с
.Ql \&^ ,
он соответствует любому отдельному символу
(но смотрите ниже)
.Em не
из остального списка.
Если два символа в списке разделены символом
.Ql \&- ,
это сокращение
от полного
.Em диапазона
символов между этими двумя (включительно) в последовательности
сопоставления,
.No e.g. Ql [0-9]
в ASCII соответствует любой десятичной цифре.
Запрещено\(dd для двух диапазонов совместно
использовать конечную точку,
.No e.g. Ql a-c-e .
Диапазоны сильно зависят от последовательности сопоставления,
и переносимым программам не следует полагаться на них.
.Pp
Чтобы буквально включить
.Ql \&]
в списке сделайте его первым символом
(следуя возможному
.Ql \&^ ) .
Чтобы буквально включить
.Ql \&- ,
сделайте его первым или последним символом,
или второй конечной точкой диапазона.
Чтобы буквально включить
.Ql \&-
как первую конечную точку диапазона,
заключите ее в
.Ql [.\&
и
.Ql .]\& ,
чтобы сделать его элементом сопоставления (смотрите ниже).
За исключением этих и некоторых комбинаций, использующих
.Ql \&[
(смотрите следующие параграфы), все остальные специальные символы, включая
.Ql \e ,
теряют свое особое значение в выражении, заключенном в квадратные скобки.
.Pp
В выражении, заключенном в квадратные скобки, элемент сопоставления (символ,
последовательность из нескольких символов, которая сопоставляется так, как если бы это был один символ,
или имя последовательности сопоставления для любого из них),
заключенный в
.Ql [.\&
и
.Ql .]\&
обозначает
последовательность символов этого сопоставляющего элемента.
Последовательность является отдельным элементом списка выражений в квадратных скобках.
Выражение в квадратных скобках, содержащее многосимвольный сопоставляющий элемент
, может, таким образом, соответствовать более чем одному символу,
например,\& , если сопоставляющая последовательность содержит
.Ql ch
сопоставляющий элемент,
тогда регулярное выражение
.Ql [[.ch.]]*c
соответствует первым пяти символам
из
.Ql chchcc .
.Pp
Внутри выражения, заключенного в квадратные скобки, элемент сопоставления, заключенный в
.Ql [=
и
.Ql =]
это класс эквивалентности, обозначающий последовательности символов
всех сопоставляемых элементов, эквивалентных этому классу, включая его самого.
(Если нет других эквивалентных сопоставляющих элементов,
то обработка выполняется так, как если бы окружающие разделители были
.Ql [.\&
и
.Ql .] . )
Например, если
.Ql x
и
.Ql y
являются членами класса эквивалентности,
тогда
.Ql [[=x=]] ,
.Ql [[=y=]] ,
и
.Ql [xy]
все синонимы.
Класс эквивалентности не может \(dd быть конечной
точкой диапазона.
.Pp
В выражении, заключенном в квадратные скобки, указывается имя
.Em символьного класса ,
заключенного в
.Ql [:
и
.Ql :]
обозначает список всех символов, принадлежащих к этому
классу.
Стандартными именами классов символов являются:
.Bl -column "alnum" "digit" "xdigit" -offset indent
.It Em "alnum	digit	punct"
.It Em "alpha	graph	space"
.It Em "blank	lower	upper"
.It Em "cntrl	print	xdigit"
.El
.Pp
Они обозначают классы символов, определенные в
.Xr ctype 3 .
Языковой стандарт может предоставлять другие.
Класс символов не может использоваться в качестве конечной точки диапазона.
.Pp
Заключенное в квадратные скобки выражение, подобное
.Ql [[:class:]]
может использоваться для сопоставления с одним символом, принадлежащим к
классу символов.
И наоборот, для сопоставления любого символа, не принадлежащего к определенному
классу, может использоваться оператор отрицания выражений в квадратных скобках:
.Ql [^[:class:]] .
.Pp
Существует два особых случая\(dd выражений в квадратных скобках:
выражения в квадратных скобках
.Ql [[:<:]]
и
.Ql [[:>:]]
сопоставляет пустую строку в начале и конце слова соответственно.
Слово определяется как последовательность словесных символов,
которой не предшествуют и не следуют
словесные символы.
Символ слова - это
.Em alnum
символ (как определено в
.Xr ctype 3 )
или знак подчеркивания.
Это расширение,
совместимое, но не указанное в
.St -p1003.2 ,
и должен с
осторожностью использоваться в программном обеспечении, предназначенном для переноса на другие системы.
Дополнительные разделители слов
.Ql \e<
и
.Ql \e>
предусмотрены для облегчения совместимости с традиционными
SVR4
системами, но они не являются портативными, и их следует избегать.
.Pp
В случае, если разрешение может соответствовать более чем одной подстроке в данной
строке,
разрешение соответствует той, которая начинается с самой ранней строки.
Если разрешение может соответствовать более чем одной подстроке, начинающейся с этой точки,
то она соответствует самой длинной.
Подвыражения также соответствуют максимально длинным подстрокам, при
условии, что все совпадение должно быть как можно длиннее,
при этом подвыражения, начинающиеся раньше, имеют приоритет перед
теми, которые начинаются позже.
Обратите внимание, что подвыражения более высокого уровня, таким образом, имеют приоритет над
подвыражениями компонентов более низкого уровня.
.Pp
Длина совпадений измеряется в символах, а не в сопоставляемых элементах.
Пустая строка считается длиннее, чем вообще не совпадающая.
Например,
.Ql bb*
соответствует трем средним символам
.Ql abbbc ,
.Ql (wee|week)(knights|nights)
соответствует всем десяти символам
.Ql weeknights ,
когда
.Ql (.*).*\&
сопоставляется с
.Ql abc
заключенное в круглые скобки подвыражение
соответствует всем трем символам, и
когда
.Ql (a*)*
сопоставляется с
.Ql bc
как с целым регулярным выражением, так и заключенным в круглые скобки
подвыражением, соответствующим пустой строке.
.Pp
Если указано соответствие, не зависящее от регистра,
то эффект будет таким же, как если бы в алфавите исчезли все различия по регистру.
Когда буквенный знак, существующий в нескольких регистрах, отображается как
обычный символ вне выражения, заключенного в квадратные скобки, он фактически
преобразуется в выражение, содержащее оба регистра,
.No например Ql x
становится
.Ql [xX] .
Когда оно появляется внутри выражения в квадратных скобках, все его аналоги по регистру
добавляются к выражению в квадратных скобках, так что (например)
.Ql [x]
становится
.Ql [xX]
и
.Ql [^x]
становится
.Ql [^xX] .
.Pp
Никаких особых ограничений на длину регулярного выражения не налагается(dd.
В переносимых программах не следует использовать регулярные выражения длиной
более 256 байт,
поскольку реализация может отказаться принимать такие регулярные выражения,
лучше остаться совместимым с POSIX.
.Pp
Устаревшие
.Pq Dq основные
регулярные выражения отличаются друг от друга в нескольких отношениях.
.Ql \&|
это обычный символ, и
по своей функциональности он не имеет аналога.
.Ql \&+
и
.Ql ?\&
это обычные символы, и их функциональность
может быть выражена с помощью рамки
.Po
.Ql {1,}
или
.Ql {0,1}
соответственно
.Pc .
Также обратите внимание, что
.Ql x+
в современных регулярных выражениях это эквивалентно
.Ql xx* .
Разделителями для рамок являются
.Ql \e{
и
.Ql \e} ,
с
.Ql \&{
и
.Ql \&}
сами по себе обычные символы.
Круглые скобки для вложенных подвыражений являются
.Ql \e(
и
.Ql \e) ,
с
.Ql \&(
и
.Ql \&)
сами по себе обычные символы.
.Ql \&^
является обычным символом, за исключением того, что находится в начале
регулярного выражения или\(dd начале подвыражения, заключенного в круглые скобки,
.Ql \&$
регулярного выражения или\(dd конце подвыражения, заключенного в круглые скобки,
является обычным символом, за исключением того, что находится в конце
и
.Ql \&*
является обычным символом, если он появляется в начале
регулярного выражения или в начале подвыражения, заключенного в круглые скобки
(после возможного начального
.Ql \&^ ) .
Наконец, существует еще один новый тип атомов -
.Em обратная ссылка :
.Ql \e
за ним следует ненулевая десятичная цифра
.Em d
соответствует той же последовательности символов
, которая соответствует
.Em d Ns th
заключенного в круглые скобки подвыражения
(нумерация подвыражений по позициям их открывающих круглых скобок,
слева направо),
так что (например)
.Ql \e([bc]\e)\e1
соответствует
.Ql bb
или
.Ql cc ,
но не
.Ql bc .
.Sh СМОТРИТЕ ТАКЖЕ
.Xr regex 3
.Rs
.%T Regular Expression Notation
.%R IEEE Std
.%N 1003.2
.%P section 2.8
.Re
.Sh НЕИСПРАВНОСТИ
Наличие двух видов разрешений - это провал.
.Pp
В текущей спецификации
.St -p1003.2
говорится, что
.Ql \&)
является обычным символов в
отсутствие непревзойденного
.Ql \&( ;
это произошло непреднамеренно из-за ошибки в формулировке,
и, скорее всего, будут внесены изменения.
Не полагайтесь на это.
.Pp
Обратные ссылки - это ужасная ошибка,
создающая серьезные проблемы для эффективной реализации.
Они также несколько расплывчато определены
(
.Ql a\e(\e(b\e)*\e2\e)*d
соответствует
.Ql abbbd ? ) .
Избегайте их использования.
.Pp
.St -p1003.2
спецификация независимого от регистра сопоставления является расплывчатой.
.Dq Один случай подразумевает все случаи
приведенное выше определение
является текущим консенсусом между разработчиками относительно правильной интерпретации.
.Pp
Синтаксис для обозначения границ слов невероятно уродлив.
