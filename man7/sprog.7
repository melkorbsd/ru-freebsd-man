.\"
.\" Copyright (c) 2001 Eric Melville <eric@FreeBSD.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd June 3, 2001
.Dt SPROG 7
.Os
.Sh ИМЯ
.Nm sprog
.Nd безопасные методы программирования
.Sh ОПИСАНИЕ
На протяжении многих лет проблемы с безопасностью возникали во многих системах.
Этот документ представляет собой руководство по методам программирования, позволяющим избежать этих проблем.
.Ss Overview
Написание безопасных приложений требует очень тщательного и пессимистичного подхода.
Приложения должны запускаться с соблюдением принципа
.Dq Li least privilege ,
чтобы ни один процесс никогда не запускался с доступом, превышающим минимальный,
необходимый для выполнения его функций.
По возможности, следует повторно использовать ранее протестированный код.
Как правило, никогда не следует доверять всему, что находится вне контроля программы.
Это включает в себя все формы пользовательского ввода, системные ресурсы, межпроцессное
взаимодействие и синхронизацию событий.
.Ss Buffer Overflows
Одним из наиболее распространенных типов проблем безопасности является переполнение буфера.
Короче говоря, если программа не будет осторожна с получаемыми данными,
то эти данные могут быть записаны в память, что приведет к перезаписи
адреса возврата для вызова функции, и программа будет вынуждена запустить код, который
выполняет недружественные действия.
.Pp
Большое количество функций в стандартной библиотеке C затрудняет или
даже делает невозможным предотвращение переполнения буфера при использовании.
К ним относятся
.Xr fscanf 3 ,
.Xr gets 3 ,
.Xr getwd 3 ,
.Xr realpath 3 ,
.Xr scanf 3 ,
.Xr sprintf 3 ,
.Xr strcat 3 ,
.Xr strcpy 3 ,
.Xr vscanf 3 ,
и
.Xr vsprintf 3 .
.Pp
Многие другие функции, работающие со строками, также могут привести к потенциальному
переполнению буфера при неосторожном использовании.
Например,
.Xr strncat 3
не делает все возможное, чтобы обеспечить завершение символа
.Tn NUL .
Конечно, всегда должна быть указана правильная длина.
Используя
.Xr strlcat 3
и
.Xr strlcpy 3
убедитесь, что строки заканчиваются нулем и имеют указанную длину.
.Pp
Функции, которые принимают формат строки, также должны использоваться с осторожностью.
Строка может содержать дополнительные спецификаторы формата, которые
открывают еще одну возможность переполнения буфера.
Никогда не передавайте строку с ненадежными данными без использования
.Ql %s .
Всегда используйте правильную безопасную идиому:
.Pp
.Dl function("%s", string);
.Pp
Существуют механизмы, которые решают эти проблемы на уровне библиотеки
и компилятора, однако ничто не заменит простого
написания хорошего кода.
.Ss Set-user-ID Issues
Во многих случаях может потребоваться, чтобы программа работала с расширенным
набором разрешений.
Причины этого включают привязку к защищенным сокетам, чтение и запись
определенных файлов и каталогов, а также доступ к различным ресурсам.
Часто решением является использование программы setuid.
Однако важно, чтобы программы отказались от этих привилегий как
можно скорее.
Например, если программа выполняет привязку к защищенному сокету, она должна
отказаться от своих привилегий, как только завершит привязку к этому сокету.
Это достигается с
помощью семейства системных вызовов
.Xr setuid 2 .
.Ss Limited Environments
Традиционным методом ограничения процесса является системный вызов
.Xr chroot 2 .
Этот системный вызов изменяет корневой каталог, из которого ссылаются на все остальные пути
для процесса и любых дочерних процессов.
Конечно, для начала процесс должен иметь доступ к этому пути.
Фактически новая среда не вступит в силу до тех пор, пока
.Xr chdir 2
вызывается для помещения процесса в новую среду.
К сожалению, процесс может выйти из этой среды, если будет
получен root-доступ.
.Pp
Часто,
.Xr jail 2
может использоваться для создания более полной и замкнутой среды, чем
.Xr chroot 2
может обеспечить.
Тюрьма ограничивает все процессы внутри этой среды, включая процессы с
правами суперпользователя.
.Pp
Детализированные привилегии, как описано в расширениях
.Tn POSIX Ns .1e ,
в настоящее время работа продолжается, и в центре внимания  находится проект
.Tn TrustedBSD .
Более подробную информацию можно найти по адресу
.Pa http://www.TrustedBSD.org/ .
.Ss Trust
Программы не должны делать предположений о среде, в которой они
выполняются.
Это включает в себя ввод данных пользователем, сигналы, переменные среды, системные ресурсы,
взаимодействие между процессами и общую память, а также другие факторы, которые
не контролируются программой.
Они также не должны предполагать, что могут быть обнаружены все формы недопустимых данных.
Вместо этого они должны использовать позитивную фильтрацию и разрешать только определенное подмножество
входных данных, которые, как известно, безопасны.
Это та же логика, которую администратор должен применять к брандмауэру, что
то есть отклонить по умолчанию и указать, что должно быть принято.
.Ss Race Conditions
Состояние гонки - это аномальное поведение, вызванное относительной синхронизацией
событий.
Программы не должны предполагать, что одно событие произойдет раньше другого.
Наиболее распространенными причинами возникновения условий гонки являются сигналы, проверки доступа и
чтение файлов.
Сигналы по своей природе асинхронны, поэтому
при работе с ними необходимо соблюдать особую осторожность.
Попытка проверить доступ с помощью последовательных неатомарных операций - очень
плохая идея, поскольку файлы могут быть перемещены и изменены в любой момент времени.
Вместо использования последовательности
.Xr access 2
и
.Xr open 2 ,
используйте
.Xr seteuid 2
а затем вызывайте
.Xr open 2
напрямую.
Предварительно правильно установите 
.Xr umask 2 .
.Sh СМОТРИТЕ ТАКЖЕ
.Xr jail 2 ,
.Xr setuid 2 ,
.Xr strlcat 3 ,
.Xr strlcpy 3
.Sh АВТОРЫ
.An -nosplit
.An Эрик Мелвилл Aq Mt eric@FreeBSD.org
первоначально написал этот документ на основе главы из
.%B "Руководство разработчика FreeBSD"
написанной
.An Мюрреем Стокли Aq Mt murray@FreeBSD.org .
