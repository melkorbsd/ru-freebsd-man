.\"-
.\" Copyright (c) 1992, 1993, 1994
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)symlink.7	8.3 (Berkeley) 3/31/94
.\"
.Dd February 16, 2015
.Dt SYMLINK 7
.Os
.Sh ИМЯ
.Nm symlink
.Nd обработка символических ссылок
.Sh ОБРАБОТКА СИМВОЛИЧЕСКИХ ССЫЛОК
Символьные ссылки - это файлы, которые действуют как указатели на другие файлы.
Чтобы понять их поведение, вы должны сначала понять, как
работают жесткие ссылки.
Жесткая ссылка на файл неотличима от исходного файла, поскольку
она является ссылкой на объект, лежащий в основе исходного имени файла.
Изменения в файле не зависят от имени, используемого для ссылки на
файл.
Жесткие ссылки могут не ссылаться на каталоги и файлы
в разных файловых системах.
Символьная ссылка содержит имя файла, с которым она связана,
т.е. это указатель на другое имя, а не на базовый объект.
По этой причине символические ссылки могут ссылаться на каталоги и могут охватывать
файловые системы.
.Pp
Поскольку символьная ссылка и объект, на который ссылается файловая система, сосуществуют в
пространстве имен файловой системы, может возникнуть путаница при различении между самой ссылкой
и объектом, на который ссылается ссылка.
Исторически сложилось так, что команды и системные вызовы использовали свои собственные
соглашения, основанные на ссылках, в некоторой степени случайным образом.
Правила для более единообразного подхода, как они реализованы в этой системе,
описаны здесь.
Важно, чтобы локальные приложения также соответствовали этим правилам,
чтобы пользовательский интерфейс был максимально согласован.
.Pp
Символьные ссылки обрабатываются либо с помощью самой ссылки,
либо с помощью объекта, на который ссылается ссылка.
В последнем случае считается,
что приложение или системный вызов
.Dq переходят
по ссылке.
Символьные ссылки могут ссылаться на другие символьные ссылки,
и в этом случае ссылки разыменовываются до тех пор, пока не будет найден объект, который
не является символьной ссылкой, не будет найдена
символьная ссылка, которая ссылается на несуществующий файл,
или не будет обнаружен цикл.
(Обнаружение зацикленности осуществляется путем установления верхнего предела количества
ссылок, по которым можно перейти, и при превышении этого предела возникает ошибка).
.Pp
Есть три отдельные области, которые необходимо обсудить.
Они заключаются в следующем:
.Pp
.Bl -enum -compact -offset indent
.It
Символические ссылки, используемые в качестве аргументов имени файла для системных вызовов.
.It
Символьные ссылки, указанные в качестве аргументов командной строки для утилит, которые
не пересекают файловое дерево.
.It
Символические ссылки, с которыми сталкиваются утилиты, просматривающие файловое дерево
(либо заданные в командной строке, либо встречающиеся при просмотре
файловой иерархии).
.El
.Ss System calls.
Первая область - это символические ссылки, используемые в качестве аргументов имени файла для
системных вызовов.
.Pp
За исключением случаев, указанных ниже, все системные вызовы следуют по символическим ссылкам.
Например, если бы существовала символическая ссылка
.Dq Li slink
которая указывала на файл с именем
.Dq Li afile ,
системный вызов
.Dq Li open("slink" ...\&)
вернет файловый дескриптор в файл
.Dq afile .
.Pp
Существует тринадцать системных вызовов, которые не переходят по ссылкам и которые работают
с самой символьной ссылкой.
Они являются:
.Xr lchflags 2 ,
.Xr lchmod 2 ,
.Xr lchown 2 ,
.Xr lpathconf 2 ,
.Xr lstat 2 ,
.Xr lutimes 2 ,
.Xr readlink 2 ,
.Xr readlinkat 2 ,
.Xr rename 2 ,
.Xr renameat 2 ,
.Xr rmdir 2 ,
.Xr unlink 2 ,
и
.Xr unlinkat 2 .
Потому что
.Xr remove 3
это псевдоним для
.Xr unlink 2 ,
он также не переходит по символическим ссылкам.
Когда
.Xr rmdir 2
или
.Xr unlinkat 2
с флагом
.Dv AT_REMOVEDIR
применяется к символьной ссылке, завершается ошибкой
.Er ENOTDIR .
.Pp
Системный вызов
.Xr linkat 2
не переходит по символическим ссылкам,
если не установлен соответствующий флажок
.Dv AT_SYMLINK_FOLLOW .
.Pp
Следующие системные вызовы следуют по символическим ссылкам,
если не установлен соответствующий флаг
.Dv AT_SYMLINK_NOFOLLOW :
.Xr chflagsat 2 ,
.Xr fchmodat 2 ,
.Xr fchownat 2 ,
.Xr fstatat 2
и
.Xr utimensat 2 .
.Pp
Владелец и группа существующей символьной ссылки могут быть изменены с
помощью системного вызова
.Xr lchown 2 .
Флаги, права доступа, владелец/группа и время модификации
существующей символьной ссылки могут быть изменены с помощью системных вызовов
.Xr lchflags 2 ,
.Xr lchmod 2 ,
.Xr lchown 2 ,
и
.Xr lutimes 2 ,
соответственно.
Из них система использует только флаги и права собственности;
права доступа игнорируются.
.Pp
Система
.Bx 4.4
отличается от исторических систем
.Bx 4
в том, что системный вызов
.Xr chown 2
был изменен для перехода по символическим ссылкам.
Системный вызов
.Xr lchown 2
был добавлен позже, когда ограничение нового
.Xr chown 2
стало очевидным.
.Ss Commands not traversing a file tree.
Вторая область - это символические ссылки, указанные в качестве
аргументов имени файла командной строки, на команды, которые не проходят через файловое дерево.
.Pp
За исключением случаев, указанных ниже, команды следуют по символическим ссылкам, указанным в качестве
аргументов командной строки.
Например, если имеется символическая ссылка
.Dq Li slink
который указывал на файл с именем
.Dq Li afile ,
команда
.Dq Li cat slink
будет отображаться содержимое файла
.Dq Li afile .
.Pp
Важно понимать, что это правило включает в себя команды, которые могут
необязательно пересекать файловые деревья, например\& команда
.Dq Li "chown file"
включено в это правило, в то время как команда
.Dq Li "chown -R file"
нет.
(Последнее описано ниже, в третьей области.)
.Pp
Если явно предполагается, что команда работает с символической
ссылкой вместо перехода по символической ссылке, например, желательно, чтобы
.Dq Li "chown slink"
изменила владельца файла, который
.Dq Li slink
независимо от того, является ли это символической ссылкой или нет, опцию
.Fl h
следует использовать.
В приведенном выше примере,
.Dq Li "chown root slink"
изменил бы владельца файла, на который ссылается
.Dq Li slink ,
пока
.Dq Li "chown -h root slink"
изменил бы владельца
.Dq Li slink
сам.
.Pp
Из этого правила есть пять исключений.
Команды
.Xr mv 1
и
.Xr rm 1
не переходят по символическим ссылкам, указанным в качестве аргументов,
но, соответственно, попытаются переименовать или удалить их.
(Обратите внимание, что если символическая ссылка ссылается на файл по относительному пути,
перемещение ее в другой каталог может привести к тому, что она перестанет работать,
поскольку путь может быть неверным.)
.Pp
Команда
.Xr ls 1
также является исключением из этого правила.
Для обеспечения совместимости с историческими системами (когда
.Nm ls
это не прогулка по дереву, т.е. вариант
.Fl R
не указан),
команда
.Nm ls
следует по символическим ссылкам, указанным в качестве аргументов, если параметр
.Fl H
или
.Fl L
указан,
или если параметры
.Fl F ,
.Fl d
или
.Fl l
не указаны.
(Команда
.Nm ls
это единственная команда, в которой параметры
.Fl H
и
.Fl L
повлияют на его поведение, даже если он не выполняет обход
файлового дерева.)
.Pp
Команды
.Xr file 1
и
.Xr stat 1
также являются исключениями из этого правила.
По умолчанию эти команды не переходят по символическим ссылкам, указанным в качестве аргумента,
но переходят по символическим ссылкам, указанным в качестве аргумента, если опция
.Fl L
указана.
.Pp
Система
.Bx 4.4
отличается от исторических систем
.Bx 4
в том, что команды
.Nm chown
и
.Nm chgrp
следуют символическим ссылкам, указанным в командной строке.
.Ss Commands traversing a file tree.
Следующие команды либо необязательно, либо всегда перемещаются по файловым деревьям:
.Xr chflags 1 ,
.Xr chgrp 1 ,
.Xr chmod 1 ,
.Xr cp 1 ,
.Xr du 1 ,
.Xr find 1 ,
.Xr ls 1 ,
.Xr pax 1 ,
.Xr rm 1 ,
.Xr tar 1
и
.Xr chown 8 .
.Pp
Важно понимать, что приведенные ниже правила в равной степени применимы к
символическим ссылкам, встречающимся при обходе файлового дерева, и к символическим
ссылкам, указанным в качестве аргументов командной строки.
.Pp
Первое правило применяется к символьным ссылкам, которые ссылаются на файлы,
не относящиеся к типу directory.
Операции, которые применяются к символьным ссылкам, выполняются над самими ссылками
, но в противном случае ссылки игнорируются.
.Pp
Команда
.Dq Li "rm -r slink directory"
удалит
.Dq Li slink ,
а также любые символические ссылки, встречающиеся при обходе дерева
.Dq Li directory ,
потому что символические ссылки могут быть удалены.
Ни в коем случае
.Nm rm
не повлияет на файл, на который ссылается
.Dq Li slink .
.Pp
Второе правило применяется к символическим ссылкам, которые ссылаются на файлы типа
directory.
Символические ссылки, которые ссылаются на файлы типа directory, никогда
.Dq не используются
по умолчанию.
Это часто называют
.Dq физическим
переходом, в отличие от
.Dq логического
перехода (когда переходят по символическим ссылкам, ссылающимся на каталоги).
.Pp
Максимально последовательно вы можете заставить команды, выполняющие переход по файловому дереву,
следовать любым символическим ссылкам, указанным в командной строке, независимо
от типа файла, на который они ссылаются, указав соответствующий флаг
.Fl H
(для
.Dq half\-logical ).
Этот флаг предназначен для того, чтобы пространство имен командной строки выглядело
как логическое пространство имен.
(Обратите внимание, что для команд, которые не всегда выполняют обход файлового дерева, флаг
.Fl H
будет проигнорирован, если флаг
.Fl R
также не указан.)
.Pp
Например, команда
.Dq Li "chown -HR user slink"
будет проходить по файловой иерархии, корнями уходящей в файл, на который указывает
.Dq Li slink .
Обратите внимание, что
.Fl H
это не то же самое, что ранее обсуждавшийся флаг
.Fl h .
Флаг
.Fl H
приводит к разыменованию символических ссылок, указанных в командной строке,
как для целей выполняемого действия,
так и для обхода дерева, и это происходит так, как если бы пользователь указал
имя файла, на который указывает символическая ссылка.
.Pp
Максимально последовательно вы можете заставить команды, выполняющие переход по файловому дереву
, следовать любым символическим ссылкам, указанным в командной строке, а также
любым символическим ссылкам, встречающимся во время обхода, независимо от
типа файла, на который они ссылаются, указав соответствующий флаг
.Fl L
(для
.Dq logical ).
Этот флаг предназначен для того, чтобы все пространство имен выглядело как
логическое пространство имен.
(Обратите внимание, что для команд, которые не всегда выполняют обход файлового дерева, флаг
.Fl L
будет проигнорирован, если флаг
.Fl R
также не уточняется.)
.Pp
Например, команда
.Dq Li "chown -LR user slink"
изменит владельца файла, на который ссылается
.Dq Li slink .
Если
.Dq Li slink
ссылается на каталог,
.Nm chown
будет проходить по файловой иерархии, корнями уходящей в каталог, на который он
ссылается.
Кроме того, если в любом файловом дереве будут обнаружены какие-либо символические ссылки, которые
.Nm chown
проходит, они будут обрабатываться таким же образом, как и
.Dq Li slink .
.Pp
Максимально последовательно вы можете задать поведение по умолчанию,
указав флаг
.Fl P
(для
.Dq physical ).
Этот флаг предназначен для того, чтобы все пространство имен выглядело как
физическое пространство имен.
.Pp
Для команд, которые по умолчанию не выполняют обход файлового дерева, флаги
.Fl H ,
.Fl L
и
.Fl P
игнорируются, если флаг
.Fl R
также не указан.
Кроме того, вы можете указать параметры
.Fl H ,
.Fl L
и
.Fl P
более одного раза; последний указанный параметр определяет
поведение команды.
Это предназначено для того, чтобы разрешить вам создавать псевдонимы команд, которые будут вести себя тем
или иным образом, а затем переопределять это поведение в командной строке.
.Pp
Команды
.Xr ls 1
и
.Xr rm 1
являются исключениями из этих правил.
Команда
.Nm rm
работает с символической ссылкой, а не с файлом, на который она ссылается,
и поэтому никогда не переходит по символической ссылке.
Команда
.Nm rm
не поддерживает параметры
.Fl H ,
.Fl L
или
.Fl P .
.Pp
Для поддержания совместимости с существующими системами,
команда
.Nm ls
действует немного по-другому.
Если вы не укажете параметры
.Fl F ,
.Fl d
или
.Fl l ,
.Nm ls
будет переходить по символическим ссылкам, указанным в командной строке.
Если флажок
.Fl L
установлен,
.Nm ls
следует по всем символьным ссылкам,
независимо от их типа,
независимо от того, указаны ли они в командной строке или встречаются при просмотре дерева.
.Sh СМОТРИТЕ ТАКЖЕ
.Xr chflags 1 ,
.Xr chgrp 1 ,
.Xr chmod 1 ,
.Xr cp 1 ,
.Xr du 1 ,
.Xr find 1 ,
.Xr ln 1 ,
.Xr ls 1 ,
.Xr mv 1 ,
.Xr pax 1 ,
.Xr rm 1 ,
.Xr tar 1 ,
.Xr lchflags 2 ,
.Xr lchmod 2 ,
.Xr lchown 2 ,
.Xr lstat 2 ,
.Xr lutimes 2 ,
.Xr readlink 2 ,
.Xr rename 2 ,
.Xr symlink 2 ,
.Xr unlink 2 ,
.Xr fts 3 ,
.Xr remove 3 ,
.Xr chown 8
