.\"
.\" This file and its contents are supplied under the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.illumos.org/license/CDDL.
.\"
.\" Copyright (c) 2016, 2019 by Delphix. All Rights Reserved.
.\" Copyright (c) 2019, 2020 by Christian Schwarz. All Rights Reserved.
.\" Copyright 2020 Joyent, Inc.
.\"
.Dd May 27, 2021
.Dt ZFS-PROGRAM 8
.Os
.
.Sh ИМЯ
.Nm zfs-program
.Nd выполнение программ канала ZFS
.Sh СИНТАКСИС
.Nm zfs
.Cm program
.Op Fl jn
.Op Fl t Ar instruction-limit
.Op Fl m Ar memory-limit
.Ar pool
.Ar script
.Op Ar script arguments
.
.Sh ОПИСАНИЕ
Программный интерфейс канала ZFS позволяет
выполнять административные операции ZFS программно в виде Lua-скрипта.
Весь сценарий выполняется атомарно, и никакие другие административные
операции не выполняются одновременно.
Библиотека вызовов ZFS доступна для программных сценариев канала.
Программы канала могут запускаться только с правами root.
.Pp
Для запуска сценариев программы канала используется модифицированная версия интерпретатора Lua 5.2.
Руководство по Lua 5.2 можно найти по адресу
.Lk http://www.lua.org/manual/5.2/
.Pp
Программа канала, представленная
.Ar скриптом
будет запущена на
.Ar пуле ,
и любые попытки получить доступ к другим пулам или изменить их приведут к ошибке.
.Sh ПАРАМЕТРЫ
.Bl -tag -width "-t"
.It Fl j
Отображать выходные данные программы канала в формате JSON.
Если этот флаг установлен, а стандартный вывод пуст
, значит, программа канала столкнулась с ошибкой.
Подробная информация о такой ошибке будет вывдена в стандартной ошибке в простом тексте.
.It Fl n
Запускает программу канала только для чтения, которая работает быстрее.
Программа не может изменять состояние диска, вызывая функции из
подмодуля zfs.sync.
Программа может использоваться для сбора такой информации, как свойства, и
определения того, будут ли изменения успешными (zfs.check.*).
Без этого флага все ожидающие изменения должны быть синхронизированы с диском, прежде
чем программа канала сможет завершиться.
.It Fl t Ar instruction-limit
Ограничивает количество выполняемых инструкций Lua.
Если канальная программа выполнит больше указанного количества инструкций,
она будет остановлена и будет возвращена ошибка.
Ограничение по умолчанию составляет 10 миллионов инструкций, и его можно установить максимум
на 100 миллионов инструкций.
.It Fl m Ar memory-limit
Ограничение памяти в байтах.
Если канальная программа попытается выделить больше памяти, чем задано, она
будет остановлена и выдаст сообщение об ошибке.
Ограничение памяти по умолчанию составляет 10 Мб, но может быть установлено максимум на 100 Мб.
.El
.Pp
Все оставшиеся строки аргументов будут переданы непосредственно в Lua-скрипт, как
описано в разделе
.Sx LUA ИНТЕРФЕЙС
ниже.
.Sh LUA ИНТЕРФЕЙС
Канальная программа может быть вызвана либо из командной строки, либо с помощью библиотечного
вызова
.Fn lzc_channel_program .
.
.Ss Аргументы
Аргументы, передаваемые программе канала, преобразуются в таблицу Lua.
При вызове из командной строки дополнительные аргументы скрипта Lua будут
доступны в виде массива, хранящегося в таблице аргументов с ключом 'argv':
.Bd -literal -compact -offset indent
args = ...
argv = args["argv"]
-- argv == {1="arg1", 2="arg2", ...}
.Ed
.Pp
При вызове из интерфейса libzfs произвольный список аргументов может быть
передан программе канала, которая доступна через тот же самый синтаксис в Lua
.Qq Li ... :
.Bd -literal -compact -offset indent
args = ...
-- args == {"foo"="bar", "baz"={...}, ...}
.Ed
.Pp
Обратите внимание, что поскольку массивы Lua индексируются на 1, индексы массивов, передаваемых в Lua из
интерфейса libzfs, будут увеличены на 1.
То есть элемент
в массиве
.Va arr[0]
в C, передаваемом на канал, программа будет храниться в
.Va arr[1]
при доступе из Lua.
.
.Ss Возвращаемые значения
Инструкции возврата Lua принимают вид:
.Dl return ret0, ret1, ret2, ...
.Pp
Инструкции возврата, возвращающие несколько значений, разрешены внутри
скрипта программы канала, но попытка вернуть более одного значения с
верхнего уровня программы канала запрещена и приведет к ошибке.
Однако таблицы, содержащие несколько значений, все равно могут быть возвращены.
При вызове из командной строки оператор возврата:
.Bd -literal -compact -offset indent
a = {foo="bar", baz=2}
return a
.Ed
.Pp
Будет выведен в следующем формате:
.Bd -literal -compact -offset indent
Channel program fully executed with return value:
    return:
        baz: 2
        foo: 'bar'
.Ed
.
.Ss Критические ошибки
Если программа канала столкнется с фатальной ошибкой во время выполнения, будет возвращен ненулевой
статус завершения.
Если доступна дополнительная информация об ошибке, будет
возвращен одноэлементный список с подробным описанием ошибки:
.Dl error: \&"error string, including Lua stack trace"
.Pp
Если возвращается критическая ошибка, то программа канала, возможно, не выполнялась вообще,
частично или полностью, но не смогла передать
возвращаемое значение обратно в пользовательскую область.
.Pp
Если программа канала исчерпает инструкцию или объем памяти,
будет сгенерирована критическая ошибка, и программа будет остановлена, в результате чего программа
будет выполнена частично.
Не предпринимается попыток отменить какие-либо уже выполненные операции.
Обратите внимание, что, поскольку как количество команд, так и объем памяти, используемый
канальной программой, являются детерминированными при запуске с одинаковыми входными данными и
состоянием файловой системы, если канальная программа была успешно запущена один раз, вы
можете гарантировать, что она успешно завершится в системе аналогичного размера.
.Pp
Если программа канала попытается вернуть слишком большое значение, программа будет
полностью выполнена, но завершит работу с ненулевым кодом состояния и без возвращаемого значения.
.Pp
.Em Примечание:
Функции ZFS API не генерируют фатальных ошибок при правильном вызове, они
возвращают код ошибки, и программа канала продолжает выполняться.
Смотрите раздел
.Sx ZFS API
ниже для получения подробной информации о кодах возврата ошибок, относящихся к конкретной функции
.
.Ss Преобразование значений Lua в C
При вызове канальной программы через интерфейс libzfs необходимо
преобразовать аргументы и возвращаемые значения из значений Lua в их эквиваленты на C,
и наоборот.
.Pp
Существует соответствие между значениями nvlist в таблицах C и Lua.
Таблица Lua, которая возвращается из программы канала, будет рекурсивно
преобразована в nvlist, а табличные значения будут преобразованы в их естественные
эквиваленты:
.TS
cw3 l c l .
	string	->	string
	number	->	int64
	boolean	->	boolean_value
	nil	->	boolean (no value)
	table	->	nvlist
.TE
.Pp
Аналогично, табличные ключи заменяются строковыми эквивалентами следующим образом:
.TS
cw3 l c l .
	string	->	no change
	number	->	signed decimal string ("%lld")
	boolean	->	"true" | "false"
.TE
.Pp
Любое столкновение ключевых строк таблицы (например, строка "true" и
логическое значение true) приведет к фатальной ошибке.
.Pp
Числа Lua внутренне представлены в виде 64-разрядных целых чисел со знаком.
.
.Sh СТАНДАРТНАЯ БИБЛИОТЕКА LUA
Доступны следующие встроенные функции базовой библиотеки Lua:
.TS
cw3 l l l l .
	assert	rawlen	collectgarbage	rawget
	error	rawset	getmetatable	select
	ipairs	setmetatable	next	tonumber
	pairs	tostring	rawequal	type
.TE
.Pp
Всем функциям в
.Em сопрограмме ,
.Em строке ,
и
.Em таблице
также доступны встроенные подмодули.
Полный список и документация по этим модулям доступны в руководстве по Lua.
.Pp
Следующие функции базовой библиотеки функций были отключены и
недоступны для использования в программах канала:
.TS
cw3 l l l l l l .
	dofile	loadfile	load	pcall	print	xpcall
.TE
.
.Sh ZFS API
.
.Ss Аргументы функции
Каждая функция API принимает фиксированный набор обязательных позиционных аргументов и
необязательных ключевых слов.
Например, функция destroy принимает единственный позиционный строковый аргумент
(имя уничтожаемого набора данных) и необязательный логический аргумент ключевого слова "defer".
При использовании круглых скобок для указания аргументов функции Lua
можно использовать только позиционные аргументы:
.Dl Sy zfs.sync.destroy Ns Pq \&"rpool@snap"
.Pp
Чтобы использовать аргументы по ключевым словам, функции должны вызываться с одним аргументом, который
представляет собой таблицу Lua, содержащую записи, преобразующие целые числа в позиционные аргументы, а
строки - в аргументы по ключевым словам:
.Dl Sy zfs.sync.destroy Ns Pq {1="rpool@snap", defer=true}
.Pp
Язык Lua позволяет использовать фигурные скобки вместо круглых скобок в качестве
синтаксического дополнения для этого соглашения о вызове:
.Dl Sy zfs.sync.snapshot Ns {"rpool@snap", defer=true}
.
.Ss Функция возвращения значения
При успешном выполнении функции API возвращается значение 0.
При сбое возвращается код ошибки, и программа канала продолжает
выполнение.
Функции API не генерируют фатальных ошибок, за исключением случаев
неустранимой внутренней ошибки файловой системы.
.Pp
В дополнение к возвращению кода ошибки, некоторые функции также возвращают дополнительные
сведения, описывающие причину ошибки.
Это дополнительное описание задается в качестве второго возвращаемого значения и всегда будет таблица Lua или Nil, если сведения об ошибке возвращены не были.
В таблице сведений об ошибке могут быть разные ключи в зависимости от функции
и случая ошибки.
Любая такая функция может быть вызвана с ожиданием единственного возвращаемого значения:
.Dl errno = Sy zfs.sync.promote Ns Pq dataset
.Pp
Или же можно получить подробную информацию об ошибке:
.Bd -literal -compact -offset indent
.No errno, details = Sy zfs.sync.promote Ns Pq dataset
if (errno == EEXIST) then
    assert(details ~= Nil)
    list_of_conflicting_snapshots = details
end
.Ed
.Pp
Следующие глобальные псевдонимы для кодов возврата ошибок функций API определены
для использования в канальных программах:
.TS
cw3 l l l l l l l .
	EPERM	ECHILD	ENODEV	ENOSPC	ENOENT	EAGAIN	ENOTDIR
	ESPIPE	ESRCH	ENOMEM	EISDIR	EROFS	EINTR	EACCES
	EINVAL	EMLINK	EIO	EFAULT	ENFILE	EPIPE	ENXIO
	ENOTBLK	EMFILE	EDOM	E2BIG	EBUSY	ENOTTY	ERANGE
	ENOEXEC	EEXIST	ETXTBSY	EDQUOT	EBADF	EXDEV	EFBIG
.TE
.
.Ss Функции API
Для получения подробного описания точного поведения любых административных
операций ZFS, смотрите главную страницу руководства
.Xr zfs 8 .
.Bl -tag -width "xx"
.It Fn zfs.debug msg
Записывает отладочное сообщение в журнал zfs_dbgmsg.
Журнал этих сообщений можно распечатать с помощью команды mdb "::zfs_dbgmsg" или
отслеживать в реальном времени, выполнив
.Dl dtrace -n 'zfs-dbgmsg{trace(stringof(arg0))}'
.Pp
.Bl -tag -compact -width "property (string)"
.It Ar msg Pq string
Отладочное сообщение, которое будет напечатано.
.El
.It Fn zfs.exists dataset
Возвращает значение true, если данный набор данных существует, или значение false, если его нет.
Если набор данных отсутствует в целевом пуле, будет выдана неустранимая ошибка.
То есть в программе канала, запущенной на rpool,
.Sy zfs.exists Ns Pq \&"rpool/nonexistent_fs"
возвращает значение false, но будет ошибка
.Sy zfs.exists Ns Pq \&"somepool/fs_that_may_exist" .
.Pp
.Bl -tag -compact -width "property (string)"
.It Ar dataset Pq string
Набор данных для проверки на существование.
Должен быть в целевом пуле.
.El
.It Fn zfs.get_prop dataset property
Возвращает два значения.
Во-первых, строку, число или таблицу, содержащие значение свойства для данного
набора данных.
Во-вторых, строка, содержащая источник свойства (т.е. имя
набора данных, в котором оно было задано, или nil, если оно доступно только для чтения).
Выдает ошибку Lua, если набор данных недействителен или свойство не существует.
Обратите внимание, что Lua поддерживает только типы чисел int64, тогда как свойства чисел ZFS
- uint64.
Это означает, что очень большие значения (например, идентификаторы GUID) могут искажаться и выглядеть отрицательными.
.Pp
.Bl -tag -compact -width "property (string)"
.It Ar dataset Pq string
Путь к файловой системе или снапшоту, из которого можно извлекать свойства.
.It Ar property Pq string
Имя свойства для извлечения.
Поддерживаются все свойства файловой системы, снапшота и тома, за исключением
.Sy mounted
и
.Sy iscsioptions .
Также поддерживаются свойства
.Sy written@ Ns Ar snap ,
.Sy written# Ns Ar bookmark
и
.Ao Sy user Ns | Ns Sy group Ac Ns Ao Sy quota Ns | Ns Sy used Ac Ns Sy @ Ns Ar id ,
хотя идентификатор должен быть в числовой форме.
.El
.El
.Bl -tag -width "xx"
.It Sy zfs.sync submodule
Подмодуль синхронизации содержит функции, которые изменяют состояние диска.
Они выполняются в "контексте синхронизации".
.Pp
Доступны следующие функции подмодуля синхронизации:
.Bl -tag -width "xx"
.It Sy zfs.sync.destroy Ns Pq Ar dataset , Op Ar defer Ns = Ns Sy true Ns | Ns Sy false
Уничтожает данный набор данных.
Возвращает 0 при успешном уничтожении или ненулевой код ошибки, если набор
данных не удалось уничтожить (например, если у набора данных есть какие-либо активные дочерние элементы или
клоны).
.Pp
.Bl -tag -compact -width "newbookmark (string)"
.It Ar dataset Pq string
Файловая система или снапшот, подлежащие уничтожению.
.It Op Ar defer Pq boolean
Допустимо только для уничтожения снапшотов.
Если установлено значение true и в снапшоте есть удержания или клоны, это позволяет
помечать снапшот для отложенного удаления, а не для сбоя.
.El
.It Fn zfs.sync.inherit dataset property
Очищает указанное свойство в данном наборе данных, в результате чего оно наследуется
от предка или восстанавливается до значения по умолчанию, если свойство предка не задано.
.Nm zfs Cm inherit Fl S
параметр не был реализован.
Возвращает 0 в случае успеха или ненулевой код ошибки, если не удалось
очистить свойство.
.Pp
.Bl -tag -compact -width "newbookmark (string)"
.It Ar dataset Pq string
Файловая система или снапшот, содержащий свойство, которое требуется очистить.
.It Ar property Pq string
Свойство, которое необходимо очистить.
Разрешенные свойства такие же, как и для команды
.Nm zfs Cm inherit .
.El
.It Fn zfs.sync.promote dataset
Перемещает данный клон в файловую систему.
Возвращает 0 в случае успешного продвижения или ненулевой код ошибки в противном случае.
Если возвращено значение EEXIST, то вторым возвращаемым значением будет массив
снапшотов клона, имена которых совпадают со снапшотами родительской файловой системы.
.Pp
.Bl -tag -compact -width "newbookmark (string)"
.It Ar dataset Pq string
Клон, подлежащий перемещению.
.El
.It Fn zfs.sync.rollback filesystem
Откат к предыдущему снимку для набора данных.
При успешном откате возвращает 0 или ненулевой код ошибки в противном случае.
Откат может выполняться для файловых систем или zvols, но не для снимков
или подключенных наборов данных.
EBUSY возвращается в том случае, если файловая система смонтирована.
.Pp
.Bl -tag -compact -width "newbookmark (string)"
.It Ar filesystem Pq string
Файловая система для отката.
.El
.It Fn zfs.sync.set_prop dataset property value
Устанавливает данное свойство для набора данных.
В настоящее время поддерживаются только пользовательские свойства.
Возвращает 0, если свойство было задано, или ненулевой код ошибки в противном случае.
.Pp
.Bl -tag -compact -width "newbookmark (string)"
.It Ar dataset Pq string
Набор данных, в котором будет задано свойство.
.It Ar property Pq string
Свойство, которое нужно установить.
.It Ar value Pq string
Значение свойства, которое должно быть установлено.
.El
.It Fn zfs.sync.snapshot dataset
Создаёт снапшот файловой системы.
Возвращает 0, если снапшот был успешно создан,
и ненулевой код ошибки в противном случае.
.Pp
Примечание: Создание снапшота не удастся в любом пуле старше устаревшей версии 27.
Чтобы разрешить создание снапшотов из ZCP-скриптов, необходимо обновить пул.
.Pp
.Bl -tag -compact -width "newbookmark (string)"
.It Ar dataset Pq string
Имя создаваемого моментального снимка.
.El
.It Fn zfs.sync.rename_snapshot dataset oldsnapname newsnapname
Переименовует снапшот файловой системы или тома.
Возвращает 0, если снапшот был успешно переименован,
и ненулевой код ошибки в противном случае.
.Pp
.Bl -tag -compact -width "newbookmark (string)"
.It Ar dataset Pq string
Имя родительского набора данных снапшота.
.It Ar oldsnapname Pq string
Оригинальное название снапшота.
.It Ar newsnapname Pq string
Новое имя снапшота.
.El
.It Fn zfs.sync.bookmark source newbookmark
Создаёт закладку из существующего исходного снапшота или закладки.
Возвращает 0, если новая закладка была успешно создана,
и ненулевой код ошибки в противном случае.
.Pp
Примечание: Для создания закладок требуется включить соответствующую функцию пула.
.Pp
.Bl -tag -compact -width "newbookmark (string)"
.It Ar source Pq string
Полное имя существующего снапшота или закладки.
.It Ar newbookmark Pq string
Полное название новой закладки.
.El
.El
.It Sy zfs.check submodule
Для каждой функции в подмодуле
.Sy zfs.sync ,
существует соответствующая функция
.Sy zfs.check ,
которая выполняет "пробный запуск" той же операции.
Каждый из них принимает те же аргументы, что и его аналог
.Sy zfs.sync
и возвращает 0, если операция завершится успешно,
или ненулевой код ошибки, если произойдет сбой, а также любые другие сведения об ошибке.
То есть, каждая из них ведет себя так же, как и соответствующая функция синхронизации, за исключением
фактического выполнения запрошенного изменения.
Например,
.Fn zfs.check.destroy \&"fs"
возврнет 0, если бы
.Fn zfs.sync.destroy \&"fs"
привело к успешному уничтожению набора данных.
.Pp
Доступными функцями
.Sy zfs.check
являются:
.Bl -tag -compact -width "xx"
.It Sy zfs.check.destroy Ns Pq Ar dataset , Op Ar defer Ns = Ns Sy true Ns | Ns Sy false
.It Fn zfs.check.promote dataset
.It Fn zfs.check.rollback filesystem
.It Fn zfs.check.set_property dataset property value
.It Fn zfs.check.snapshot dataset
.El
.It Sy zfs.list submodule
Подмодуль zfs.list предоставляет функции для перебора наборов данных и
свойств.
Вместо того, чтобы возвращать таблицы, эти функции действуют как итераторы Lua и
обычно используются следующим образом:
.Bd -literal -compact -offset indent
.No for child in Fn zfs.list.children \&"rpool" No do
    ...
end
.Ed
.Pp
Доступными функцями
.Sy zfs.list
являются:
.Bl -tag -width "xx"
.It Fn zfs.list.clones snapshot
Выполните итерацию по всем клонам данного снапшота.
.Pp
.Bl -tag -compact -width "snapshot (string)"
.It Ar snapshot Pq string
Должен быть действительный путь к снапшоту в текущем пуле.
.El
.It Fn zfs.list.snapshots dataset
Выполняет итерацию по всем снапшотам данного набора данных.
Каждый снапшот возвращается в виде строки, содержащей полное имя набора данных,
например "pool/fs@snap".
.Pp
.Bl -tag -compact -width "snapshot (string)"
.It Ar dataset Pq string
Должна быть допустимая файловая система или том.
.El
.It Fn zfs.list.children dataset
Выполняетитерацию по всем прямым дочерним элементам данного набора данных.
Каждый дочерний элемент возвращается в виде строки, содержащей полное имя набора данных,
например "pool/fs/child".
.Pp
.Bl -tag -compact -width "snapshot (string)"
.It Ar dataset Pq string
Должна быть допустимая файловая система или том.
.El
.It Fn zfs.list.bookmarks dataset
Выполняет итерацию по всем закладкам данного набора данных.
Каждая закладка возвращается в виде строки, содержащей полное название набора данных,
например "pool/fs#bookmark".
.Pp
.Bl -tag -compact -width "snapshot (string)"
.It Ar dataset Pq string
Должна быть допустимая файловая система или том.
.El
.It Fn zfs.list.holds snapshot
Выполните итерацию по всем пользовательским удержаниям в данном снапшоте.
Каждое удержание возвращается
в виде пары тегов удержания и временной метки (в секундах с момента создания), в
которую оно было создано.
.Pp
.Bl -tag -compact -width "snapshot (string)"
.It Ar snapshot Pq string
Должен быть действительный снапшот.
.El
.It Fn zfs.list.properties dataset
Псевдоним для zfs.list.user_properties (смотрите соответствующую запись).
.Pp
.Bl -tag -compact -width "snapshot (string)"
.It Ar dataset Pq string
Должна быть допустимая файловая система, снапшот или том.
.El
.It Fn zfs.list.user_properties dataset
Выполняет итерацию по всем пользовательским свойствам для данного набора данных.
На каждом шаге итерации выводит имя свойства, его значение
и источник.
Выдает ошибку Lua, если набор данных является недопустимым.
.Pp
.Bl -tag -compact -width "snapshot (string)"
.It Ar dataset Pq string
Должна быть допустимая файловая система, снапшот или том.
.El
.It Fn zfs.list.system_properties dataset
Возвращает массив строк, имена допустимых системных параметров (не определенных пользователем)
свойств для данного набора данных.
Выдает ошибку Lua, если набор данных является недопустимым.
.Pp
.Bl -tag -compact -width "snapshot (string)"
.It Ar dataset Pq string
Должна быть допустимая файловая система, снапшот или том.
.El
.El
.El
.
.Sh ПРИМЕРЫ
.
.Ss Пример 1
Следующая программа канала рекурсивно уничтожает файловую систему и все ее
снапшоты и дочерние элементы наивным образом.
Обратите внимание, что это не требует обработки ошибок или создания отчетов.
.Bd -literal -offset indent
function destroy_recursive(root)
    for child in zfs.list.children(root) do
        destroy_recursive(child)
    end
    for snap in zfs.list.snapshots(root) do
        zfs.sync.destroy(snap)
    end
    zfs.sync.destroy(root)
end
destroy_recursive("pool/somefs")
.Ed
.
.Ss Пример 2
Более подробная и надежная версия той же программы канала, которая
корректно обнаруживает ошибки и сообщает о них, а также использует набор данных для уничтожения
в качестве аргумента командной строки, была бы следующей:
.Bd -literal -offset indent
succeeded = {}
failed = {}

function destroy_recursive(root)
    for child in zfs.list.children(root) do
        destroy_recursive(child)
    end
    for snap in zfs.list.snapshots(root) do
        err = zfs.sync.destroy(snap)
        if (err ~= 0) then
            failed[snap] = err
        else
            succeeded[snap] = err
        end
    end
    err = zfs.sync.destroy(root)
    if (err ~= 0) then
        failed[root] = err
    else
        succeeded[root] = err
    end
end

args = ...
argv = args["argv"]

destroy_recursive(argv[1])

results = {}
results["succeeded"] = succeeded
results["failed"] = failed
return results
.Ed
.
.Ss Пример 3
Следующая функция выполняет операцию принудительного продвижения, пытаясь
продвигать данный клон и уничтожая все конфликтующие снапшоты.
.Bd -literal -offset indent
function force_promote(ds)
   errno, details = zfs.check.promote(ds)
   if (errno == EEXIST) then
       assert(details ~= Nil)
       for i, snap in ipairs(details) do
           zfs.sync.destroy(ds .. "@" .. snap)
       end
   elseif (errno ~= 0) then
       return errno
   end
   return zfs.sync.promote(ds)
end
.Ed
